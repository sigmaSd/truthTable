// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var inited = false;
function init() {
    inited = true;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for(var i1 = 0, len = code.length; i1 < len; ++i1){
        lookup[i1] = code[i1];
        revLookup[code.charCodeAt(i1)] = i1;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
}
function toByteArray(b64) {
    if (!inited) {
        init();
    }
    var i2, j2, l1, tmp, placeHolders, arr;
    var len = b64.length;
    if (len % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
    }
    placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
    arr = new Arr(len * 3 / 4 - placeHolders);
    l1 = placeHolders > 0 ? len - 4 : len;
    var L1 = 0;
    for(i2 = 0, j2 = 0; i2 < l1; i2 += 4, j2 += 3){
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[L1++] = tmp >> 16 & 255;
        arr[L1++] = tmp >> 8 & 255;
        arr[L1++] = tmp & 255;
    }
    if (placeHolders === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[L1++] = tmp & 255;
    } else if (placeHolders === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[L1++] = tmp >> 8 & 255;
        arr[L1++] = tmp & 255;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start1, end) {
    var tmp;
    var output = [];
    for(var i3 = start1; i3 < end; i3 += 3){
        tmp = (uint8[i3] << 16) + (uint8[i3 + 1] << 8) + uint8[i3 + 2];
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    if (!inited) {
        init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var output = "";
    var parts = [];
    var maxChunkLength = 16383;
    for(var i4 = 0, len2 = len - extraBytes; i4 < len2; i4 += maxChunkLength){
        parts.push(encodeChunk(uint8, i4, i4 + maxChunkLength > len2 ? len2 : i4 + maxChunkLength));
    }
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[tmp << 4 & 63];
        output += "==";
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        output += lookup[tmp >> 10];
        output += lookup[tmp >> 4 & 63];
        output += lookup[tmp << 2 & 63];
        output += "=";
    }
    parts.push(output);
    return parts.join("");
}
function read(buffer, offset, isLE, mLen, nBytes) {
    var e, m2;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i5 = isLE ? nBytes - 1 : 0;
    var d2 = isLE ? -1 : 1;
    var s1 = buffer[offset + i5];
    i5 += d2;
    e = s1 & (1 << -nBits) - 1;
    s1 >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i5], i5 += d2, nBits -= 8){}
    m2 = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m2 = m2 * 256 + buffer[offset + i5], i5 += d2, nBits -= 8){}
    if (e === 0) {
        e = 1 - eBias;
    } else if (e === eMax) {
        return m2 ? NaN : (s1 ? -1 : 1) * Infinity;
    } else {
        m2 = m2 + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s1 ? -1 : 1) * m2 * Math.pow(2, e - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m3, c1;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i6 = isLE ? 0 : nBytes - 1;
    var d3 = isLE ? 1 : -1;
    var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m3 = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c1 = Math.pow(2, -e)) < 1) {
            e--;
            c1 *= 2;
        }
        if (e + eBias >= 1) {
            value += rt / c1;
        } else {
            value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c1 >= 2) {
            e++;
            c1 /= 2;
        }
        if (e + eBias >= eMax) {
            m3 = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m3 = (value * c1 - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m3 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i6] = m3 & 255, i6 += d3, m3 /= 256, mLen -= 8){}
    e = e << mLen | m3;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i6] = e & 255, i6 += d3, e /= 256, eLen -= 8){}
    buffer[offset + i6 - d3] |= s2 * 128;
}
var toString = {}.toString;
var isArray = Array.isArray || function(arr) {
    return toString.call(arr) == "[object Array]";
};
var INSPECT_MAX_BYTES = 50;
Buffer1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== void 0 ? global$1.TYPED_ARRAY_SUPPORT : true;
function kMaxLength() {
    return Buffer1.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function createBuffer(that, length) {
    if (kMaxLength() < length) {
        throw new RangeError("Invalid typed array length");
    }
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        that = new Uint8Array(length);
        that.__proto__ = Buffer1.prototype;
    } else {
        if (that === null) {
            that = new Buffer1(length);
        }
        that.length = length;
    }
    return that;
}
function Buffer1(arg, encodingOrOffset, length) {
    if (!Buffer1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer1)) {
        return new Buffer1(arg, encodingOrOffset, length);
    }
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
            throw new Error("If encoding is specified then the first argument must be a string");
        }
        return allocUnsafe(this, arg);
    }
    return from(this, arg, encodingOrOffset, length);
}
Buffer1.poolSize = 8192;
Buffer1._augment = function(arr) {
    arr.__proto__ = Buffer1.prototype;
    return arr;
};
function from(that, value, encodingOrOffset, length) {
    if (typeof value === "number") {
        throw new TypeError('"value" argument must not be a number');
    }
    if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length);
    }
    if (typeof value === "string") {
        return fromString(that, value, encodingOrOffset);
    }
    return fromObject(that, value);
}
Buffer1.from = function(value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length);
};
if (Buffer1.TYPED_ARRAY_SUPPORT) {
    Buffer1.prototype.__proto__ = Uint8Array.prototype;
    Buffer1.__proto__ = Uint8Array;
}
function assertSize(size) {
    if (typeof size !== "number") {
        throw new TypeError('"size" argument must be a number');
    } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative');
    }
}
function alloc(that, size, fill2, encoding) {
    assertSize(size);
    if (size <= 0) {
        return createBuffer(that, size);
    }
    if (fill2 !== void 0) {
        return typeof encoding === "string" ? createBuffer(that, size).fill(fill2, encoding) : createBuffer(that, size).fill(fill2);
    }
    return createBuffer(that, size);
}
Buffer1.alloc = function(size, fill2, encoding) {
    return alloc(null, size, fill2, encoding);
};
function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer1.TYPED_ARRAY_SUPPORT) {
        for(var i7 = 0; i7 < size; ++i7){
            that[i7] = 0;
        }
    }
    return that;
}
Buffer1.allocUnsafe = function(size) {
    return allocUnsafe(null, size);
};
Buffer1.allocUnsafeSlow = function(size) {
    return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
    }
    if (!Buffer1.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding');
    }
    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string, encoding);
    if (actual !== length) {
        that = that.slice(0, actual);
    }
    return that;
}
function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for(var i8 = 0; i8 < length; i8 += 1){
        that[i8] = array[i8] & 255;
    }
    return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength;
    if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError("'offset' is out of bounds");
    }
    if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError("'length' is out of bounds");
    }
    if (byteOffset === void 0 && length === void 0) {
        array = new Uint8Array(array);
    } else if (length === void 0) {
        array = new Uint8Array(array, byteOffset);
    } else {
        array = new Uint8Array(array, byteOffset, length);
    }
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        that = array;
        that.__proto__ = Buffer1.prototype;
    } else {
        that = fromArrayLike(that, array);
    }
    return that;
}
function fromObject(that, obj) {
    if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);
        if (that.length === 0) {
            return that;
        }
        obj.copy(that, 0, 0, len);
        return that;
    }
    if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
            if (typeof obj.length !== "number" || isnan(obj.length)) {
                return createBuffer(that, 0);
            }
            return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && isArray(obj.data)) {
            return fromArrayLike(that, obj.data);
        }
    }
    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function checked(length) {
    if (length >= kMaxLength()) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
    }
    return length | 0;
}
Buffer1.isBuffer = isBuffer;
function internalIsBuffer(b1) {
    return !!(b1 != null && b1._isBuffer);
}
Buffer1.compare = function compare(a1, b2) {
    if (!internalIsBuffer(a1) || !internalIsBuffer(b2)) {
        throw new TypeError("Arguments must be Buffers");
    }
    if (a1 === b2) return 0;
    var x2 = a1.length;
    var y1 = b2.length;
    for(var i9 = 0, len = Math.min(x2, y1); i9 < len; ++i9){
        if (a1[i9] !== b2[i9]) {
            x2 = a1[i9];
            y1 = b2[i9];
            break;
        }
    }
    if (x2 < y1) return -1;
    if (y1 < x2) return 1;
    return 0;
};
Buffer1.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer1.concat = function concat(list, length) {
    if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
        return Buffer1.alloc(0);
    }
    var i10;
    if (length === void 0) {
        length = 0;
        for(i10 = 0; i10 < list.length; ++i10){
            length += list[i10].length;
        }
    }
    var buffer = Buffer1.allocUnsafe(length);
    var pos = 0;
    for(i10 = 0; i10 < list.length; ++i10){
        var buf = list[i10];
        if (!internalIsBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (internalIsBuffer(string)) {
        return string.length;
    }
    if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength;
    }
    if (typeof string !== "string") {
        string = "" + string;
    }
    var len = string.length;
    if (len === 0) return 0;
    var loweredCase = false;
    for(;;){
        switch(encoding){
            case "ascii":
            case "latin1":
            case "binary":
                return len;
            case "utf8":
            case "utf-8":
            case void 0:
                return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return len * 2;
            case "hex":
                return len >>> 1;
            case "base64":
                return base64ToBytes(string).length;
            default:
                if (loweredCase) return utf8ToBytes(string).length;
                encoding = ("" + encoding).toLowerCase();
                loweredCase = true;
        }
    }
}
Buffer1.byteLength = byteLength;
function slowToString(encoding, start2, end) {
    var loweredCase = false;
    if (start2 === void 0 || start2 < 0) {
        start2 = 0;
    }
    if (start2 > this.length) {
        return "";
    }
    if (end === void 0 || end > this.length) {
        end = this.length;
    }
    if (end <= 0) {
        return "";
    }
    end >>>= 0;
    start2 >>>= 0;
    if (end <= start2) {
        return "";
    }
    if (!encoding) encoding = "utf8";
    while(true){
        switch(encoding){
            case "hex":
                return hexSlice(this, start2, end);
            case "utf8":
            case "utf-8":
                return utf8Slice(this, start2, end);
            case "ascii":
                return asciiSlice(this, start2, end);
            case "latin1":
            case "binary":
                return latin1Slice(this, start2, end);
            case "base64":
                return base64Slice(this, start2, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return utf16leSlice(this, start2, end);
            default:
                if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                encoding = (encoding + "").toLowerCase();
                loweredCase = true;
        }
    }
}
Buffer1.prototype._isBuffer = true;
function swap(b3, n, m4) {
    var i11 = b3[n];
    b3[n] = b3[m4];
    b3[m4] = i11;
}
Buffer1.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for(var i12 = 0; i12 < len; i12 += 2){
        swap(this, i12, i12 + 1);
    }
    return this;
};
Buffer1.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for(var i13 = 0; i13 < len; i13 += 4){
        swap(this, i13, i13 + 3);
        swap(this, i13 + 1, i13 + 2);
    }
    return this;
};
Buffer1.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for(var i14 = 0; i14 < len; i14 += 8){
        swap(this, i14, i14 + 7);
        swap(this, i14 + 1, i14 + 6);
        swap(this, i14 + 2, i14 + 5);
        swap(this, i14 + 3, i14 + 4);
    }
    return this;
};
Buffer1.prototype.toString = function toString2() {
    var length = this.length | 0;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer1.prototype.equals = function equals(b4) {
    if (!internalIsBuffer(b4)) throw new TypeError("Argument must be a Buffer");
    if (this === b4) return true;
    return Buffer1.compare(this, b4) === 0;
};
Buffer1.prototype.inspect = function inspect() {
    var str = "";
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
        if (this.length > max) str += " ... ";
    }
    return "<Buffer " + str + ">";
};
Buffer1.prototype.compare = function compare2(target, start3, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
        throw new TypeError("Argument must be a Buffer");
    }
    if (start3 === void 0) {
        start3 = 0;
    }
    if (end === void 0) {
        end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
        thisStart = 0;
    }
    if (thisEnd === void 0) {
        thisEnd = this.length;
    }
    if (start3 < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start3 >= end) {
        return 0;
    }
    if (thisStart >= thisEnd) {
        return -1;
    }
    if (start3 >= end) {
        return 1;
    }
    start3 >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x3 = thisEnd - thisStart;
    var y2 = end - start3;
    var len = Math.min(x3, y2);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start3, end);
    for(var i15 = 0; i15 < len; ++i15){
        if (thisCopy[i15] !== targetCopy[i15]) {
            x3 = thisCopy[i15];
            y2 = targetCopy[i15];
            break;
        }
    }
    if (x3 < y2) return -1;
    if (y2 < x3) return 1;
    return 0;
};
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    if (buffer.length === 0) return -1;
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (isNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
    }
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    if (typeof val === "string") {
        val = Buffer1.from(val, encoding);
    }
    if (internalIsBuffer(val)) {
        if (val.length === 0) {
            return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 255;
        if (Buffer1.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
                return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read2(buf, i2) {
        if (indexSize === 1) {
            return buf[i2];
        } else {
            return buf.readUInt16BE(i2 * indexSize);
        }
    }
    var i16;
    if (dir) {
        var foundIndex = -1;
        for(i16 = byteOffset; i16 < arrLength; i16++){
            if (read2(arr, i16) === read2(val, foundIndex === -1 ? 0 : i16 - foundIndex)) {
                if (foundIndex === -1) foundIndex = i16;
                if (i16 - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
                if (foundIndex !== -1) i16 -= i16 - foundIndex;
                foundIndex = -1;
            }
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i16 = byteOffset; i16 >= 0; i16--){
            var found = true;
            for(var j3 = 0; j3 < valLength; j3++){
                if (read2(arr, i16 + j3) !== read2(val, j3)) {
                    found = false;
                    break;
                }
            }
            if (found) return i16;
        }
    }
    return -1;
}
Buffer1.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer1.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer1.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
        length = remaining;
    } else {
        length = Number(length);
        if (length > remaining) {
            length = remaining;
        }
    }
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
    if (length > strLen / 2) {
        length = strLen / 2;
    }
    for(var i17 = 0; i17 < length; ++i17){
        var parsed = parseInt(string.substr(i17 * 2, 2), 16);
        if (isNaN(parsed)) return i17;
        buf[offset + i17] = parsed;
    }
    return i17;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer1.prototype.write = function write2(string, offset, length, encoding) {
    if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
            length = length | 0;
            if (encoding === void 0) encoding = "utf8";
        } else {
            encoding = length;
            length = void 0;
        }
    } else {
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    }
    var remaining = this.length - offset;
    if (length === void 0 || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;){
        switch(encoding){
            case "hex":
                return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
                return utf8Write(this, string, offset, length);
            case "ascii":
                return asciiWrite(this, string, offset, length);
            case "latin1":
            case "binary":
                return latin1Write(this, string, offset, length);
            case "base64":
                return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return ucs2Write(this, string, offset, length);
            default:
                if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                encoding = ("" + encoding).toLowerCase();
                loweredCase = true;
        }
    }
};
Buffer1.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start4, end) {
    if (start4 === 0 && end === buf.length) {
        return fromByteArray(buf);
    } else {
        return fromByteArray(buf.slice(start4, end));
    }
}
function utf8Slice(buf, start5, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i18 = start5;
    while(i18 < end){
        var firstByte = buf[i18];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i18 + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) {
                        codePoint = firstByte;
                    }
                    break;
                case 2:
                    secondByte = buf[i18 + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 3:
                    secondByte = buf[i18 + 1];
                    thirdByte = buf[i18 + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 4:
                    secondByte = buf[i18 + 1];
                    thirdByte = buf[i18 + 2];
                    fourthByte = buf[i18 + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                            codePoint = tempCodePoint;
                        }
                    }
            }
        }
        if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i18 += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
var MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
    }
    var res = "";
    var i19 = 0;
    while(i19 < len){
        res += String.fromCharCode.apply(String, codePoints.slice(i19, i19 += MAX_ARGUMENTS_LENGTH));
    }
    return res;
}
function asciiSlice(buf, start6, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i20 = start6; i20 < end; ++i20){
        ret += String.fromCharCode(buf[i20] & 127);
    }
    return ret;
}
function latin1Slice(buf, start7, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i21 = start7; i21 < end; ++i21){
        ret += String.fromCharCode(buf[i21]);
    }
    return ret;
}
function hexSlice(buf, start8, end) {
    var len = buf.length;
    if (!start8 || start8 < 0) start8 = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i22 = start8; i22 < end; ++i22){
        out += toHex(buf[i22]);
    }
    return out;
}
function utf16leSlice(buf, start9, end) {
    var bytes = buf.slice(start9, end);
    var res = "";
    for(var i23 = 0; i23 < bytes.length; i23 += 2){
        res += String.fromCharCode(bytes[i23] + bytes[i23 + 1] * 256);
    }
    return res;
}
Buffer1.prototype.slice = function slice(start10, end) {
    var len = this.length;
    start10 = ~~start10;
    end = end === void 0 ? len : ~~end;
    if (start10 < 0) {
        start10 += len;
        if (start10 < 0) start10 = 0;
    } else if (start10 > len) {
        start10 = len;
    }
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) {
        end = len;
    }
    if (end < start10) end = start10;
    var newBuf;
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start10, end);
        newBuf.__proto__ = Buffer1.prototype;
    } else {
        var sliceLen = end - start10;
        newBuf = new Buffer1(sliceLen, void 0);
        for(var i24 = 0; i24 < sliceLen; ++i24){
            newBuf[i24] = this[i24 + start10];
        }
    }
    return newBuf;
};
function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer1.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
    offset = offset | 0;
    byteLength2 = byteLength2 | 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    var val = this[offset];
    var mul = 1;
    var i25 = 0;
    while(++i25 < byteLength2 && (mul *= 256)){
        val += this[offset + i25] * mul;
    }
    return val;
};
Buffer1.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset | 0;
    byteLength2 = byteLength2 | 0;
    if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
    }
    var val = this[offset + --byteLength2];
    var mul = 1;
    while(byteLength2 > 0 && (mul *= 256)){
        val += this[offset + --byteLength2] * mul;
    }
    return val;
};
Buffer1.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer1.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer1.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer1.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer1.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer1.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
    offset = offset | 0;
    byteLength2 = byteLength2 | 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    var val = this[offset];
    var mul = 1;
    var i26 = 0;
    while(++i26 < byteLength2 && (mul *= 256)){
        val += this[offset + i26] * mul;
    }
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
    return val;
};
Buffer1.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
    offset = offset | 0;
    byteLength2 = byteLength2 | 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    var i27 = byteLength2;
    var mul = 1;
    var val = this[offset + --i27];
    while(i27 > 0 && (mul *= 256)){
        val += this[offset + --i27] * mul;
    }
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
    return val;
};
Buffer1.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
Buffer1.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer1.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer1.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer1.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer1.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4);
};
Buffer1.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4);
};
Buffer1.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8);
};
Buffer1.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer1.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength2 = byteLength2 | 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
    }
    var mul = 1;
    var i28 = 0;
    this[offset] = value & 255;
    while(++i28 < byteLength2 && (mul *= 256)){
        this[offset + i28] = value / mul & 255;
    }
    return offset + byteLength2;
};
Buffer1.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength2 = byteLength2 | 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
    }
    var i29 = byteLength2 - 1;
    var mul = 1;
    this[offset + i29] = value & 255;
    while(--i29 >= 0 && (mul *= 256)){
        this[offset + i29] = value / mul & 255;
    }
    return offset + byteLength2;
};
Buffer1.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
    if (!Buffer1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = value & 255;
    return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 65535 + value + 1;
    for(var i30 = 0, j4 = Math.min(buf.length - offset, 2); i30 < j4; ++i30){
        buf[offset + i30] = (value & 255 << 8 * (littleEndian ? i30 : 1 - i30)) >>> (littleEndian ? i30 : 1 - i30) * 8;
    }
}
Buffer1.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
    } else {
        objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2;
};
Buffer1.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
    } else {
        objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 4294967295 + value + 1;
    for(var i31 = 0, j5 = Math.min(buf.length - offset, 4); i31 < j5; ++i31){
        buf[offset + i31] = value >>> (littleEndian ? i31 : 3 - i31) * 8 & 255;
    }
}
Buffer1.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
    } else {
        objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4;
};
Buffer1.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
    } else {
        objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4;
};
Buffer1.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
    }
    var i32 = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while(++i32 < byteLength2 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i32 - 1] !== 0) {
            sub = 1;
        }
        this[offset + i32] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength2;
};
Buffer1.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
    }
    var i33 = byteLength2 - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i33] = value & 255;
    while(--i33 >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i33 + 1] !== 0) {
            sub = 1;
        }
        this[offset + i33] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength2;
};
Buffer1.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
    if (!Buffer1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
Buffer1.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
    } else {
        objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2;
};
Buffer1.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
    } else {
        objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2;
};
Buffer1.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
    } else {
        objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4;
};
Buffer1.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    if (Buffer1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
    } else {
        objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer1.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer1.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer1.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer1.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
Buffer1.prototype.copy = function copy(target, targetStart, start11, end) {
    if (!start11) start11 = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start11) end = start11;
    if (end === start11) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
    }
    if (start11 < 0 || start11 >= this.length) throw new RangeError("sourceStart out of bounds");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start11) {
        end = target.length - targetStart + start11;
    }
    var len = end - start11;
    var i34;
    if (this === target && start11 < targetStart && targetStart < end) {
        for(i34 = len - 1; i34 >= 0; --i34){
            target[i34 + targetStart] = this[i34 + start11];
        }
    } else if (len < 1000 || !Buffer1.TYPED_ARRAY_SUPPORT) {
        for(i34 = 0; i34 < len; ++i34){
            target[i34 + targetStart] = this[i34 + start11];
        }
    } else {
        Uint8Array.prototype.set.call(target, this.subarray(start11, start11 + len), targetStart);
    }
    return len;
};
Buffer1.prototype.fill = function fill(val, start12, end, encoding) {
    if (typeof val === "string") {
        if (typeof start12 === "string") {
            encoding = start12;
            start12 = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (code < 256) {
                val = code;
            }
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer1.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
        }
    } else if (typeof val === "number") {
        val = val & 255;
    }
    if (start12 < 0 || this.length < start12 || this.length < end) {
        throw new RangeError("Out of range index");
    }
    if (end <= start12) {
        return this;
    }
    start12 = start12 >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val) val = 0;
    var i35;
    if (typeof val === "number") {
        for(i35 = start12; i35 < end; ++i35){
            this[i35] = val;
        }
    } else {
        var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer1(val, encoding).toString());
        var len = bytes.length;
        for(i35 = 0; i35 < end - start12; ++i35){
            this[i35 + start12] = bytes[i35 % len];
        }
    }
    return this;
};
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
    str = stringtrim(str).replace(INVALID_BASE64_RE, "");
    if (str.length < 2) return "";
    while(str.length % 4 !== 0){
        str = str + "=";
    }
    return str;
}
function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
    if (n < 16) return "0" + n.toString(16);
    return n.toString(16);
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i36 = 0; i36 < length; ++i36){
        codePoint = string.charCodeAt(i36);
        if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
                if (codePoint > 56319) {
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i36 + 1 === length) {
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                leadSurrogate = codePoint;
                continue;
            }
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else {
            throw new Error("Invalid code point");
        }
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i37 = 0; i37 < str.length; ++i37){
        byteArray.push(str.charCodeAt(i37) & 255);
    }
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c2, hi, lo;
    var byteArray = [];
    for(var i38 = 0; i38 < str.length; ++i38){
        if ((units -= 2) < 0) break;
        c2 = str.charCodeAt(i38);
        hi = c2 >> 8;
        lo = c2 % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i39 = 0; i39 < length; ++i39){
        if (i39 + offset >= dst.length || i39 >= src.length) break;
        dst[i39 + offset] = src[i39];
    }
    return i39;
}
function isnan(val) {
    return val !== val;
}
function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
}
function getDefaultExportFromCjs(x4) {
    return x4 && x4.__esModule && Object.prototype.hasOwnProperty.call(x4, "default") ? x4["default"] : x4;
}
function createCommonjsModule(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path6, base) {
            return commonjsRequire(path6, base === void 0 || base === null ? module.path : base);
        }
    }, fn(module, module.exports), module.exports;
}
function commonjsRequire() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var browser = createCommonjsModule(function(module, exports) {
    ((exports2)=>{
        var __defProp = Object.defineProperty;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __getOwnPropSymbols = Object.getOwnPropertySymbols;
        var __propIsEnum = Object.prototype.propertyIsEnumerable;
        var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
                enumerable: true,
                configurable: true,
                writable: true,
                value
            }) : obj[key] = value
        ;
        var __objSpread = (a2, b5)=>{
            for(var prop in b5 || (b5 = {}))if (__hasOwnProp.call(b5, prop)) __defNormalProp(a2, prop, b5[prop]);
            if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b5)){
                if (__propIsEnum.call(b5, prop)) __defNormalProp(a2, prop, b5[prop]);
            }
            return a2;
        };
        var __markAsModule = (target)=>__defProp(target, "__esModule", {
                value: true
            })
        ;
        var __export = (target, all)=>{
            for(var name in all)__defProp(target, name, {
                get: all[name],
                enumerable: true
            });
        };
        var __async = (__this, __arguments, generator)=>{
            return new Promise((resolve9, reject)=>{
                var fulfilled = (value)=>{
                    try {
                        step(generator.next(value));
                    } catch (e) {
                        reject(e);
                    }
                };
                var rejected = (value)=>{
                    try {
                        step(generator.throw(value));
                    } catch (e) {
                        reject(e);
                    }
                };
                var step = (x5)=>x5.done ? resolve9(x5.value) : Promise.resolve(x5.value).then(fulfilled, rejected)
                ;
                step((generator = generator.apply(__this, __arguments)).next());
            });
        };
        __markAsModule(exports2);
        __export(exports2, {
            build: ()=>build2
            ,
            buildSync: ()=>buildSync2
            ,
            formatMessages: ()=>formatMessages2
            ,
            formatMessagesSync: ()=>formatMessagesSync2
            ,
            initialize: ()=>initialize2
            ,
            serve: ()=>serve2
            ,
            transform: ()=>transform2
            ,
            transformSync: ()=>transformSync2
            ,
            version: ()=>version2
        });
        function encodePacket1(packet) {
            let visit = (value)=>{
                if (value === null) {
                    bb.write8(0);
                } else if (typeof value === "boolean") {
                    bb.write8(1);
                    bb.write8(+value);
                } else if (typeof value === "number") {
                    bb.write8(2);
                    bb.write32(value | 0);
                } else if (typeof value === "string") {
                    bb.write8(3);
                    bb.write(encodeUTF81(value));
                } else if (value instanceof Uint8Array) {
                    bb.write8(4);
                    bb.write(value);
                } else if (value instanceof Array) {
                    bb.write8(5);
                    bb.write32(value.length);
                    for (let item of value){
                        visit(item);
                    }
                } else {
                    let keys = Object.keys(value);
                    bb.write8(6);
                    bb.write32(keys.length);
                    for (let key of keys){
                        bb.write(encodeUTF81(key));
                        visit(value[key]);
                    }
                }
            };
            let bb = new ByteBuffer1();
            bb.write32(0);
            bb.write32(packet.id << 1 | +!packet.isRequest);
            visit(packet.value);
            writeUInt32LE2(bb.buf, bb.len - 4, 0);
            return bb.buf.subarray(0, bb.len);
        }
        function decodePacket1(bytes) {
            let visit = ()=>{
                switch(bb.read8()){
                    case 0:
                        return null;
                    case 1:
                        return !!bb.read8();
                    case 2:
                        return bb.read32();
                    case 3:
                        return decodeUTF81(bb.read());
                    case 4:
                        return bb.read();
                    case 5:
                        {
                            let count = bb.read32();
                            let value2 = [];
                            for(let i40 = 0; i40 < count; i40++){
                                value2.push(visit());
                            }
                            return value2;
                        }
                    case 6:
                        {
                            let count = bb.read32();
                            let value2 = {};
                            for(let i41 = 0; i41 < count; i41++){
                                value2[decodeUTF81(bb.read())] = visit();
                            }
                            return value2;
                        }
                    default:
                        throw new Error("Invalid packet");
                }
            };
            let bb = new ByteBuffer1(bytes);
            let id = bb.read32();
            let isRequest = (id & 1) === 0;
            id >>>= 1;
            let value = visit();
            if (bb.ptr !== bytes.length) {
                throw new Error("Invalid packet");
            }
            return {
                id,
                isRequest,
                value
            };
        }
        var ByteBuffer1 = class {
            constructor(buf = new Uint8Array(1024)){
                this.buf = buf;
                this.len = 0;
                this.ptr = 0;
            }
            _write(delta) {
                if (this.len + delta > this.buf.length) {
                    let clone = new Uint8Array((this.len + delta) * 2);
                    clone.set(this.buf);
                    this.buf = clone;
                }
                this.len += delta;
                return this.len - delta;
            }
            write8(value) {
                let offset = this._write(1);
                this.buf[offset] = value;
            }
            write32(value) {
                let offset = this._write(4);
                writeUInt32LE2(this.buf, value, offset);
            }
            write(bytes) {
                let offset = this._write(4 + bytes.length);
                writeUInt32LE2(this.buf, bytes.length, offset);
                this.buf.set(bytes, offset + 4);
            }
            _read(delta) {
                if (this.ptr + delta > this.buf.length) {
                    throw new Error("Invalid packet");
                }
                this.ptr += delta;
                return this.ptr - delta;
            }
            read8() {
                return this.buf[this._read(1)];
            }
            read32() {
                return readUInt32LE2(this.buf, this._read(4));
            }
            read() {
                let length = this.read32();
                let bytes = new Uint8Array(length);
                let ptr = this._read(bytes.length);
                bytes.set(this.buf.subarray(ptr, ptr + length));
                return bytes;
            }
        };
        var encodeUTF81;
        var decodeUTF81;
        if (typeof TextEncoder !== "undefined" && typeof TextDecoder !== "undefined") {
            let encoder = new TextEncoder();
            let decoder = new TextDecoder();
            encodeUTF81 = (text)=>encoder.encode(text)
            ;
            decodeUTF81 = (bytes)=>decoder.decode(bytes)
            ;
        } else if (typeof Buffer1 !== "undefined") {
            encodeUTF81 = (text)=>{
                let buffer = Buffer1.from(text);
                if (!(buffer instanceof Uint8Array)) {
                    buffer = new Uint8Array(buffer);
                }
                return buffer;
            };
            decodeUTF81 = (bytes)=>{
                let { buffer , byteOffset , byteLength: byteLength2  } = bytes;
                return Buffer1.from(buffer, byteOffset, byteLength2).toString();
            };
        } else {
            throw new Error("No UTF-8 codec found");
        }
        function readUInt32LE2(buffer, offset) {
            return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;
        }
        function writeUInt32LE2(buffer, value, offset) {
            buffer[offset++] = value;
            buffer[offset++] = value >> 8;
            buffer[offset++] = value >> 16;
            buffer[offset++] = value >> 24;
        }
        function validateTarget1(target) {
            target += "";
            if (target.indexOf(",") >= 0) throw new Error(`Invalid target: ${target}`);
            return target;
        }
        var canBeAnything1 = ()=>null
        ;
        var mustBeBoolean1 = (value)=>typeof value === "boolean" ? null : "a boolean"
        ;
        var mustBeBooleanOrObject1 = (value)=>typeof value === "boolean" || typeof value === "object" && !Array.isArray(value) ? null : "a boolean or an object"
        ;
        var mustBeString1 = (value)=>typeof value === "string" ? null : "a string"
        ;
        var mustBeRegExp1 = (value)=>value instanceof RegExp ? null : "a RegExp object"
        ;
        var mustBeInteger1 = (value)=>typeof value === "number" && value === (value | 0) ? null : "an integer"
        ;
        var mustBeFunction1 = (value)=>typeof value === "function" ? null : "a function"
        ;
        var mustBeArray1 = (value)=>Array.isArray(value) ? null : "an array"
        ;
        var mustBeObject1 = (value)=>typeof value === "object" && value !== null && !Array.isArray(value) ? null : "an object"
        ;
        var mustBeArrayOrRecord1 = (value)=>typeof value === "object" && value !== null ? null : "an array or an object"
        ;
        var mustBeObjectOrNull1 = (value)=>typeof value === "object" && !Array.isArray(value) ? null : "an object or null"
        ;
        var mustBeStringOrBoolean1 = (value)=>typeof value === "string" || typeof value === "boolean" ? null : "a string or a boolean"
        ;
        var mustBeStringOrObject1 = (value)=>typeof value === "string" || typeof value === "object" && value !== null && !Array.isArray(value) ? null : "a string or an object"
        ;
        var mustBeStringOrArray1 = (value)=>typeof value === "string" || Array.isArray(value) ? null : "a string or an array"
        ;
        var mustBeStringOrUint8Array1 = (value)=>typeof value === "string" || value instanceof Uint8Array ? null : "a string or a Uint8Array"
        ;
        function getFlag1(object, keys, key, mustBeFn) {
            let value = object[key];
            keys[key + ""] = true;
            if (value === void 0) return void 0;
            let mustBe = mustBeFn(value);
            if (mustBe !== null) throw new Error(`"${key}" must be ${mustBe}`);
            return value;
        }
        function checkForInvalidFlags1(object, keys, where) {
            for(let key in object){
                if (!(key in keys)) {
                    throw new Error(`Invalid option ${where}: "${key}"`);
                }
            }
        }
        function validateInitializeOptions1(options) {
            let keys = Object.create(null);
            let wasmURL = getFlag1(options, keys, "wasmURL", mustBeString1);
            let worker = getFlag1(options, keys, "worker", mustBeBoolean1);
            checkForInvalidFlags1(options, keys, "in startService() call");
            return {
                wasmURL,
                worker
            };
        }
        function pushLogFlags1(flags, options, keys, isTTY, logLevelDefault) {
            let color = getFlag1(options, keys, "color", mustBeBoolean1);
            let logLevel = getFlag1(options, keys, "logLevel", mustBeString1);
            let logLimit = getFlag1(options, keys, "logLimit", mustBeInteger1);
            if (color) flags.push(`--color=${color}`);
            else if (isTTY) flags.push(`--color=true`);
            flags.push(`--log-level=${logLevel || logLevelDefault}`);
            flags.push(`--log-limit=${logLimit || 0}`);
        }
        function pushCommonFlags1(flags, options, keys) {
            let legalComments = getFlag1(options, keys, "legalComments", mustBeString1);
            let sourceRoot = getFlag1(options, keys, "sourceRoot", mustBeString1);
            let sourcesContent = getFlag1(options, keys, "sourcesContent", mustBeBoolean1);
            let target = getFlag1(options, keys, "target", mustBeStringOrArray1);
            let format9 = getFlag1(options, keys, "format", mustBeString1);
            let globalName = getFlag1(options, keys, "globalName", mustBeString1);
            let minify = getFlag1(options, keys, "minify", mustBeBoolean1);
            let minifySyntax = getFlag1(options, keys, "minifySyntax", mustBeBoolean1);
            let minifyWhitespace = getFlag1(options, keys, "minifyWhitespace", mustBeBoolean1);
            let minifyIdentifiers = getFlag1(options, keys, "minifyIdentifiers", mustBeBoolean1);
            let charset = getFlag1(options, keys, "charset", mustBeString1);
            let treeShaking = getFlag1(options, keys, "treeShaking", mustBeStringOrBoolean1);
            let jsxFactory = getFlag1(options, keys, "jsxFactory", mustBeString1);
            let jsxFragment = getFlag1(options, keys, "jsxFragment", mustBeString1);
            let define = getFlag1(options, keys, "define", mustBeObject1);
            let pure = getFlag1(options, keys, "pure", mustBeArray1);
            let keepNames = getFlag1(options, keys, "keepNames", mustBeBoolean1);
            if (legalComments) flags.push(`--legal-comments=${legalComments}`);
            if (sourceRoot !== void 0) flags.push(`--source-root=${sourceRoot}`);
            if (sourcesContent !== void 0) flags.push(`--sources-content=${sourcesContent}`);
            if (target) {
                if (Array.isArray(target)) flags.push(`--target=${Array.from(target).map(validateTarget1).join(",")}`);
                else flags.push(`--target=${validateTarget1(target)}`);
            }
            if (format9) flags.push(`--format=${format9}`);
            if (globalName) flags.push(`--global-name=${globalName}`);
            if (minify) flags.push("--minify");
            if (minifySyntax) flags.push("--minify-syntax");
            if (minifyWhitespace) flags.push("--minify-whitespace");
            if (minifyIdentifiers) flags.push("--minify-identifiers");
            if (charset) flags.push(`--charset=${charset}`);
            if (treeShaking !== void 0 && treeShaking !== true) flags.push(`--tree-shaking=${treeShaking}`);
            if (jsxFactory) flags.push(`--jsx-factory=${jsxFactory}`);
            if (jsxFragment) flags.push(`--jsx-fragment=${jsxFragment}`);
            if (define) {
                for(let key in define){
                    if (key.indexOf("=") >= 0) throw new Error(`Invalid define: ${key}`);
                    flags.push(`--define:${key}=${define[key]}`);
                }
            }
            if (pure) for (let fn of pure)flags.push(`--pure:${fn}`);
            if (keepNames) flags.push(`--keep-names`);
        }
        function flagsForBuildOptions1(callName, options, isTTY, logLevelDefault, writeDefault) {
            var _a;
            let flags = [];
            let entries = [];
            let keys = Object.create(null);
            let stdinContents = null;
            let stdinResolveDir = null;
            let watchMode = null;
            pushLogFlags1(flags, options, keys, isTTY, logLevelDefault);
            pushCommonFlags1(flags, options, keys);
            let sourcemap = getFlag1(options, keys, "sourcemap", mustBeStringOrBoolean1);
            let bundle = getFlag1(options, keys, "bundle", mustBeBoolean1);
            let watch = getFlag1(options, keys, "watch", mustBeBooleanOrObject1);
            let splitting = getFlag1(options, keys, "splitting", mustBeBoolean1);
            let preserveSymlinks = getFlag1(options, keys, "preserveSymlinks", mustBeBoolean1);
            let metafile = getFlag1(options, keys, "metafile", mustBeBoolean1);
            let outfile = getFlag1(options, keys, "outfile", mustBeString1);
            let outdir = getFlag1(options, keys, "outdir", mustBeString1);
            let outbase = getFlag1(options, keys, "outbase", mustBeString1);
            let platform = getFlag1(options, keys, "platform", mustBeString1);
            let tsconfig = getFlag1(options, keys, "tsconfig", mustBeString1);
            let resolveExtensions = getFlag1(options, keys, "resolveExtensions", mustBeArray1);
            let nodePathsInput = getFlag1(options, keys, "nodePaths", mustBeArray1);
            let mainFields = getFlag1(options, keys, "mainFields", mustBeArray1);
            let conditions = getFlag1(options, keys, "conditions", mustBeArray1);
            let external = getFlag1(options, keys, "external", mustBeArray1);
            let loader = getFlag1(options, keys, "loader", mustBeObject1);
            let outExtension = getFlag1(options, keys, "outExtension", mustBeObject1);
            let publicPath = getFlag1(options, keys, "publicPath", mustBeString1);
            let entryNames = getFlag1(options, keys, "entryNames", mustBeString1);
            let chunkNames = getFlag1(options, keys, "chunkNames", mustBeString1);
            let assetNames = getFlag1(options, keys, "assetNames", mustBeString1);
            let inject = getFlag1(options, keys, "inject", mustBeArray1);
            let banner = getFlag1(options, keys, "banner", mustBeObject1);
            let footer = getFlag1(options, keys, "footer", mustBeObject1);
            let entryPoints = getFlag1(options, keys, "entryPoints", mustBeArrayOrRecord1);
            let absWorkingDir = getFlag1(options, keys, "absWorkingDir", mustBeString1);
            let stdin = getFlag1(options, keys, "stdin", mustBeObject1);
            let write3 = (_a = getFlag1(options, keys, "write", mustBeBoolean1)) != null ? _a : writeDefault;
            let allowOverwrite = getFlag1(options, keys, "allowOverwrite", mustBeBoolean1);
            let incremental = getFlag1(options, keys, "incremental", mustBeBoolean1) === true;
            keys.plugins = true;
            checkForInvalidFlags1(options, keys, `in ${callName}() call`);
            if (sourcemap) flags.push(`--sourcemap${sourcemap === true ? "" : `=${sourcemap}`}`);
            if (bundle) flags.push("--bundle");
            if (allowOverwrite) flags.push("--allow-overwrite");
            if (watch) {
                flags.push("--watch");
                if (typeof watch === "boolean") {
                    watchMode = {};
                } else {
                    let watchKeys = Object.create(null);
                    let onRebuild = getFlag1(watch, watchKeys, "onRebuild", mustBeFunction1);
                    checkForInvalidFlags1(watch, watchKeys, `on "watch" in ${callName}() call`);
                    watchMode = {
                        onRebuild
                    };
                }
            }
            if (splitting) flags.push("--splitting");
            if (preserveSymlinks) flags.push("--preserve-symlinks");
            if (metafile) flags.push(`--metafile`);
            if (outfile) flags.push(`--outfile=${outfile}`);
            if (outdir) flags.push(`--outdir=${outdir}`);
            if (outbase) flags.push(`--outbase=${outbase}`);
            if (platform) flags.push(`--platform=${platform}`);
            if (tsconfig) flags.push(`--tsconfig=${tsconfig}`);
            if (resolveExtensions) {
                let values = [];
                for (let value of resolveExtensions){
                    value += "";
                    if (value.indexOf(",") >= 0) throw new Error(`Invalid resolve extension: ${value}`);
                    values.push(value);
                }
                flags.push(`--resolve-extensions=${values.join(",")}`);
            }
            if (publicPath) flags.push(`--public-path=${publicPath}`);
            if (entryNames) flags.push(`--entry-names=${entryNames}`);
            if (chunkNames) flags.push(`--chunk-names=${chunkNames}`);
            if (assetNames) flags.push(`--asset-names=${assetNames}`);
            if (mainFields) {
                let values = [];
                for (let value of mainFields){
                    value += "";
                    if (value.indexOf(",") >= 0) throw new Error(`Invalid main field: ${value}`);
                    values.push(value);
                }
                flags.push(`--main-fields=${values.join(",")}`);
            }
            if (conditions) {
                let values = [];
                for (let value of conditions){
                    value += "";
                    if (value.indexOf(",") >= 0) throw new Error(`Invalid condition: ${value}`);
                    values.push(value);
                }
                flags.push(`--conditions=${values.join(",")}`);
            }
            if (external) for (let name of external)flags.push(`--external:${name}`);
            if (banner) {
                for(let type in banner){
                    if (type.indexOf("=") >= 0) throw new Error(`Invalid banner file type: ${type}`);
                    flags.push(`--banner:${type}=${banner[type]}`);
                }
            }
            if (footer) {
                for(let type in footer){
                    if (type.indexOf("=") >= 0) throw new Error(`Invalid footer file type: ${type}`);
                    flags.push(`--footer:${type}=${footer[type]}`);
                }
            }
            if (inject) for (let path7 of inject)flags.push(`--inject:${path7}`);
            if (loader) {
                for(let ext in loader){
                    if (ext.indexOf("=") >= 0) throw new Error(`Invalid loader extension: ${ext}`);
                    flags.push(`--loader:${ext}=${loader[ext]}`);
                }
            }
            if (outExtension) {
                for(let ext in outExtension){
                    if (ext.indexOf("=") >= 0) throw new Error(`Invalid out extension: ${ext}`);
                    flags.push(`--out-extension:${ext}=${outExtension[ext]}`);
                }
            }
            if (entryPoints) {
                if (Array.isArray(entryPoints)) {
                    for (let entryPoint of entryPoints){
                        entries.push([
                            "",
                            entryPoint + ""
                        ]);
                    }
                } else {
                    for (let [key, value] of Object.entries(entryPoints)){
                        entries.push([
                            key + "",
                            value + ""
                        ]);
                    }
                }
            }
            if (stdin) {
                let stdinKeys = Object.create(null);
                let contents = getFlag1(stdin, stdinKeys, "contents", mustBeString1);
                let resolveDir = getFlag1(stdin, stdinKeys, "resolveDir", mustBeString1);
                let sourcefile = getFlag1(stdin, stdinKeys, "sourcefile", mustBeString1);
                let loader2 = getFlag1(stdin, stdinKeys, "loader", mustBeString1);
                checkForInvalidFlags1(stdin, stdinKeys, 'in "stdin" object');
                if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
                if (loader2) flags.push(`--loader=${loader2}`);
                if (resolveDir) stdinResolveDir = resolveDir + "";
                stdinContents = contents ? contents + "" : "";
            }
            let nodePaths = [];
            if (nodePathsInput) {
                for (let value of nodePathsInput){
                    value += "";
                    nodePaths.push(value);
                }
            }
            return {
                entries,
                flags,
                write: write3,
                stdinContents,
                stdinResolveDir,
                absWorkingDir,
                incremental,
                nodePaths,
                watch: watchMode
            };
        }
        function flagsForTransformOptions1(callName, options, isTTY, logLevelDefault) {
            let flags = [];
            let keys = Object.create(null);
            pushLogFlags1(flags, options, keys, isTTY, logLevelDefault);
            pushCommonFlags1(flags, options, keys);
            let sourcemap = getFlag1(options, keys, "sourcemap", mustBeStringOrBoolean1);
            let tsconfigRaw = getFlag1(options, keys, "tsconfigRaw", mustBeStringOrObject1);
            let sourcefile = getFlag1(options, keys, "sourcefile", mustBeString1);
            let loader = getFlag1(options, keys, "loader", mustBeString1);
            let banner = getFlag1(options, keys, "banner", mustBeString1);
            let footer = getFlag1(options, keys, "footer", mustBeString1);
            checkForInvalidFlags1(options, keys, `in ${callName}() call`);
            if (sourcemap) flags.push(`--sourcemap=${sourcemap === true ? "external" : sourcemap}`);
            if (tsconfigRaw) flags.push(`--tsconfig-raw=${typeof tsconfigRaw === "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`);
            if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
            if (loader) flags.push(`--loader=${loader}`);
            if (banner) flags.push(`--banner=${banner}`);
            if (footer) flags.push(`--footer=${footer}`);
            return flags;
        }
        function createChannel1(streamIn) {
            let responseCallbacks = new Map();
            let pluginCallbacks = new Map();
            let watchCallbacks = new Map();
            let serveCallbacks = new Map();
            let nextServeID = 0;
            let isClosed = false;
            let nextRequestID = 0;
            let nextBuildKey = 0;
            let stdout = new Uint8Array(16 * 1024);
            let stdoutUsed = 0;
            let readFromStdout = (chunk)=>{
                let limit = stdoutUsed + chunk.length;
                if (limit > stdout.length) {
                    let swap2 = new Uint8Array(limit * 2);
                    swap2.set(stdout);
                    stdout = swap2;
                }
                stdout.set(chunk, stdoutUsed);
                stdoutUsed += chunk.length;
                let offset = 0;
                while(offset + 4 <= stdoutUsed){
                    let length = readUInt32LE2(stdout, offset);
                    if (offset + 4 + length > stdoutUsed) {
                        break;
                    }
                    offset += 4;
                    handleIncomingPacket(stdout.subarray(offset, offset + length));
                    offset += length;
                }
                if (offset > 0) {
                    stdout.copyWithin(0, offset, stdoutUsed);
                    stdoutUsed -= offset;
                }
            };
            let afterClose = ()=>{
                isClosed = true;
                for (let callback of responseCallbacks.values()){
                    callback("The service was stopped", null);
                }
                responseCallbacks.clear();
                for (let callbacks of serveCallbacks.values()){
                    callbacks.onWait("The service was stopped");
                }
                serveCallbacks.clear();
                for (let callback1 of watchCallbacks.values()){
                    try {
                        callback1(new Error("The service was stopped"), null);
                    } catch (e) {
                        console.error(e);
                    }
                }
                watchCallbacks.clear();
            };
            let sendRequest = (refs, value, callback)=>{
                if (isClosed) return callback("The service is no longer running", null);
                let id = nextRequestID++;
                responseCallbacks.set(id, (error, response)=>{
                    try {
                        callback(error, response);
                    } finally{
                        if (refs) refs.unref();
                    }
                });
                if (refs) refs.ref();
                streamIn.writeToStdin(encodePacket1({
                    id,
                    isRequest: true,
                    value
                }));
            };
            let sendResponse = (id, value)=>{
                if (isClosed) throw new Error("The service is no longer running");
                streamIn.writeToStdin(encodePacket1({
                    id,
                    isRequest: false,
                    value
                }));
            };
            let handleRequest = (id, request)=>__async(this, null, function*() {
                    try {
                        switch(request.command){
                            case "ping":
                                {
                                    sendResponse(id, {});
                                    break;
                                }
                            case "start":
                                {
                                    let callback = pluginCallbacks.get(request.key);
                                    if (!callback) sendResponse(id, {});
                                    else sendResponse(id, (yield callback(request)));
                                    break;
                                }
                            case "resolve":
                                {
                                    let callback = pluginCallbacks.get(request.key);
                                    if (!callback) sendResponse(id, {});
                                    else sendResponse(id, (yield callback(request)));
                                    break;
                                }
                            case "load":
                                {
                                    let callback = pluginCallbacks.get(request.key);
                                    if (!callback) sendResponse(id, {});
                                    else sendResponse(id, (yield callback(request)));
                                    break;
                                }
                            case "serve-request":
                                {
                                    let callbacks = serveCallbacks.get(request.serveID);
                                    if (callbacks && callbacks.onRequest) callbacks.onRequest(request.args);
                                    sendResponse(id, {});
                                    break;
                                }
                            case "serve-wait":
                                {
                                    let callbacks = serveCallbacks.get(request.serveID);
                                    if (callbacks) callbacks.onWait(request.error);
                                    sendResponse(id, {});
                                    break;
                                }
                            case "watch-rebuild":
                                {
                                    let callback = watchCallbacks.get(request.watchID);
                                    try {
                                        if (callback) callback(null, request.args);
                                    } catch (err) {
                                        console.error(err);
                                    }
                                    sendResponse(id, {});
                                    break;
                                }
                            default:
                                throw new Error(`Invalid command: ` + request.command);
                        }
                    } catch (e) {
                        sendResponse(id, {
                            errors: [
                                extractErrorMessageV81(e, streamIn, null, void 0, "")
                            ]
                        });
                    }
                })
            ;
            let isFirstPacket = true;
            let handleIncomingPacket = (bytes)=>{
                if (isFirstPacket) {
                    isFirstPacket = false;
                    let binaryVersion = String.fromCharCode(...bytes);
                    if (binaryVersion !== "0.11.19") {
                        throw new Error(`Cannot start service: Host version "0.11.19" does not match binary version ${JSON.stringify(binaryVersion)}`);
                    }
                    return;
                }
                let packet = decodePacket1(bytes);
                if (packet.isRequest) {
                    handleRequest(packet.id, packet.value);
                } else {
                    let callback = responseCallbacks.get(packet.id);
                    responseCallbacks.delete(packet.id);
                    if (packet.value.error) callback(packet.value.error, {});
                    else callback(null, packet.value);
                }
            };
            let handlePlugins = (initialOptions, plugins, buildKey, stash)=>__async(this, null, function*() {
                    let onStartCallbacks = [];
                    let onEndCallbacks = [];
                    let onResolveCallbacks = {};
                    let onLoadCallbacks = {};
                    let nextCallbackID = 0;
                    let i42 = 0;
                    let requestPlugins = [];
                    plugins = [
                        ...plugins
                    ];
                    for (let item of plugins){
                        let keys = {};
                        if (typeof item !== "object") throw new Error(`Plugin at index ${i42} must be an object`);
                        let name = getFlag1(item, keys, "name", mustBeString1);
                        if (typeof name !== "string" || name === "") throw new Error(`Plugin at index ${i42} is missing a name`);
                        try {
                            let setup = getFlag1(item, keys, "setup", mustBeFunction1);
                            if (typeof setup !== "function") throw new Error(`Plugin is missing a setup function`);
                            checkForInvalidFlags1(item, keys, `on plugin ${JSON.stringify(name)}`);
                            let plugin = {
                                name,
                                onResolve: [],
                                onLoad: []
                            };
                            i42++;
                            let promise = setup({
                                initialOptions,
                                onStart (callback2) {
                                    let registeredText = `This error came from the "onStart" callback registered here`;
                                    let registeredNote = extractCallerV81(new Error(registeredText), streamIn, "onStart");
                                    onStartCallbacks.push({
                                        name,
                                        callback: callback2,
                                        note: registeredNote
                                    });
                                },
                                onEnd (callback2) {
                                    let registeredText = `This error came from the "onEnd" callback registered here`;
                                    let registeredNote = extractCallerV81(new Error(registeredText), streamIn, "onEnd");
                                    onEndCallbacks.push({
                                        name,
                                        callback: callback2,
                                        note: registeredNote
                                    });
                                },
                                onResolve (options, callback2) {
                                    let registeredText = `This error came from the "onResolve" callback registered here`;
                                    let registeredNote = extractCallerV81(new Error(registeredText), streamIn, "onResolve");
                                    let keys2 = {};
                                    let filter = getFlag1(options, keys2, "filter", mustBeRegExp1);
                                    let namespace = getFlag1(options, keys2, "namespace", mustBeString1);
                                    checkForInvalidFlags1(options, keys2, `in onResolve() call for plugin ${JSON.stringify(name)}`);
                                    if (filter == null) throw new Error(`onResolve() call is missing a filter`);
                                    let id = nextCallbackID++;
                                    onResolveCallbacks[id] = {
                                        name,
                                        callback: callback2,
                                        note: registeredNote
                                    };
                                    plugin.onResolve.push({
                                        id,
                                        filter: filter.source,
                                        namespace: namespace || ""
                                    });
                                },
                                onLoad (options, callback2) {
                                    let registeredText = `This error came from the "onLoad" callback registered here`;
                                    let registeredNote = extractCallerV81(new Error(registeredText), streamIn, "onLoad");
                                    let keys2 = {};
                                    let filter = getFlag1(options, keys2, "filter", mustBeRegExp1);
                                    let namespace = getFlag1(options, keys2, "namespace", mustBeString1);
                                    checkForInvalidFlags1(options, keys2, `in onLoad() call for plugin ${JSON.stringify(name)}`);
                                    if (filter == null) throw new Error(`onLoad() call is missing a filter`);
                                    let id = nextCallbackID++;
                                    onLoadCallbacks[id] = {
                                        name,
                                        callback: callback2,
                                        note: registeredNote
                                    };
                                    plugin.onLoad.push({
                                        id,
                                        filter: filter.source,
                                        namespace: namespace || ""
                                    });
                                }
                            });
                            if (promise) yield promise;
                            requestPlugins.push(plugin);
                        } catch (e) {
                            return {
                                ok: false,
                                error: e,
                                pluginName: name
                            };
                        }
                    }
                    const callback = (request)=>__async(this, null, function*() {
                            switch(request.command){
                                case "start":
                                    {
                                        let response = {
                                            errors: [],
                                            warnings: []
                                        };
                                        yield Promise.all(onStartCallbacks.map((_0)=>__async(this, [
                                                _0
                                            ], function*({ name , callback: callback2 , note  }) {
                                                try {
                                                    let result = yield callback2();
                                                    if (result != null) {
                                                        if (typeof result !== "object") throw new Error(`Expected onStart() callback in plugin ${JSON.stringify(name)} to return an object`);
                                                        let keys = {};
                                                        let errors = getFlag1(result, keys, "errors", mustBeArray1);
                                                        let warnings = getFlag1(result, keys, "warnings", mustBeArray1);
                                                        checkForInvalidFlags1(result, keys, `from onStart() callback in plugin ${JSON.stringify(name)}`);
                                                        if (errors != null) response.errors.push(...sanitizeMessages1(errors, "errors", stash, name));
                                                        if (warnings != null) response.warnings.push(...sanitizeMessages1(warnings, "warnings", stash, name));
                                                    }
                                                } catch (e) {
                                                    response.errors.push(extractErrorMessageV81(e, streamIn, stash, note && note(), name));
                                                }
                                            })
                                        ));
                                        return response;
                                    }
                                case "resolve":
                                    {
                                        let response = {}, name = "", callback2, note;
                                        for (let id of request.ids){
                                            try {
                                                ({ name , callback: callback2 , note  } = onResolveCallbacks[id]);
                                                let result = yield callback2({
                                                    path: request.path,
                                                    importer: request.importer,
                                                    namespace: request.namespace,
                                                    resolveDir: request.resolveDir,
                                                    kind: request.kind,
                                                    pluginData: stash.load(request.pluginData)
                                                });
                                                if (result != null) {
                                                    if (typeof result !== "object") throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(name)} to return an object`);
                                                    let keys = {};
                                                    let pluginName = getFlag1(result, keys, "pluginName", mustBeString1);
                                                    let path8 = getFlag1(result, keys, "path", mustBeString1);
                                                    let namespace = getFlag1(result, keys, "namespace", mustBeString1);
                                                    let external = getFlag1(result, keys, "external", mustBeBoolean1);
                                                    let pluginData = getFlag1(result, keys, "pluginData", canBeAnything1);
                                                    let errors = getFlag1(result, keys, "errors", mustBeArray1);
                                                    let warnings = getFlag1(result, keys, "warnings", mustBeArray1);
                                                    let watchFiles = getFlag1(result, keys, "watchFiles", mustBeArray1);
                                                    let watchDirs = getFlag1(result, keys, "watchDirs", mustBeArray1);
                                                    checkForInvalidFlags1(result, keys, `from onResolve() callback in plugin ${JSON.stringify(name)}`);
                                                    response.id = id;
                                                    if (pluginName != null) response.pluginName = pluginName;
                                                    if (path8 != null) response.path = path8;
                                                    if (namespace != null) response.namespace = namespace;
                                                    if (external != null) response.external = external;
                                                    if (pluginData != null) response.pluginData = stash.store(pluginData);
                                                    if (errors != null) response.errors = sanitizeMessages1(errors, "errors", stash, name);
                                                    if (warnings != null) response.warnings = sanitizeMessages1(warnings, "warnings", stash, name);
                                                    if (watchFiles != null) response.watchFiles = sanitizeStringArray1(watchFiles, "watchFiles");
                                                    if (watchDirs != null) response.watchDirs = sanitizeStringArray1(watchDirs, "watchDirs");
                                                    break;
                                                }
                                            } catch (e) {
                                                return {
                                                    id,
                                                    errors: [
                                                        extractErrorMessageV81(e, streamIn, stash, note && note(), name)
                                                    ]
                                                };
                                            }
                                        }
                                        return response;
                                    }
                                case "load":
                                    {
                                        let response = {}, name = "", callback2, note;
                                        for (let id of request.ids){
                                            try {
                                                ({ name , callback: callback2 , note  } = onLoadCallbacks[id]);
                                                let result = yield callback2({
                                                    path: request.path,
                                                    namespace: request.namespace,
                                                    pluginData: stash.load(request.pluginData)
                                                });
                                                if (result != null) {
                                                    if (typeof result !== "object") throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(name)} to return an object`);
                                                    let keys = {};
                                                    let pluginName = getFlag1(result, keys, "pluginName", mustBeString1);
                                                    let contents = getFlag1(result, keys, "contents", mustBeStringOrUint8Array1);
                                                    let resolveDir = getFlag1(result, keys, "resolveDir", mustBeString1);
                                                    let pluginData = getFlag1(result, keys, "pluginData", canBeAnything1);
                                                    let loader = getFlag1(result, keys, "loader", mustBeString1);
                                                    let errors = getFlag1(result, keys, "errors", mustBeArray1);
                                                    let warnings = getFlag1(result, keys, "warnings", mustBeArray1);
                                                    let watchFiles = getFlag1(result, keys, "watchFiles", mustBeArray1);
                                                    let watchDirs = getFlag1(result, keys, "watchDirs", mustBeArray1);
                                                    checkForInvalidFlags1(result, keys, `from onLoad() callback in plugin ${JSON.stringify(name)}`);
                                                    response.id = id;
                                                    if (pluginName != null) response.pluginName = pluginName;
                                                    if (contents instanceof Uint8Array) response.contents = contents;
                                                    else if (contents != null) response.contents = encodeUTF81(contents);
                                                    if (resolveDir != null) response.resolveDir = resolveDir;
                                                    if (pluginData != null) response.pluginData = stash.store(pluginData);
                                                    if (loader != null) response.loader = loader;
                                                    if (errors != null) response.errors = sanitizeMessages1(errors, "errors", stash, name);
                                                    if (warnings != null) response.warnings = sanitizeMessages1(warnings, "warnings", stash, name);
                                                    if (watchFiles != null) response.watchFiles = sanitizeStringArray1(watchFiles, "watchFiles");
                                                    if (watchDirs != null) response.watchDirs = sanitizeStringArray1(watchDirs, "watchDirs");
                                                    break;
                                                }
                                            } catch (e) {
                                                return {
                                                    id,
                                                    errors: [
                                                        extractErrorMessageV81(e, streamIn, stash, note && note(), name)
                                                    ]
                                                };
                                            }
                                        }
                                        return response;
                                    }
                                default:
                                    throw new Error(`Invalid command: ` + request.command);
                            }
                        })
                    ;
                    let runOnEndCallbacks = (result, done)=>done()
                    ;
                    if (onEndCallbacks.length > 0) {
                        runOnEndCallbacks = (result, done)=>{
                            (()=>__async(this, null, function*() {
                                    for (const { name , callback: callback2 , note  } of onEndCallbacks){
                                        try {
                                            yield callback2(result);
                                        } catch (e) {
                                            result.errors.push(extractErrorMessageV81(e, streamIn, stash, note && note(), name));
                                        }
                                    }
                                })
                            )().then(done);
                        };
                    }
                    let refCount = 0;
                    return {
                        ok: true,
                        requestPlugins,
                        runOnEndCallbacks,
                        pluginRefs: {
                            ref () {
                                if (++refCount === 1) pluginCallbacks.set(buildKey, callback);
                            },
                            unref () {
                                if (--refCount === 0) pluginCallbacks.delete(buildKey);
                            }
                        }
                    };
                })
            ;
            let buildServeData = (refs, options, request)=>{
                let keys = {};
                let port = getFlag1(options, keys, "port", mustBeInteger1);
                let host = getFlag1(options, keys, "host", mustBeString1);
                let servedir = getFlag1(options, keys, "servedir", mustBeString1);
                let onRequest = getFlag1(options, keys, "onRequest", mustBeFunction1);
                let serveID = nextServeID++;
                let onWait;
                let wait = new Promise((resolve10, reject)=>{
                    onWait = (error)=>{
                        serveCallbacks.delete(serveID);
                        if (error !== null) reject(new Error(error));
                        else resolve10();
                    };
                });
                request.serve = {
                    serveID
                };
                checkForInvalidFlags1(options, keys, `in serve() call`);
                if (port !== void 0) request.serve.port = port;
                if (host !== void 0) request.serve.host = host;
                if (servedir !== void 0) request.serve.servedir = servedir;
                serveCallbacks.set(serveID, {
                    onRequest,
                    onWait
                });
                return {
                    wait,
                    stop () {
                        sendRequest(refs, {
                            command: "serve-stop",
                            serveID
                        }, ()=>{});
                    }
                };
            };
            const buildLogLevelDefault = "warning";
            const transformLogLevelDefault = "silent";
            let buildOrServe = (args)=>{
                let key = nextBuildKey++;
                const details = createObjectStash1();
                let plugins;
                let { refs , options , isTTY , callback  } = args;
                if (typeof options === "object") {
                    let value = options.plugins;
                    if (value !== void 0) {
                        if (!Array.isArray(value)) throw new Error(`"plugins" must be an array`);
                        plugins = value;
                    }
                }
                let handleError = (e, pluginName)=>{
                    let flags = [];
                    try {
                        pushLogFlags1(flags, options, {}, isTTY, buildLogLevelDefault);
                    } catch (e2) {}
                    const error = extractErrorMessageV81(e, streamIn, details, void 0, pluginName);
                    sendRequest(refs, {
                        command: "error",
                        flags,
                        error
                    }, ()=>{
                        error.detail = details.load(error.detail);
                        callback(failureErrorWithLog1("Build failed", [
                            error
                        ], []), null);
                    });
                };
                if (plugins && plugins.length > 0) {
                    if (streamIn.isSync) return handleError(new Error("Cannot use plugins in synchronous API calls"), "");
                    handlePlugins(options, plugins, key, details).then((result)=>{
                        if (!result.ok) {
                            handleError(result.error, result.pluginName);
                        } else {
                            try {
                                buildOrServeContinue(__objSpread(__objSpread({}, args), {
                                    key,
                                    details,
                                    requestPlugins: result.requestPlugins,
                                    runOnEndCallbacks: result.runOnEndCallbacks,
                                    pluginRefs: result.pluginRefs
                                }));
                            } catch (e) {
                                handleError(e, "");
                            }
                        }
                    }, (e)=>handleError(e, "")
                    );
                } else {
                    try {
                        buildOrServeContinue(__objSpread(__objSpread({}, args), {
                            key,
                            details,
                            requestPlugins: null,
                            runOnEndCallbacks: (result, done)=>done()
                            ,
                            pluginRefs: null
                        }));
                    } catch (e) {
                        handleError(e, "");
                    }
                }
            };
            let buildOrServeContinue = ({ callName , refs: callerRefs , serveOptions , options , isTTY , defaultWD: defaultWD1 , callback , key , details , requestPlugins , runOnEndCallbacks , pluginRefs  })=>{
                const refs = {
                    ref () {
                        if (pluginRefs) pluginRefs.ref();
                        if (callerRefs) callerRefs.ref();
                    },
                    unref () {
                        if (pluginRefs) pluginRefs.unref();
                        if (callerRefs) callerRefs.unref();
                    }
                };
                let writeDefault = !streamIn.isBrowser;
                let { entries , flags , write: write3 , stdinContents , stdinResolveDir , absWorkingDir , incremental , nodePaths , watch  } = flagsForBuildOptions1(callName, options, isTTY, buildLogLevelDefault, writeDefault);
                let request = {
                    command: "build",
                    key,
                    entries,
                    flags,
                    write: write3,
                    stdinContents,
                    stdinResolveDir,
                    absWorkingDir: absWorkingDir || defaultWD1,
                    incremental,
                    nodePaths
                };
                if (requestPlugins) request.plugins = requestPlugins;
                let serve22 = serveOptions && buildServeData(refs, serveOptions, request);
                let rebuild;
                let stop1;
                let copyResponseToResult = (response, result)=>{
                    if (response.outputFiles) result.outputFiles = response.outputFiles.map(convertOutputFiles1);
                    if (response.metafile) result.metafile = JSON.parse(response.metafile);
                    if (response.writeToStdout !== void 0) console.log(decodeUTF81(response.writeToStdout).replace(/\n$/, ""));
                };
                let buildResponseToResult = (response, callback2)=>{
                    let result = {
                        errors: replaceDetailsInMessages1(response.errors, details),
                        warnings: replaceDetailsInMessages1(response.warnings, details)
                    };
                    copyResponseToResult(response, result);
                    runOnEndCallbacks(result, ()=>{
                        if (result.errors.length > 0) {
                            return callback2(failureErrorWithLog1("Build failed", result.errors, result.warnings), null);
                        }
                        if (response.rebuildID !== void 0) {
                            if (!rebuild) {
                                let isDisposed = false;
                                rebuild = ()=>new Promise((resolve11, reject)=>{
                                        if (isDisposed || isClosed) throw new Error("Cannot rebuild");
                                        sendRequest(refs, {
                                            command: "rebuild",
                                            rebuildID: response.rebuildID
                                        }, (error2, response2)=>{
                                            if (error2) {
                                                const message = {
                                                    pluginName: "",
                                                    text: error2,
                                                    location: null,
                                                    notes: [],
                                                    detail: void 0
                                                };
                                                return callback2(failureErrorWithLog1("Build failed", [
                                                    message
                                                ], []), null);
                                            }
                                            buildResponseToResult(response2, (error3, result3)=>{
                                                if (error3) reject(error3);
                                                else resolve11(result3);
                                            });
                                        });
                                    })
                                ;
                                refs.ref();
                                rebuild.dispose = ()=>{
                                    if (isDisposed) return;
                                    isDisposed = true;
                                    sendRequest(refs, {
                                        command: "rebuild-dispose",
                                        rebuildID: response.rebuildID
                                    }, ()=>{});
                                    refs.unref();
                                };
                            }
                            result.rebuild = rebuild;
                        }
                        if (response.watchID !== void 0) {
                            if (!stop1) {
                                let isStopped = false;
                                refs.ref();
                                stop1 = ()=>{
                                    if (isStopped) return;
                                    isStopped = true;
                                    watchCallbacks.delete(response.watchID);
                                    sendRequest(refs, {
                                        command: "watch-stop",
                                        watchID: response.watchID
                                    }, ()=>{});
                                    refs.unref();
                                };
                                if (watch) {
                                    watchCallbacks.set(response.watchID, (serviceStopError, watchResponse)=>{
                                        if (serviceStopError) {
                                            if (watch.onRebuild) watch.onRebuild(serviceStopError, null);
                                            return;
                                        }
                                        let result2 = {
                                            errors: replaceDetailsInMessages1(watchResponse.errors, details),
                                            warnings: replaceDetailsInMessages1(watchResponse.warnings, details)
                                        };
                                        copyResponseToResult(watchResponse, result2);
                                        runOnEndCallbacks(result2, ()=>{
                                            if (result2.errors.length > 0) {
                                                if (watch.onRebuild) watch.onRebuild(failureErrorWithLog1("Build failed", result2.errors, result2.warnings), null);
                                                return;
                                            }
                                            if (watchResponse.rebuildID !== void 0) result2.rebuild = rebuild;
                                            result2.stop = stop1;
                                            if (watch.onRebuild) watch.onRebuild(null, result2);
                                        });
                                    });
                                }
                            }
                            result.stop = stop1;
                        }
                        callback2(null, result);
                    });
                };
                if (write3 && streamIn.isBrowser) throw new Error(`Cannot enable "write" in the browser`);
                if (incremental && streamIn.isSync) throw new Error(`Cannot use "incremental" with a synchronous build`);
                sendRequest(refs, request, (error, response)=>{
                    if (error) return callback(new Error(error), null);
                    if (serve22) {
                        let serveResponse = response;
                        let isStopped = false;
                        refs.ref();
                        let result = {
                            port: serveResponse.port,
                            host: serveResponse.host,
                            wait: serve22.wait,
                            stop () {
                                if (isStopped) return;
                                isStopped = true;
                                serve22.stop();
                                refs.unref();
                            }
                        };
                        refs.ref();
                        serve22.wait.then(refs.unref, refs.unref);
                        return callback(null, result);
                    }
                    return buildResponseToResult(response, callback);
                });
            };
            let transform22 = ({ callName , refs , input , options , isTTY , fs , callback  })=>{
                const details = createObjectStash1();
                let start13 = (inputPath)=>{
                    try {
                        if (typeof input !== "string") throw new Error('The input to "transform" must be a string');
                        let flags = flagsForTransformOptions1(callName, options, isTTY, transformLogLevelDefault);
                        let request = {
                            command: "transform",
                            flags,
                            inputFS: inputPath !== null,
                            input: inputPath !== null ? inputPath : input
                        };
                        sendRequest(refs, request, (error, response)=>{
                            if (error) return callback(new Error(error), null);
                            let errors = replaceDetailsInMessages1(response.errors, details);
                            let warnings = replaceDetailsInMessages1(response.warnings, details);
                            let outstanding = 1;
                            let next = ()=>--outstanding === 0 && callback(null, {
                                    warnings,
                                    code: response.code,
                                    map: response.map
                                })
                            ;
                            if (errors.length > 0) return callback(failureErrorWithLog1("Transform failed", errors, warnings), null);
                            if (response.codeFS) {
                                outstanding++;
                                fs.readFile(response.code, (err, contents)=>{
                                    if (err !== null) {
                                        callback(err, null);
                                    } else {
                                        response.code = contents;
                                        next();
                                    }
                                });
                            }
                            if (response.mapFS) {
                                outstanding++;
                                fs.readFile(response.map, (err, contents)=>{
                                    if (err !== null) {
                                        callback(err, null);
                                    } else {
                                        response.map = contents;
                                        next();
                                    }
                                });
                            }
                            next();
                        });
                    } catch (e) {
                        let flags = [];
                        try {
                            pushLogFlags1(flags, options, {}, isTTY, transformLogLevelDefault);
                        } catch (e2) {}
                        const error = extractErrorMessageV81(e, streamIn, details, void 0, "");
                        sendRequest(refs, {
                            command: "error",
                            flags,
                            error
                        }, ()=>{
                            error.detail = details.load(error.detail);
                            callback(failureErrorWithLog1("Transform failed", [
                                error
                            ], []), null);
                        });
                    }
                };
                if (typeof input === "string" && input.length > 1024 * 1024) {
                    let next = start13;
                    start13 = ()=>fs.writeFile(input, next)
                    ;
                }
                start13(null);
            };
            let formatMessages22 = ({ callName , refs , messages , options , callback  })=>{
                let result = sanitizeMessages1(messages, "messages", null, "");
                if (!options) throw new Error(`Missing second argument in ${callName}() call`);
                let keys = {};
                let kind = getFlag1(options, keys, "kind", mustBeString1);
                let color = getFlag1(options, keys, "color", mustBeBoolean1);
                let terminalWidth = getFlag1(options, keys, "terminalWidth", mustBeInteger1);
                checkForInvalidFlags1(options, keys, `in ${callName}() call`);
                if (kind === void 0) throw new Error(`Missing "kind" in ${callName}() call`);
                if (kind !== "error" && kind !== "warning") throw new Error(`Expected "kind" to be "error" or "warning" in ${callName}() call`);
                let request = {
                    command: "format-msgs",
                    messages: result,
                    isWarning: kind === "warning"
                };
                if (color !== void 0) request.color = color;
                if (terminalWidth !== void 0) request.terminalWidth = terminalWidth;
                sendRequest(refs, request, (error, response)=>{
                    if (error) return callback(new Error(error), null);
                    callback(null, response.messages);
                });
            };
            return {
                readFromStdout,
                afterClose,
                service: {
                    buildOrServe,
                    transform: transform22,
                    formatMessages: formatMessages22
                }
            };
        }
        function createObjectStash1() {
            const map = new Map();
            let nextID = 0;
            return {
                load (id) {
                    return map.get(id);
                },
                store (value) {
                    if (value === void 0) return -1;
                    const id = nextID++;
                    map.set(id, value);
                    return id;
                }
            };
        }
        function extractCallerV81(e, streamIn, ident) {
            let note;
            let tried = false;
            return ()=>{
                if (tried) return note;
                tried = true;
                try {
                    let lines = (e.stack + "").split("\n");
                    lines.splice(1, 1);
                    let location = parseStackLinesV81(streamIn, lines, ident);
                    if (location) {
                        note = {
                            text: e.message,
                            location
                        };
                        return note;
                    }
                } catch (e2) {}
            };
        }
        function extractErrorMessageV81(e, streamIn, stash, note, pluginName) {
            let text = "Internal error";
            let location = null;
            try {
                text = (e && e.message || e) + "";
            } catch (e2) {}
            try {
                location = parseStackLinesV81(streamIn, (e.stack + "").split("\n"), "");
            } catch (e21) {}
            return {
                pluginName,
                text,
                location,
                notes: note ? [
                    note
                ] : [],
                detail: stash ? stash.store(e) : -1
            };
        }
        function parseStackLinesV81(streamIn, lines, ident) {
            let at = "    at ";
            if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at)) {
                for(let i43 = 1; i43 < lines.length; i43++){
                    let line = lines[i43];
                    if (!line.startsWith(at)) continue;
                    line = line.slice(at.length);
                    while(true){
                        let match = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
                        if (match) {
                            line = match[1];
                            continue;
                        }
                        match = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line);
                        if (match) {
                            line = match[1];
                            continue;
                        }
                        match = /^(\S+):(\d+):(\d+)$/.exec(line);
                        if (match) {
                            let contents;
                            try {
                                contents = streamIn.readFileSync(match[1], "utf8");
                            } catch (e) {
                                break;
                            }
                            let lineText = contents.split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2] - 1] || "";
                            let column = +match[3] - 1;
                            let length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
                            return {
                                file: match[1],
                                namespace: "file",
                                line: +match[2],
                                column: encodeUTF81(lineText.slice(0, column)).length,
                                length: encodeUTF81(lineText.slice(column, column + length)).length,
                                lineText: lineText + "\n" + lines.slice(1).join("\n"),
                                suggestion: ""
                            };
                        }
                        break;
                    }
                }
            }
            return null;
        }
        function failureErrorWithLog1(text, errors, warnings) {
            let limit = 5;
            let summary = errors.length < 1 ? "" : ` with ${errors.length} error${errors.length < 2 ? "" : "s"}:` + errors.slice(0, limit + 1).map((e, i44)=>{
                if (i44 === limit) return "\n...";
                if (!e.location) return `
error: ${e.text}`;
                let { file , line , column  } = e.location;
                let pluginText = e.pluginName ? `[plugin: ${e.pluginName}] ` : "";
                return `
${file}:${line}:${column}: error: ${pluginText}${e.text}`;
            }).join("");
            let error = new Error(`${text}${summary}`);
            error.errors = errors;
            error.warnings = warnings;
            return error;
        }
        function replaceDetailsInMessages1(messages, stash) {
            for (const message of messages){
                message.detail = stash.load(message.detail);
            }
            return messages;
        }
        function sanitizeLocation1(location, where) {
            if (location == null) return null;
            let keys = {};
            let file = getFlag1(location, keys, "file", mustBeString1);
            let namespace = getFlag1(location, keys, "namespace", mustBeString1);
            let line = getFlag1(location, keys, "line", mustBeInteger1);
            let column = getFlag1(location, keys, "column", mustBeInteger1);
            let length = getFlag1(location, keys, "length", mustBeInteger1);
            let lineText = getFlag1(location, keys, "lineText", mustBeString1);
            let suggestion = getFlag1(location, keys, "suggestion", mustBeString1);
            checkForInvalidFlags1(location, keys, where);
            return {
                file: file || "",
                namespace: namespace || "",
                line: line || 0,
                column: column || 0,
                length: length || 0,
                lineText: lineText || "",
                suggestion: suggestion || ""
            };
        }
        function sanitizeMessages1(messages, property, stash, fallbackPluginName) {
            let messagesClone = [];
            let index = 0;
            for (const message of messages){
                let keys = {};
                let pluginName = getFlag1(message, keys, "pluginName", mustBeString1);
                let text = getFlag1(message, keys, "text", mustBeString1);
                let location = getFlag1(message, keys, "location", mustBeObjectOrNull1);
                let notes = getFlag1(message, keys, "notes", mustBeArray1);
                let detail = getFlag1(message, keys, "detail", canBeAnything1);
                let where = `in element ${index} of "${property}"`;
                checkForInvalidFlags1(message, keys, where);
                let notesClone = [];
                if (notes) {
                    for (const note of notes){
                        let noteKeys = {};
                        let noteText = getFlag1(note, noteKeys, "text", mustBeString1);
                        let noteLocation = getFlag1(note, noteKeys, "location", mustBeObjectOrNull1);
                        checkForInvalidFlags1(note, noteKeys, where);
                        notesClone.push({
                            text: noteText || "",
                            location: sanitizeLocation1(noteLocation, where)
                        });
                    }
                }
                messagesClone.push({
                    pluginName: pluginName || fallbackPluginName,
                    text: text || "",
                    location: sanitizeLocation1(location, where),
                    notes: notesClone,
                    detail: stash ? stash.store(detail) : -1
                });
                index++;
            }
            return messagesClone;
        }
        function sanitizeStringArray1(values, property) {
            const result = [];
            for (const value of values){
                if (typeof value !== "string") throw new Error(`${JSON.stringify(property)} must be an array of strings`);
                result.push(value);
            }
            return result;
        }
        function convertOutputFiles1({ path: path9 , contents  }) {
            let text = null;
            return {
                path: path9,
                contents,
                get text () {
                    if (text === null) text = decodeUTF81(contents);
                    return text;
                }
            };
        }
        var version2 = "0.11.19";
        var build2 = (options)=>ensureServiceIsRunning1().build(options)
        ;
        var serve2 = ()=>{
            throw new Error(`The "serve" API only works in node`);
        };
        var transform2 = (input, options)=>ensureServiceIsRunning1().transform(input, options)
        ;
        var formatMessages2 = (messages, options)=>ensureServiceIsRunning1().formatMessages(messages, options)
        ;
        var buildSync2 = ()=>{
            throw new Error(`The "buildSync" API only works in node`);
        };
        var transformSync2 = ()=>{
            throw new Error(`The "transformSync" API only works in node`);
        };
        var formatMessagesSync2 = ()=>{
            throw new Error(`The "formatMessagesSync" API only works in node`);
        };
        var initializePromise;
        var longLivedService1;
        var ensureServiceIsRunning1 = ()=>{
            if (longLivedService1) return longLivedService1;
            if (initializePromise) throw new Error('You need to wait for the promise returned from "initialize" to be resolved before calling this');
            throw new Error('You need to call "initialize" before calling this');
        };
        var initialize2 = (options)=>{
            options = validateInitializeOptions1(options || {});
            let wasmURL = options.wasmURL;
            let useWorker = options.worker !== false;
            if (!wasmURL) throw new Error('Must provide the "wasmURL" option');
            wasmURL += "";
            if (initializePromise) throw new Error('Cannot call "initialize" more than once');
            initializePromise = startRunningService(wasmURL, useWorker);
            initializePromise.catch(()=>{
                initializePromise = void 0;
            });
            return initializePromise;
        };
        var startRunningService = (wasmURL, useWorker)=>__async(void 0, null, function*() {
                let res = yield fetch(wasmURL);
                if (!res.ok) throw new Error(`Failed to download ${JSON.stringify(wasmURL)}`);
                let wasm1 = yield res.arrayBuffer();
                let fn = (postMessage)=>{
                    {
                        let global = {};
                        for(let o = self; o; o = Object.getPrototypeOf(o))for (let k1 of Object.getOwnPropertyNames(o))if (!(k1 in global)) Object.defineProperty(global, k1, {
                            get: ()=>self[k1]
                        });
                        (()=>{
                            if (typeof global !== "undefined") {} else if (typeof window !== "undefined") {
                                window.global = window;
                            } else if (typeof self !== "undefined") {
                                self.global = self;
                            } else {
                                throw new Error("cannot export Go (neither global, window nor self is defined)");
                            }
                            if (!global.require && typeof require !== "undefined") {
                                global.require = require;
                            }
                            if (!global.fs && global.require) {
                                const fs = require("fs");
                                if (typeof fs === "object" && fs !== null && Object.keys(fs).length !== 0) {
                                    global.fs = Object.assign({}, fs, {
                                        write (fd, buf, offset, length, position, callback) {
                                            if (offset === 0 && length === buf.length && position === null) {
                                                if (fd === process.stdout.fd) {
                                                    try {
                                                        process.stdout.write(buf, (err)=>err ? callback(err, 0, null) : callback(null, length, buf)
                                                        );
                                                    } catch (err) {
                                                        callback(err, 0, null);
                                                    }
                                                    return;
                                                }
                                                if (fd === process.stderr.fd) {
                                                    try {
                                                        process.stderr.write(buf, (err)=>err ? callback(err, 0, null) : callback(null, length, buf)
                                                        );
                                                    } catch (err) {
                                                        callback(err, 0, null);
                                                    }
                                                    return;
                                                }
                                            }
                                            fs.write(fd, buf, offset, length, position, callback);
                                        }
                                    });
                                }
                            }
                            const enosys = ()=>{
                                const err = new Error("not implemented");
                                err.code = "ENOSYS";
                                return err;
                            };
                            if (!global.fs) {
                                let outputBuf = "";
                                global.fs = {
                                    constants: {
                                        O_WRONLY: -1,
                                        O_RDWR: -1,
                                        O_CREAT: -1,
                                        O_TRUNC: -1,
                                        O_APPEND: -1,
                                        O_EXCL: -1
                                    },
                                    writeSync (fd, buf) {
                                        outputBuf += decoder.decode(buf);
                                        const nl = outputBuf.lastIndexOf("\n");
                                        if (nl != -1) {
                                            console.log(outputBuf.substr(0, nl));
                                            outputBuf = outputBuf.substr(nl + 1);
                                        }
                                        return buf.length;
                                    },
                                    write (fd, buf, offset, length, position, callback) {
                                        if (offset !== 0 || length !== buf.length || position !== null) {
                                            callback(enosys());
                                            return;
                                        }
                                        const n = this.writeSync(fd, buf);
                                        callback(null, n);
                                    },
                                    chmod (path, mode, callback) {
                                        callback(enosys());
                                    },
                                    chown (path, uid, gid, callback) {
                                        callback(enosys());
                                    },
                                    close (fd, callback) {
                                        callback(enosys());
                                    },
                                    fchmod (fd, mode, callback) {
                                        callback(enosys());
                                    },
                                    fchown (fd, uid, gid, callback) {
                                        callback(enosys());
                                    },
                                    fstat (fd, callback) {
                                        callback(enosys());
                                    },
                                    fsync (fd, callback) {
                                        callback(null);
                                    },
                                    ftruncate (fd, length, callback) {
                                        callback(enosys());
                                    },
                                    lchown (path, uid, gid, callback) {
                                        callback(enosys());
                                    },
                                    link (path, link, callback) {
                                        callback(enosys());
                                    },
                                    lstat (path, callback) {
                                        callback(enosys());
                                    },
                                    mkdir (path, perm, callback) {
                                        callback(enosys());
                                    },
                                    open (path, flags, mode, callback) {
                                        callback(enosys());
                                    },
                                    read (fd, buffer, offset, length, position, callback) {
                                        callback(enosys());
                                    },
                                    readdir (path, callback) {
                                        callback(enosys());
                                    },
                                    readlink (path, callback) {
                                        callback(enosys());
                                    },
                                    rename (from, to, callback) {
                                        callback(enosys());
                                    },
                                    rmdir (path, callback) {
                                        callback(enosys());
                                    },
                                    stat (path, callback) {
                                        callback(enosys());
                                    },
                                    symlink (path, link, callback) {
                                        callback(enosys());
                                    },
                                    truncate (path, length, callback) {
                                        callback(enosys());
                                    },
                                    unlink (path, callback) {
                                        callback(enosys());
                                    },
                                    utimes (path, atime, mtime, callback) {
                                        callback(enosys());
                                    }
                                };
                            }
                            if (!global.process) {
                                global.process = {
                                    getuid () {
                                        return -1;
                                    },
                                    getgid () {
                                        return -1;
                                    },
                                    geteuid () {
                                        return -1;
                                    },
                                    getegid () {
                                        return -1;
                                    },
                                    getgroups () {
                                        throw enosys();
                                    },
                                    pid: -1,
                                    ppid: -1,
                                    umask () {
                                        throw enosys();
                                    },
                                    cwd () {
                                        throw enosys();
                                    },
                                    chdir () {
                                        throw enosys();
                                    }
                                };
                            }
                            if (!global.crypto && global.require) {
                                const nodeCrypto = require("crypto");
                                global.crypto = {
                                    getRandomValues (b6) {
                                        nodeCrypto.randomFillSync(b6);
                                    }
                                };
                            }
                            if (!global.crypto) {
                                throw new Error("global.crypto is not available, polyfill required (getRandomValues only)");
                            }
                            if (!global.performance) {
                                global.performance = {
                                    now () {
                                        const [sec, nsec] = process.hrtime();
                                        return sec * 1000 + nsec / 1000000;
                                    }
                                };
                            }
                            if (!global.TextEncoder && global.require) {
                                global.TextEncoder = require("util").TextEncoder;
                            }
                            if (!global.TextEncoder) {
                                throw new Error("global.TextEncoder is not available, polyfill required");
                            }
                            if (!global.TextDecoder && global.require) {
                                global.TextDecoder = require("util").TextDecoder;
                            }
                            if (!global.TextDecoder) {
                                throw new Error("global.TextDecoder is not available, polyfill required");
                            }
                            const encoder = new TextEncoder("utf-8");
                            const decoder = new TextDecoder("utf-8");
                            global.Go = class {
                                constructor(){
                                    this.argv = [
                                        "js"
                                    ];
                                    this.env = {};
                                    this.exit = (code)=>{
                                        if (code !== 0) {
                                            console.warn("exit code:", code);
                                        }
                                    };
                                    this._exitPromise = new Promise((resolve12)=>{
                                        this._resolveExitPromise = resolve12;
                                    });
                                    this._pendingEvent = null;
                                    this._scheduledTimeouts = new Map();
                                    this._nextCallbackTimeoutID = 1;
                                    const setInt64 = (addr, v)=>{
                                        this.mem.setUint32(addr + 0, v, true);
                                        this.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);
                                    };
                                    const getInt64 = (addr)=>{
                                        const low = this.mem.getUint32(addr + 0, true);
                                        const high = this.mem.getInt32(addr + 4, true);
                                        return low + high * 4294967296;
                                    };
                                    const loadValue = (addr)=>{
                                        const f = this.mem.getFloat64(addr, true);
                                        if (f === 0) {
                                            return undefined;
                                        }
                                        if (!isNaN(f)) {
                                            return f;
                                        }
                                        const id = this.mem.getUint32(addr, true);
                                        return this._values[id];
                                    };
                                    const storeValue = (addr, v)=>{
                                        const nanHead = 2146959360;
                                        if (typeof v === "number" && v !== 0) {
                                            if (isNaN(v)) {
                                                this.mem.setUint32(addr + 4, nanHead, true);
                                                this.mem.setUint32(addr, 0, true);
                                                return;
                                            }
                                            this.mem.setFloat64(addr, v, true);
                                            return;
                                        }
                                        if (v === undefined) {
                                            this.mem.setFloat64(addr, 0, true);
                                            return;
                                        }
                                        let id = this._ids.get(v);
                                        if (id === undefined) {
                                            id = this._idPool.pop();
                                            if (id === undefined) {
                                                id = this._values.length;
                                            }
                                            this._values[id] = v;
                                            this._goRefCounts[id] = 0;
                                            this._ids.set(v, id);
                                        }
                                        this._goRefCounts[id]++;
                                        let typeFlag = 0;
                                        switch(typeof v){
                                            case "object":
                                                if (v !== null) {
                                                    typeFlag = 1;
                                                }
                                                break;
                                            case "string":
                                                typeFlag = 2;
                                                break;
                                            case "symbol":
                                                typeFlag = 3;
                                                break;
                                            case "function":
                                                typeFlag = 4;
                                                break;
                                        }
                                        this.mem.setUint32(addr + 4, nanHead | typeFlag, true);
                                        this.mem.setUint32(addr, id, true);
                                    };
                                    const loadSlice = (addr)=>{
                                        const array = getInt64(addr + 0);
                                        const len = getInt64(addr + 8);
                                        return new Uint8Array(this._inst.exports.mem.buffer, array, len);
                                    };
                                    const loadSliceOfValues = (addr)=>{
                                        const array = getInt64(addr + 0);
                                        const len = getInt64(addr + 8);
                                        const a3 = new Array(len);
                                        for(let i45 = 0; i45 < len; i45++){
                                            a3[i45] = loadValue(array + i45 * 8);
                                        }
                                        return a3;
                                    };
                                    const loadString = (addr)=>{
                                        const saddr = getInt64(addr + 0);
                                        const len = getInt64(addr + 8);
                                        return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));
                                    };
                                    const timeOrigin = Date.now() - performance.now();
                                    this.importObject = {
                                        go: {
                                            "runtime.wasmExit": (sp)=>{
                                                sp >>>= 0;
                                                const code = this.mem.getInt32(sp + 8, true);
                                                this.exited = true;
                                                delete this._inst;
                                                delete this._values;
                                                delete this._goRefCounts;
                                                delete this._ids;
                                                delete this._idPool;
                                                this.exit(code);
                                            },
                                            "runtime.wasmWrite": (sp)=>{
                                                sp >>>= 0;
                                                const fd = getInt64(sp + 8);
                                                const p1 = getInt64(sp + 16);
                                                const n = this.mem.getInt32(sp + 24, true);
                                                fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p1, n));
                                            },
                                            "runtime.resetMemoryDataView": (sp)=>{
                                                sp >>>= 0;
                                                this.mem = new DataView(this._inst.exports.mem.buffer);
                                            },
                                            "runtime.nanotime1": (sp)=>{
                                                sp >>>= 0;
                                                setInt64(sp + 8, (timeOrigin + performance.now()) * 1000000);
                                            },
                                            "runtime.walltime1": (sp)=>{
                                                sp >>>= 0;
                                                const msec = (new Date).getTime();
                                                setInt64(sp + 8, msec / 1000);
                                                this.mem.setInt32(sp + 16, msec % 1000 * 1000000, true);
                                            },
                                            "runtime.scheduleTimeoutEvent": (sp)=>{
                                                sp >>>= 0;
                                                const id = this._nextCallbackTimeoutID;
                                                this._nextCallbackTimeoutID++;
                                                this._scheduledTimeouts.set(id, setTimeout(()=>{
                                                    this._resume();
                                                    while(this._scheduledTimeouts.has(id)){
                                                        console.warn("scheduleTimeoutEvent: missed timeout event");
                                                        this._resume();
                                                    }
                                                }, getInt64(sp + 8) + 1));
                                                this.mem.setInt32(sp + 16, id, true);
                                            },
                                            "runtime.clearTimeoutEvent": (sp)=>{
                                                sp >>>= 0;
                                                const id = this.mem.getInt32(sp + 8, true);
                                                clearTimeout(this._scheduledTimeouts.get(id));
                                                this._scheduledTimeouts.delete(id);
                                            },
                                            "runtime.getRandomData": (sp)=>{
                                                sp >>>= 0;
                                                crypto.getRandomValues(loadSlice(sp + 8));
                                            },
                                            "syscall/js.finalizeRef": (sp)=>{
                                                sp >>>= 0;
                                                const id = this.mem.getUint32(sp + 8, true);
                                                this._goRefCounts[id]--;
                                                if (this._goRefCounts[id] === 0) {
                                                    const v = this._values[id];
                                                    this._values[id] = null;
                                                    this._ids.delete(v);
                                                    this._idPool.push(id);
                                                }
                                            },
                                            "syscall/js.stringVal": (sp)=>{
                                                sp >>>= 0;
                                                storeValue(sp + 24, loadString(sp + 8));
                                            },
                                            "syscall/js.valueGet": (sp)=>{
                                                sp >>>= 0;
                                                const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));
                                                sp = this._inst.exports.getsp() >>> 0;
                                                storeValue(sp + 32, result);
                                            },
                                            "syscall/js.valueSet": (sp)=>{
                                                sp >>>= 0;
                                                Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));
                                            },
                                            "syscall/js.valueDelete": (sp)=>{
                                                sp >>>= 0;
                                                Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));
                                            },
                                            "syscall/js.valueIndex": (sp)=>{
                                                sp >>>= 0;
                                                storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));
                                            },
                                            "syscall/js.valueSetIndex": (sp)=>{
                                                sp >>>= 0;
                                                Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));
                                            },
                                            "syscall/js.valueCall": (sp)=>{
                                                sp >>>= 0;
                                                try {
                                                    const v = loadValue(sp + 8);
                                                    const m5 = Reflect.get(v, loadString(sp + 16));
                                                    const args = loadSliceOfValues(sp + 32);
                                                    const result = Reflect.apply(m5, v, args);
                                                    sp = this._inst.exports.getsp() >>> 0;
                                                    storeValue(sp + 56, result);
                                                    this.mem.setUint8(sp + 64, 1);
                                                } catch (err) {
                                                    storeValue(sp + 56, err);
                                                    this.mem.setUint8(sp + 64, 0);
                                                }
                                            },
                                            "syscall/js.valueInvoke": (sp)=>{
                                                sp >>>= 0;
                                                try {
                                                    const v = loadValue(sp + 8);
                                                    const args = loadSliceOfValues(sp + 16);
                                                    const result = Reflect.apply(v, undefined, args);
                                                    sp = this._inst.exports.getsp() >>> 0;
                                                    storeValue(sp + 40, result);
                                                    this.mem.setUint8(sp + 48, 1);
                                                } catch (err) {
                                                    storeValue(sp + 40, err);
                                                    this.mem.setUint8(sp + 48, 0);
                                                }
                                            },
                                            "syscall/js.valueNew": (sp)=>{
                                                sp >>>= 0;
                                                try {
                                                    const v = loadValue(sp + 8);
                                                    const args = loadSliceOfValues(sp + 16);
                                                    const result = Reflect.construct(v, args);
                                                    sp = this._inst.exports.getsp() >>> 0;
                                                    storeValue(sp + 40, result);
                                                    this.mem.setUint8(sp + 48, 1);
                                                } catch (err) {
                                                    storeValue(sp + 40, err);
                                                    this.mem.setUint8(sp + 48, 0);
                                                }
                                            },
                                            "syscall/js.valueLength": (sp)=>{
                                                sp >>>= 0;
                                                setInt64(sp + 16, parseInt(loadValue(sp + 8).length));
                                            },
                                            "syscall/js.valuePrepareString": (sp)=>{
                                                sp >>>= 0;
                                                const str = encoder.encode(String(loadValue(sp + 8)));
                                                storeValue(sp + 16, str);
                                                setInt64(sp + 24, str.length);
                                            },
                                            "syscall/js.valueLoadString": (sp)=>{
                                                sp >>>= 0;
                                                const str = loadValue(sp + 8);
                                                loadSlice(sp + 16).set(str);
                                            },
                                            "syscall/js.valueInstanceOf": (sp)=>{
                                                sp >>>= 0;
                                                this.mem.setUint8(sp + 24, loadValue(sp + 8) instanceof loadValue(sp + 16) ? 1 : 0);
                                            },
                                            "syscall/js.copyBytesToGo": (sp)=>{
                                                sp >>>= 0;
                                                const dst = loadSlice(sp + 8);
                                                const src = loadValue(sp + 32);
                                                if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {
                                                    this.mem.setUint8(sp + 48, 0);
                                                    return;
                                                }
                                                const toCopy = src.subarray(0, dst.length);
                                                dst.set(toCopy);
                                                setInt64(sp + 40, toCopy.length);
                                                this.mem.setUint8(sp + 48, 1);
                                            },
                                            "syscall/js.copyBytesToJS": (sp)=>{
                                                sp >>>= 0;
                                                const dst = loadValue(sp + 8);
                                                const src = loadSlice(sp + 16);
                                                if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {
                                                    this.mem.setUint8(sp + 48, 0);
                                                    return;
                                                }
                                                const toCopy = src.subarray(0, dst.length);
                                                dst.set(toCopy);
                                                setInt64(sp + 40, toCopy.length);
                                                this.mem.setUint8(sp + 48, 1);
                                            },
                                            "debug": (value)=>{
                                                console.log(value);
                                            }
                                        }
                                    };
                                }
                                async run(instance) {
                                    if (!(instance instanceof WebAssembly.Instance)) {
                                        throw new Error("Go.run: WebAssembly.Instance expected");
                                    }
                                    this._inst = instance;
                                    this.mem = new DataView(this._inst.exports.mem.buffer);
                                    this._values = [
                                        NaN,
                                        0,
                                        null,
                                        true,
                                        false,
                                        global,
                                        this, 
                                    ];
                                    this._goRefCounts = new Array(this._values.length).fill(Infinity);
                                    this._ids = new Map([
                                        [
                                            0,
                                            1
                                        ],
                                        [
                                            null,
                                            2
                                        ],
                                        [
                                            true,
                                            3
                                        ],
                                        [
                                            false,
                                            4
                                        ],
                                        [
                                            global,
                                            5
                                        ],
                                        [
                                            this,
                                            6
                                        ], 
                                    ]);
                                    this._idPool = [];
                                    this.exited = false;
                                    let offset = 4096;
                                    const strPtr = (str)=>{
                                        const ptr = offset;
                                        const bytes = encoder.encode(str + "\0");
                                        new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);
                                        offset += bytes.length;
                                        if (offset % 8 !== 0) {
                                            offset += 8 - offset % 8;
                                        }
                                        return ptr;
                                    };
                                    const argc = this.argv.length;
                                    const argvPtrs = [];
                                    this.argv.forEach((arg)=>{
                                        argvPtrs.push(strPtr(arg));
                                    });
                                    argvPtrs.push(0);
                                    const keys = Object.keys(this.env).sort();
                                    keys.forEach((key)=>{
                                        argvPtrs.push(strPtr(`${key}=${this.env[key]}`));
                                    });
                                    argvPtrs.push(0);
                                    const argv = offset;
                                    argvPtrs.forEach((ptr)=>{
                                        this.mem.setUint32(offset, ptr, true);
                                        this.mem.setUint32(offset + 4, 0, true);
                                        offset += 8;
                                    });
                                    this._inst.exports.run(argc, argv);
                                    if (this.exited) {
                                        this._resolveExitPromise();
                                    }
                                    await this._exitPromise;
                                }
                                _resume() {
                                    if (this.exited) {
                                        throw new Error("Go program has already exited");
                                    }
                                    this._inst.exports.resume();
                                    if (this.exited) {
                                        this._resolveExitPromise();
                                    }
                                }
                                _makeFuncWrapper(id) {
                                    const go = this;
                                    return function() {
                                        const event = {
                                            id: id,
                                            this: this,
                                            args: arguments
                                        };
                                        go._pendingEvent = event;
                                        go._resume();
                                        return event.result;
                                    };
                                }
                            };
                            if (typeof module !== "undefined" && global.require && global.require.main === module && global.process && global.process.versions && !global.process.versions.electron) {
                                if (process.argv.length < 3) {
                                    console.error("usage: go_js_wasm_exec [wasm binary] [arguments]");
                                    process.exit(1);
                                }
                                const go = new Go();
                                go.argv = process.argv.slice(2);
                                go.env = Object.assign({
                                    TMPDIR: require("os").tmpdir()
                                }, process.env);
                                go.exit = process.exit;
                                WebAssembly.instantiate(fs.readFileSync(process.argv[2]), go.importObject).then((result)=>{
                                    process.on("exit", (code)=>{
                                        if (code === 0 && !go.exited) {
                                            go._pendingEvent = {
                                                id: 0
                                            };
                                            go._resume();
                                        }
                                    });
                                    return go.run(result.instance);
                                }).catch((err)=>{
                                    console.error(err);
                                    process.exit(1);
                                });
                            }
                        })();
                        onmessage = ({ data: wasm2  })=>{
                            let decoder = new TextDecoder();
                            let fs = global.fs;
                            let stderr = "";
                            fs.writeSync = (fd, buffer)=>{
                                if (fd === 1) {
                                    postMessage(buffer);
                                } else if (fd === 2) {
                                    stderr += decoder.decode(buffer);
                                    let parts = stderr.split("\n");
                                    if (parts.length > 1) console.log(parts.slice(0, -1).join("\n"));
                                    stderr = parts[parts.length - 1];
                                    console.warn(stderr);
                                } else {
                                    throw new Error("Bad write");
                                }
                                return buffer.length;
                            };
                            let stdin = [];
                            let resumeStdin;
                            let stdinPos = 0;
                            onmessage = ({ data  })=>{
                                if (data.length > 0) {
                                    stdin.push(data);
                                    if (resumeStdin) resumeStdin();
                                }
                            };
                            fs.read = (fd, buffer, offset, length, position, callback)=>{
                                if (fd !== 0 || offset !== 0 || length !== buffer.length || position !== null) {
                                    throw new Error("Bad read");
                                }
                                if (stdin.length === 0) {
                                    resumeStdin = ()=>fs.read(fd, buffer, offset, length, position, callback)
                                    ;
                                    return;
                                }
                                let first = stdin[0];
                                let count = Math.max(0, Math.min(length, first.length - stdinPos));
                                buffer.set(first.subarray(stdinPos, stdinPos + count), offset);
                                stdinPos += count;
                                if (stdinPos === first.length) {
                                    stdin.shift();
                                    stdinPos = 0;
                                }
                                callback(null, count);
                            };
                            let go = new global.Go();
                            go.argv = [
                                "",
                                `--service=0.11.19`
                            ];
                            WebAssembly.instantiate(wasm2, go.importObject).then(({ instance  })=>go.run(instance)
                            );
                        };
                    }
                    var onmessage;
                    return (m6)=>onmessage(m6)
                    ;
                };
                let worker;
                if (useWorker) {
                    let blob = new Blob([
                        code
                    ], {
                        type: "text/javascript"
                    });
                    worker = new Worker(URL.createObjectURL(blob), {
                        type: "module"
                    });
                } else {
                    let onmessage = fn((data)=>worker.onmessage({
                            data
                        })
                    );
                    worker = {
                        onmessage: null,
                        postMessage: (data)=>onmessage({
                                data
                            })
                        ,
                        terminate () {}
                    };
                }
                worker.postMessage(wasm1);
                worker.onmessage = ({ data  })=>readFromStdout(data)
                ;
                let { readFromStdout , service  } = createChannel1({
                    writeToStdin (bytes) {
                        worker.postMessage(bytes);
                    },
                    isSync: false,
                    isBrowser: true
                });
                longLivedService1 = {
                    build: (options)=>new Promise((resolve13, reject)=>service.buildOrServe({
                                callName: "build",
                                refs: null,
                                serveOptions: null,
                                options,
                                isTTY: false,
                                defaultWD: "/",
                                callback: (err, res2)=>err ? reject(err) : resolve13(res2)
                            })
                        )
                    ,
                    transform: (input, options)=>new Promise((resolve14, reject)=>service.transform({
                                callName: "transform",
                                refs: null,
                                input,
                                options: options || {},
                                isTTY: false,
                                fs: {
                                    readFile (_, callback) {
                                        callback(new Error("Internal error"), null);
                                    },
                                    writeFile (_, callback) {
                                        callback(null);
                                    }
                                },
                                callback: (err, res2)=>err ? reject(err) : resolve14(res2)
                            })
                        )
                    ,
                    formatMessages: (messages, options)=>new Promise((resolve15, reject)=>service.formatMessages({
                                callName: "formatMessages",
                                refs: null,
                                messages,
                                options,
                                callback: (err, res2)=>err ? reject(err) : resolve15(res2)
                            })
                        )
                };
            })
        ;
    })(exports);
});
var __pika_web_default_export_for_treeshaking__ = getDefaultExportFromCjs(browser);
var build = browser.build;
var buildSync = browser.buildSync;
var formatMessages = browser.formatMessages;
var formatMessagesSync = browser.formatMessagesSync;
var initialize = browser.initialize;
var serve = browser.serve;
var transform = browser.transform;
var transformSync = browser.transformSync;
var version = browser.version;
const mod = {
    __moduleExports: browser,
    build: build,
    buildSync: buildSync,
    formatMessages: formatMessages,
    formatMessagesSync: formatMessagesSync,
    initialize: initialize,
    serve: serve,
    transform: transform,
    transformSync: transformSync,
    version: version,
    default: __pika_web_default_export_for_treeshaking__
};
const importMeta = {
    url: "https://deno.land/x/denoflate@1.2.1/pkg/denoflate.js",
    main: false
};
let wasm;
let cachedTextDecoder = new TextDecoder('utf-8', {
    ignoreBOM: true,
    fatal: true
});
cachedTextDecoder.decode();
let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}
function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
const heap = new Array(32).fill(undefined);
heap.push(undefined, null, true, false);
let heap_next = heap.length;
function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];
    heap[idx] = obj;
    return idx;
}
function getObject(idx) {
    return heap[idx];
}
function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}
function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}
let WASM_VECTOR_LEN = 0;
function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1);
    getUint8Memory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}
let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}
function getArrayU8FromWasm0(ptr, len) {
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
function gunzip(input) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        var ptr0 = passArray8ToWasm0(input, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.gunzip(retptr, ptr0, len0);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var v1 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v1;
    } finally{
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}
async function load(module, imports) {
    if (typeof Response === 'function' && module instanceof Response) {
        if (typeof WebAssembly.instantiateStreaming === 'function') {
            try {
                return await WebAssembly.instantiateStreaming(module, imports);
            } catch (e) {
                if (module.headers.get('Content-Type') != 'application/wasm') {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
                } else {
                    throw e;
                }
            }
        }
        const bytes = await module.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);
    } else {
        const instance = await WebAssembly.instantiate(module, imports);
        if (instance instanceof WebAssembly.Instance) {
            return {
                instance,
                module
            };
        } else {
            return instance;
        }
    }
}
async function init1(input) {
    if (typeof input === 'undefined') {
        input = new URL('denoflate_bg.wasm', importMeta.url);
    }
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
        var ret = getStringFromWasm0(arg0, arg1);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_rethrow = function(arg0) {
        throw takeObject(arg0);
    };
    if (typeof input === 'string' || typeof Request === 'function' && input instanceof Request || typeof URL === 'function' && input instanceof URL) {
        input = fetch(input);
    }
    const { instance , module  } = await load(await input, imports);
    wasm = instance.exports;
    init1.__wbindgen_wasm_module = module;
    return wasm;
}
const wasm1 = new Uint8Array([
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    142,
    1,
    21,
    96,
    2,
    127,
    127,
    1,
    127,
    96,
    3,
    127,
    127,
    127,
    1,
    127,
    96,
    1,
    127,
    0,
    96,
    3,
    127,
    127,
    127,
    0,
    96,
    2,
    127,
    127,
    0,
    96,
    4,
    127,
    127,
    127,
    127,
    0,
    96,
    1,
    127,
    1,
    127,
    96,
    1,
    127,
    1,
    126,
    96,
    3,
    127,
    127,
    127,
    1,
    126,
    96,
    5,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    6,
    127,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    7,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    4,
    127,
    127,
    127,
    127,
    1,
    127,
    96,
    0,
    1,
    126,
    96,
    0,
    0,
    96,
    8,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    0,
    1,
    127,
    96,
    5,
    127,
    127,
    127,
    127,
    127,
    1,
    127,
    96,
    6,
    127,
    127,
    127,
    127,
    127,
    127,
    1,
    127,
    96,
    3,
    126,
    127,
    127,
    1,
    127,
    96,
    2,
    127,
    127,
    1,
    126,
    2,
    54,
    2,
    3,
    119,
    98,
    103,
    21,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    95,
    110,
    101,
    119,
    0,
    0,
    3,
    119,
    98,
    103,
    18,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    114,
    101,
    116,
    104,
    114,
    111,
    119,
    0,
    2,
    3,
    180,
    1,
    178,
    1,
    15,
    12,
    5,
    5,
    9,
    11,
    3,
    0,
    8,
    3,
    9,
    4,
    1,
    1,
    3,
    3,
    3,
    9,
    9,
    6,
    11,
    9,
    3,
    10,
    8,
    18,
    5,
    5,
    3,
    1,
    17,
    0,
    7,
    5,
    0,
    4,
    0,
    1,
    6,
    8,
    8,
    8,
    8,
    8,
    4,
    5,
    0,
    3,
    2,
    4,
    19,
    2,
    4,
    11,
    0,
    7,
    7,
    16,
    4,
    4,
    3,
    3,
    0,
    10,
    3,
    3,
    0,
    0,
    4,
    10,
    5,
    4,
    5,
    3,
    5,
    2,
    7,
    13,
    3,
    3,
    7,
    0,
    0,
    3,
    6,
    0,
    2,
    5,
    13,
    2,
    5,
    9,
    0,
    6,
    3,
    2,
    3,
    3,
    3,
    3,
    0,
    4,
    0,
    0,
    0,
    8,
    0,
    0,
    10,
    12,
    0,
    6,
    3,
    0,
    0,
    0,
    4,
    4,
    2,
    1,
    0,
    1,
    2,
    6,
    3,
    5,
    20,
    2,
    4,
    1,
    0,
    6,
    2,
    2,
    4,
    7,
    2,
    6,
    2,
    3,
    0,
    1,
    4,
    1,
    4,
    6,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    3,
    0,
    14,
    0,
    0,
    1,
    6,
    7,
    0,
    4,
    1,
    4,
    2,
    7,
    6,
    0,
    6,
    0,
    7,
    7,
    7,
    7,
    2,
    4,
    4,
    5,
    1,
    112,
    1,
    75,
    75,
    5,
    3,
    1,
    0,
    17,
    6,
    9,
    1,
    127,
    1,
    65,
    128,
    128,
    192,
    0,
    11,
    7,
    136,
    1,
    10,
    6,
    109,
    101,
    109,
    111,
    114,
    121,
    2,
    0,
    7,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    0,
    19,
    7,
    105,
    110,
    102,
    108,
    97,
    116,
    101,
    0,
    17,
    4,
    103,
    122,
    105,
    112,
    0,
    23,
    6,
    103,
    117,
    110,
    122,
    105,
    112,
    0,
    11,
    4,
    122,
    108,
    105,
    98,
    0,
    20,
    6,
    117,
    110,
    122,
    108,
    105,
    98,
    0,
    18,
    31,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    97,
    100,
    100,
    95,
    116,
    111,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    112,
    111,
    105,
    110,
    116,
    101,
    114,
    0,
    162,
    1,
    17,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    109,
    97,
    108,
    108,
    111,
    99,
    0,
    125,
    15,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    102,
    114,
    101,
    101,
    0,
    144,
    1,
    9,
    129,
    1,
    1,
    0,
    65,
    1,
    11,
    74,
    122,
    140,
    1,
    167,
    1,
    169,
    1,
    170,
    1,
    146,
    1,
    152,
    1,
    153,
    1,
    33,
    64,
    178,
    1,
    92,
    171,
    1,
    172,
    1,
    74,
    173,
    1,
    170,
    1,
    178,
    1,
    178,
    1,
    117,
    109,
    112,
    164,
    1,
    178,
    1,
    167,
    1,
    174,
    1,
    170,
    1,
    150,
    1,
    115,
    116,
    178,
    1,
    122,
    178,
    1,
    87,
    140,
    1,
    167,
    1,
    169,
    1,
    170,
    1,
    151,
    1,
    132,
    1,
    152,
    1,
    179,
    1,
    178,
    1,
    145,
    1,
    36,
    104,
    176,
    1,
    135,
    1,
    60,
    73,
    118,
    154,
    1,
    134,
    1,
    177,
    1,
    175,
    1,
    178,
    1,
    145,
    1,
    157,
    1,
    105,
    142,
    1,
    160,
    1,
    155,
    1,
    94,
    38,
    159,
    1,
    148,
    1,
    178,
    1,
    176,
    1,
    39,
    69,
    108,
    161,
    1,
    68,
    106,
    10,
    226,
    186,
    4,
    178,
    1,
    217,
    68,
    1,
    36,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    8,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    5,
    32,
    6,
    79,
    4,
    64,
    65,
    127,
    65,
    0,
    32,
    5,
    65,
    127,
    106,
    34,
    9,
    32,
    9,
    32,
    5,
    75,
    27,
    32,
    7,
    65,
    4,
    113,
    34,
    32,
    27,
    34,
    29,
    65,
    1,
    106,
    34,
    38,
    32,
    29,
    113,
    69,
    13,
    1,
    11,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    253,
    1,
    58,
    0,
    4,
    12,
    1,
    11,
    32,
    8,
    32,
    2,
    54,
    2,
    0,
    32,
    8,
    32,
    2,
    32,
    3,
    106,
    34,
    39,
    54,
    2,
    4,
    32,
    1,
    45,
    0,
    152,
    82,
    33,
    10,
    32,
    8,
    32,
    1,
    40,
    2,
    36,
    54,
    2,
    24,
    32,
    8,
    32,
    1,
    41,
    2,
    28,
    55,
    3,
    16,
    32,
    8,
    32,
    1,
    40,
    2,
    0,
    54,
    2,
    12,
    32,
    8,
    32,
    1,
    40,
    2,
    52,
    54,
    2,
    8,
    65,
    1,
    65,
    3,
    32,
    7,
    65,
    1,
    113,
    34,
    35,
    27,
    33,
    40,
    65,
    1,
    65,
    124,
    32,
    7,
    65,
    2,
    113,
    34,
    9,
    27,
    33,
    26,
    65,
    130,
    2,
    65,
    130,
    120,
    32,
    9,
    27,
    33,
    22,
    32,
    1,
    65,
    248,
    207,
    0,
    106,
    33,
    41,
    32,
    1,
    65,
    184,
    25,
    106,
    33,
    36,
    32,
    1,
    65,
    157,
    210,
    0,
    106,
    33,
    42,
    32,
    1,
    65,
    216,
    52,
    106,
    33,
    31,
    32,
    1,
    65,
    184,
    27,
    106,
    33,
    33,
    32,
    1,
    65,
    200,
    26,
    106,
    33,
    43,
    32,
    1,
    65,
    248,
    54,
    106,
    33,
    37,
    32,
    1,
    65,
    56,
    106,
    33,
    30,
    32,
    1,
    65,
    216,
    27,
    106,
    33,
    34,
    32,
    6,
    33,
    15,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    3,
    64,
    65,
    255,
    1,
    33,
    16,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    10,
    34,
    11,
    65,
    255,
    1,
    113,
    14,
    25,
    26,
    25,
    27,
    24,
    23,
    22,
    17,
    16,
    15,
    14,
    13,
    12,
    0,
    10,
    8,
    7,
    6,
    21,
    18,
    4,
    3,
    9,
    5,
    2,
    1,
    30,
    11,
    32,
    8,
    40,
    2,
    4,
    34,
    20,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    107,
    34,
    10,
    65,
    4,
    73,
    13,
    10,
    32,
    9,
    33,
    17,
    2,
    64,
    3,
    64,
    32,
    5,
    32,
    15,
    107,
    34,
    12,
    65,
    1,
    77,
    13,
    12,
    32,
    12,
    65,
    131,
    2,
    73,
    32,
    10,
    65,
    13,
    77,
    114,
    69,
    4,
    64,
    32,
    8,
    40,
    2,
    24,
    33,
    27,
    32,
    8,
    40,
    2,
    20,
    33,
    19,
    32,
    8,
    40,
    2,
    16,
    33,
    28,
    32,
    8,
    40,
    2,
    12,
    33,
    17,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    2,
    64,
    3,
    64,
    65,
    12,
    33,
    10,
    32,
    20,
    32,
    9,
    107,
    65,
    14,
    73,
    13,
    1,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    17,
    65,
    14,
    77,
    4,
    64,
    32,
    20,
    32,
    21,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    45,
    32,
    21,
    47,
    0,
    0,
    32,
    8,
    32,
    21,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    17,
    116,
    32,
    13,
    114,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    17,
    65,
    16,
    106,
    33,
    17,
    11,
    32,
    30,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    12,
    65,
    127,
    115,
    106,
    34,
    12,
    65,
    191,
    4,
    75,
    13,
    47,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    12,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    12,
    65,
    9,
    118,
    34,
    11,
    13,
    0,
    65,
    34,
    33,
    11,
    12,
    1,
    11,
    32,
    17,
    32,
    11,
    107,
    33,
    17,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    33,
    13,
    65,
    128,
    2,
    33,
    19,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    12,
    65,
    128,
    2,
    113,
    69,
    4,
    64,
    2,
    64,
    2,
    64,
    32,
    17,
    65,
    14,
    77,
    4,
    64,
    32,
    20,
    32,
    25,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    52,
    32,
    25,
    47,
    0,
    0,
    32,
    8,
    32,
    25,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    17,
    116,
    32,
    13,
    114,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    17,
    65,
    16,
    106,
    33,
    17,
    11,
    32,
    30,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    14,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    14,
    65,
    127,
    115,
    106,
    34,
    14,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    14,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    14,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    14,
    65,
    9,
    118,
    34,
    11,
    13,
    1,
    65,
    34,
    33,
    11,
    32,
    12,
    33,
    19,
    12,
    8,
    11,
    32,
    14,
    65,
    192,
    4,
    65,
    248,
    176,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    15,
    32,
    5,
    79,
    13,
    51,
    32,
    17,
    32,
    11,
    107,
    33,
    17,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    33,
    13,
    32,
    4,
    32,
    15,
    106,
    32,
    12,
    58,
    0,
    0,
    32,
    15,
    65,
    1,
    106,
    33,
    11,
    32,
    14,
    65,
    128,
    2,
    113,
    69,
    13,
    1,
    32,
    11,
    33,
    15,
    32,
    14,
    33,
    12,
    11,
    32,
    12,
    65,
    255,
    3,
    113,
    34,
    14,
    65,
    128,
    2,
    71,
    13,
    1,
    65,
    20,
    33,
    10,
    12,
    9,
    11,
    32,
    11,
    32,
    5,
    79,
    13,
    1,
    32,
    4,
    32,
    11,
    106,
    32,
    14,
    58,
    0,
    0,
    32,
    5,
    32,
    15,
    65,
    2,
    106,
    34,
    15,
    107,
    65,
    131,
    2,
    79,
    13,
    5,
    32,
    12,
    33,
    19,
    12,
    8,
    11,
    32,
    14,
    65,
    157,
    2,
    75,
    4,
    64,
    32,
    14,
    33,
    19,
    65,
    32,
    12,
    3,
    11,
    32,
    17,
    65,
    14,
    77,
    4,
    64,
    32,
    20,
    32,
    24,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    47,
    32,
    24,
    47,
    0,
    0,
    32,
    8,
    32,
    24,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    17,
    116,
    32,
    13,
    114,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    17,
    65,
    16,
    106,
    33,
    17,
    11,
    32,
    12,
    65,
    127,
    106,
    65,
    31,
    113,
    34,
    12,
    65,
    1,
    116,
    65,
    216,
    181,
    192,
    0,
    106,
    47,
    1,
    0,
    33,
    19,
    2,
    64,
    32,
    12,
    65,
    184,
    181,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    27,
    69,
    13,
    0,
    32,
    13,
    32,
    27,
    65,
    31,
    113,
    34,
    12,
    118,
    33,
    11,
    32,
    13,
    65,
    127,
    32,
    12,
    116,
    65,
    127,
    115,
    113,
    32,
    19,
    106,
    33,
    19,
    32,
    17,
    32,
    27,
    107,
    34,
    12,
    65,
    14,
    75,
    4,
    64,
    32,
    12,
    33,
    17,
    32,
    11,
    33,
    13,
    12,
    1,
    11,
    32,
    20,
    32,
    23,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    47,
    32,
    23,
    47,
    0,
    0,
    32,
    8,
    32,
    23,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    12,
    65,
    16,
    106,
    33,
    17,
    32,
    12,
    116,
    32,
    11,
    114,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    11,
    32,
    34,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    12,
    65,
    127,
    115,
    106,
    34,
    12,
    65,
    191,
    4,
    75,
    13,
    49,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    12,
    65,
    1,
    116,
    106,
    65,
    216,
    43,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    12,
    65,
    9,
    118,
    34,
    11,
    13,
    1,
    65,
    34,
    33,
    11,
    12,
    3,
    11,
    32,
    11,
    32,
    5,
    65,
    196,
    185,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    17,
    32,
    11,
    107,
    33,
    17,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    33,
    14,
    2,
    64,
    32,
    12,
    65,
    255,
    3,
    113,
    34,
    12,
    65,
    29,
    77,
    4,
    64,
    32,
    12,
    65,
    1,
    116,
    65,
    184,
    182,
    192,
    0,
    106,
    47,
    1,
    0,
    33,
    28,
    2,
    64,
    32,
    12,
    65,
    152,
    182,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    27,
    69,
    4,
    64,
    32,
    14,
    33,
    13,
    12,
    1,
    11,
    32,
    17,
    65,
    14,
    75,
    4,
    127,
    32,
    17,
    5,
    32,
    20,
    32,
    18,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    48,
    32,
    18,
    47,
    0,
    0,
    32,
    8,
    32,
    18,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    17,
    116,
    32,
    14,
    114,
    33,
    14,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    17,
    65,
    16,
    106,
    11,
    32,
    27,
    107,
    33,
    17,
    32,
    14,
    32,
    27,
    65,
    31,
    113,
    34,
    12,
    118,
    33,
    13,
    32,
    14,
    65,
    127,
    32,
    12,
    116,
    65,
    127,
    115,
    113,
    32,
    28,
    106,
    33,
    28,
    11,
    32,
    32,
    65,
    0,
    32,
    28,
    32,
    15,
    75,
    27,
    13,
    1,
    32,
    4,
    32,
    5,
    32,
    15,
    32,
    28,
    32,
    19,
    32,
    29,
    16,
    71,
    32,
    5,
    32,
    15,
    32,
    19,
    106,
    34,
    15,
    107,
    65,
    131,
    2,
    79,
    13,
    6,
    12,
    7,
    11,
    65,
    33,
    33,
    11,
    32,
    14,
    33,
    13,
    12,
    2,
    11,
    65,
    29,
    11,
    33,
    11,
    11,
    32,
    8,
    32,
    27,
    54,
    2,
    24,
    32,
    8,
    32,
    19,
    54,
    2,
    20,
    32,
    8,
    32,
    28,
    54,
    2,
    16,
    32,
    8,
    32,
    17,
    54,
    2,
    12,
    32,
    8,
    32,
    13,
    54,
    2,
    8,
    12,
    36,
    11,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    12,
    33,
    19,
    32,
    20,
    32,
    9,
    107,
    65,
    14,
    79,
    13,
    0,
    11,
    11,
    11,
    32,
    8,
    32,
    27,
    54,
    2,
    24,
    32,
    8,
    32,
    19,
    54,
    2,
    20,
    32,
    8,
    32,
    28,
    54,
    2,
    16,
    32,
    8,
    32,
    17,
    54,
    2,
    12,
    32,
    8,
    32,
    13,
    54,
    2,
    8,
    12,
    30,
    11,
    2,
    64,
    2,
    64,
    32,
    8,
    40,
    2,
    12,
    34,
    14,
    65,
    15,
    79,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    12,
    12,
    1,
    11,
    32,
    20,
    32,
    17,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    39,
    32,
    17,
    47,
    0,
    0,
    33,
    12,
    32,
    8,
    32,
    17,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    8,
    32,
    14,
    65,
    16,
    106,
    34,
    10,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    12,
    32,
    14,
    116,
    114,
    34,
    12,
    54,
    2,
    8,
    32,
    9,
    33,
    17,
    32,
    10,
    33,
    14,
    11,
    2,
    64,
    32,
    30,
    32,
    12,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    13,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    12,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    13,
    65,
    127,
    115,
    106,
    34,
    10,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    10,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    13,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    13,
    65,
    9,
    118,
    34,
    11,
    13,
    1,
    65,
    34,
    33,
    10,
    12,
    31,
    11,
    32,
    10,
    65,
    192,
    4,
    65,
    248,
    176,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    32,
    14,
    32,
    11,
    107,
    34,
    18,
    54,
    2,
    12,
    32,
    8,
    32,
    12,
    32,
    11,
    65,
    31,
    113,
    118,
    34,
    14,
    54,
    2,
    8,
    32,
    8,
    32,
    13,
    54,
    2,
    20,
    65,
    21,
    33,
    10,
    32,
    13,
    65,
    128,
    2,
    113,
    13,
    29,
    2,
    64,
    2,
    64,
    32,
    18,
    65,
    14,
    75,
    4,
    64,
    32,
    18,
    33,
    21,
    12,
    1,
    11,
    32,
    20,
    32,
    17,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    39,
    32,
    17,
    47,
    0,
    0,
    33,
    12,
    32,
    8,
    32,
    18,
    65,
    16,
    106,
    34,
    21,
    54,
    2,
    12,
    32,
    8,
    32,
    17,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    8,
    32,
    12,
    32,
    18,
    116,
    32,
    14,
    114,
    34,
    14,
    54,
    2,
    8,
    32,
    9,
    33,
    17,
    11,
    32,
    30,
    32,
    14,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    14,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    12,
    65,
    127,
    115,
    106,
    34,
    12,
    65,
    191,
    4,
    75,
    13,
    41,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    12,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    12,
    65,
    9,
    118,
    34,
    11,
    13,
    0,
    65,
    34,
    33,
    10,
    12,
    30,
    11,
    32,
    8,
    32,
    21,
    32,
    11,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    14,
    32,
    11,
    65,
    31,
    113,
    118,
    54,
    2,
    8,
    32,
    15,
    32,
    5,
    73,
    4,
    64,
    32,
    4,
    32,
    15,
    106,
    32,
    13,
    58,
    0,
    0,
    32,
    15,
    65,
    1,
    106,
    33,
    11,
    32,
    12,
    65,
    128,
    2,
    113,
    4,
    64,
    32,
    8,
    32,
    12,
    54,
    2,
    20,
    32,
    11,
    33,
    15,
    12,
    31,
    11,
    32,
    11,
    32,
    5,
    79,
    13,
    2,
    32,
    4,
    32,
    11,
    106,
    32,
    12,
    58,
    0,
    0,
    32,
    15,
    65,
    2,
    106,
    33,
    15,
    32,
    20,
    32,
    17,
    107,
    34,
    10,
    65,
    4,
    79,
    13,
    1,
    12,
    13,
    11,
    11,
    12,
    38,
    11,
    32,
    11,
    32,
    5,
    65,
    196,
    185,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    0,
    33,
    16,
    12,
    28,
    11,
    32,
    8,
    40,
    2,
    20,
    33,
    14,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    3,
    64,
    32,
    14,
    65,
    3,
    75,
    4,
    64,
    65,
    24,
    33,
    10,
    12,
    27,
    11,
    2,
    127,
    32,
    8,
    2,
    127,
    32,
    8,
    40,
    2,
    12,
    34,
    11,
    4,
    64,
    3,
    64,
    32,
    11,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    65,
    255,
    1,
    113,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    116,
    114,
    54,
    2,
    12,
    32,
    8,
    32,
    11,
    65,
    120,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    8,
    118,
    54,
    2,
    8,
    32,
    14,
    65,
    1,
    106,
    12,
    3,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    12,
    2,
    11,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    4,
    64,
    65,
    23,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    30,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    116,
    114,
    54,
    2,
    12,
    32,
    14,
    65,
    1,
    106,
    11,
    34,
    14,
    54,
    2,
    20,
    65,
    0,
    33,
    13,
    65,
    0,
    11,
    33,
    10,
    65,
    23,
    33,
    11,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    26,
    27,
    0,
    11,
    0,
    11,
    65,
    3,
    33,
    10,
    32,
    1,
    40,
    2,
    16,
    69,
    13,
    24,
    32,
    8,
    40,
    2,
    12,
    34,
    11,
    65,
    7,
    113,
    33,
    16,
    32,
    8,
    40,
    2,
    4,
    33,
    9,
    3,
    64,
    2,
    64,
    32,
    11,
    32,
    16,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    32,
    16,
    107,
    34,
    11,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    16,
    118,
    54,
    2,
    8,
    32,
    8,
    40,
    2,
    0,
    33,
    14,
    12,
    1,
    11,
    2,
    127,
    32,
    9,
    32,
    8,
    40,
    2,
    0,
    34,
    10,
    70,
    4,
    64,
    32,
    9,
    33,
    14,
    32,
    22,
    12,
    1,
    11,
    32,
    8,
    32,
    10,
    65,
    1,
    106,
    34,
    14,
    54,
    2,
    0,
    32,
    10,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    12,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    12,
    33,
    11,
    65,
    0,
    11,
    65,
    2,
    113,
    69,
    13,
    1,
    11,
    11,
    32,
    8,
    32,
    11,
    32,
    14,
    32,
    9,
    107,
    32,
    3,
    106,
    34,
    9,
    32,
    11,
    65,
    3,
    118,
    34,
    10,
    32,
    10,
    32,
    9,
    75,
    27,
    34,
    10,
    65,
    3,
    116,
    107,
    34,
    12,
    54,
    2,
    12,
    32,
    9,
    32,
    10,
    107,
    34,
    9,
    32,
    3,
    77,
    4,
    64,
    32,
    8,
    32,
    39,
    54,
    2,
    4,
    32,
    8,
    32,
    2,
    32,
    9,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    65,
    127,
    32,
    12,
    65,
    31,
    113,
    116,
    65,
    127,
    115,
    113,
    54,
    2,
    8,
    65,
    24,
    33,
    10,
    32,
    35,
    69,
    13,
    25,
    32,
    8,
    65,
    0,
    54,
    2,
    20,
    65,
    23,
    33,
    10,
    12,
    25,
    11,
    32,
    9,
    32,
    3,
    65,
    248,
    182,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    8,
    40,
    2,
    16,
    33,
    12,
    3,
    64,
    32,
    5,
    32,
    15,
    107,
    34,
    9,
    69,
    4,
    64,
    65,
    19,
    33,
    11,
    65,
    2,
    33,
    16,
    12,
    27,
    11,
    32,
    4,
    32,
    5,
    32,
    15,
    32,
    12,
    107,
    32,
    29,
    113,
    32,
    15,
    32,
    8,
    40,
    2,
    20,
    34,
    10,
    32,
    9,
    32,
    9,
    32,
    10,
    75,
    27,
    34,
    9,
    32,
    29,
    16,
    25,
    32,
    8,
    32,
    10,
    32,
    9,
    107,
    34,
    11,
    54,
    2,
    20,
    32,
    9,
    32,
    15,
    106,
    33,
    15,
    65,
    12,
    33,
    10,
    32,
    11,
    13,
    0,
    11,
    12,
    23,
    11,
    32,
    8,
    40,
    2,
    16,
    33,
    12,
    32,
    32,
    4,
    64,
    65,
    29,
    33,
    10,
    32,
    15,
    32,
    12,
    73,
    13,
    23,
    11,
    2,
    64,
    32,
    8,
    40,
    2,
    20,
    34,
    10,
    32,
    15,
    106,
    34,
    9,
    32,
    5,
    75,
    13,
    0,
    32,
    15,
    32,
    12,
    107,
    32,
    29,
    113,
    34,
    11,
    32,
    15,
    79,
    65,
    0,
    32,
    11,
    32,
    15,
    107,
    32,
    10,
    73,
    27,
    13,
    0,
    32,
    4,
    32,
    5,
    32,
    15,
    32,
    12,
    32,
    10,
    32,
    29,
    16,
    71,
    65,
    12,
    33,
    10,
    32,
    9,
    33,
    15,
    12,
    23,
    11,
    65,
    19,
    65,
    12,
    32,
    10,
    27,
    33,
    10,
    12,
    22,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    32,
    8,
    40,
    2,
    4,
    33,
    14,
    32,
    8,
    40,
    2,
    24,
    33,
    12,
    3,
    64,
    32,
    11,
    32,
    12,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    32,
    12,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    32,
    12,
    65,
    31,
    113,
    34,
    10,
    118,
    54,
    2,
    8,
    32,
    8,
    32,
    8,
    40,
    2,
    16,
    32,
    9,
    65,
    127,
    32,
    10,
    116,
    65,
    127,
    115,
    113,
    106,
    54,
    2,
    16,
    65,
    22,
    33,
    10,
    12,
    23,
    11,
    2,
    127,
    32,
    22,
    32,
    14,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    114,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    16,
    33,
    11,
    12,
    22,
    11,
    2,
    64,
    32,
    8,
    40,
    2,
    12,
    34,
    16,
    65,
    15,
    79,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    12,
    1,
    11,
    32,
    8,
    40,
    2,
    4,
    34,
    17,
    32,
    8,
    40,
    2,
    0,
    34,
    14,
    107,
    65,
    1,
    77,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    32,
    16,
    33,
    12,
    3,
    64,
    2,
    64,
    2,
    64,
    32,
    34,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    0,
    78,
    4,
    64,
    32,
    10,
    65,
    9,
    118,
    65,
    127,
    106,
    32,
    12,
    79,
    13,
    1,
    32,
    12,
    33,
    16,
    12,
    5,
    11,
    65,
    11,
    33,
    11,
    32,
    12,
    65,
    11,
    73,
    13,
    0,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    127,
    106,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    9,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    1,
    32,
    9,
    65,
    1,
    116,
    106,
    65,
    216,
    43,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    74,
    4,
    64,
    32,
    12,
    33,
    16,
    12,
    6,
    11,
    32,
    12,
    32,
    11,
    65,
    1,
    106,
    34,
    11,
    79,
    13,
    0,
    11,
    11,
    32,
    14,
    32,
    17,
    70,
    4,
    64,
    65,
    15,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    26,
    11,
    32,
    8,
    32,
    14,
    65,
    1,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    14,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    12,
    65,
    8,
    106,
    34,
    16,
    54,
    2,
    12,
    32,
    8,
    32,
    10,
    32,
    12,
    65,
    31,
    113,
    116,
    32,
    13,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    9,
    33,
    14,
    32,
    16,
    34,
    12,
    65,
    15,
    73,
    13,
    1,
    12,
    3,
    11,
    11,
    32,
    9,
    65,
    192,
    4,
    65,
    152,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    14,
    47,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    14,
    65,
    2,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    16,
    65,
    16,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    16,
    116,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    9,
    33,
    16,
    11,
    2,
    64,
    32,
    34,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    9,
    65,
    191,
    4,
    75,
    13,
    34,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    9,
    65,
    1,
    116,
    106,
    65,
    216,
    43,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    13,
    0,
    11,
    32,
    10,
    33,
    12,
    12,
    1,
    11,
    32,
    10,
    65,
    255,
    3,
    113,
    33,
    12,
    32,
    10,
    65,
    9,
    118,
    33,
    11,
    12,
    0,
    11,
    65,
    34,
    33,
    10,
    32,
    11,
    69,
    13,
    20,
    32,
    8,
    32,
    16,
    32,
    11,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    54,
    2,
    8,
    65,
    33,
    33,
    10,
    32,
    12,
    65,
    29,
    74,
    13,
    20,
    32,
    8,
    32,
    12,
    65,
    31,
    113,
    34,
    9,
    65,
    1,
    116,
    65,
    184,
    182,
    192,
    0,
    106,
    47,
    1,
    0,
    54,
    2,
    16,
    32,
    8,
    32,
    9,
    65,
    152,
    182,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    9,
    54,
    2,
    24,
    65,
    16,
    65,
    22,
    32,
    9,
    27,
    33,
    10,
    12,
    20,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    32,
    8,
    40,
    2,
    4,
    33,
    14,
    32,
    8,
    40,
    2,
    24,
    33,
    12,
    3,
    64,
    32,
    11,
    32,
    12,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    32,
    12,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    32,
    12,
    65,
    31,
    113,
    34,
    10,
    118,
    54,
    2,
    8,
    32,
    8,
    32,
    8,
    40,
    2,
    20,
    32,
    9,
    65,
    127,
    32,
    10,
    116,
    65,
    127,
    115,
    113,
    106,
    54,
    2,
    20,
    65,
    15,
    33,
    10,
    12,
    21,
    11,
    2,
    127,
    32,
    22,
    32,
    14,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    114,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    14,
    33,
    11,
    12,
    20,
    11,
    32,
    8,
    32,
    8,
    40,
    2,
    20,
    34,
    12,
    65,
    255,
    3,
    113,
    34,
    9,
    54,
    2,
    20,
    65,
    20,
    33,
    10,
    32,
    9,
    65,
    128,
    2,
    70,
    13,
    18,
    65,
    32,
    33,
    10,
    32,
    9,
    65,
    157,
    2,
    75,
    13,
    18,
    32,
    8,
    32,
    12,
    65,
    127,
    106,
    65,
    31,
    113,
    34,
    9,
    65,
    1,
    116,
    65,
    216,
    181,
    192,
    0,
    106,
    47,
    1,
    0,
    54,
    2,
    20,
    32,
    8,
    32,
    9,
    65,
    184,
    181,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    9,
    54,
    2,
    24,
    65,
    14,
    65,
    15,
    32,
    9,
    27,
    33,
    10,
    12,
    18,
    11,
    65,
    21,
    33,
    10,
    32,
    8,
    40,
    2,
    20,
    34,
    9,
    65,
    255,
    1,
    75,
    13,
    17,
    32,
    5,
    32,
    15,
    70,
    13,
    8,
    32,
    15,
    32,
    5,
    73,
    4,
    64,
    32,
    4,
    32,
    15,
    106,
    32,
    9,
    58,
    0,
    0,
    32,
    15,
    65,
    1,
    106,
    33,
    15,
    65,
    12,
    33,
    10,
    12,
    18,
    11,
    12,
    27,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    8,
    40,
    2,
    12,
    34,
    16,
    65,
    15,
    79,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    12,
    1,
    11,
    32,
    10,
    65,
    1,
    77,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    32,
    16,
    33,
    12,
    3,
    64,
    2,
    64,
    2,
    64,
    32,
    30,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    0,
    78,
    4,
    64,
    32,
    10,
    65,
    9,
    118,
    65,
    127,
    106,
    32,
    12,
    79,
    13,
    1,
    32,
    12,
    33,
    16,
    12,
    5,
    11,
    65,
    11,
    33,
    11,
    32,
    12,
    65,
    11,
    73,
    13,
    0,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    127,
    106,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    10,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    1,
    32,
    10,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    74,
    4,
    64,
    32,
    12,
    33,
    16,
    12,
    6,
    11,
    32,
    12,
    32,
    11,
    65,
    1,
    106,
    34,
    11,
    79,
    13,
    0,
    11,
    11,
    32,
    9,
    32,
    20,
    70,
    4,
    64,
    65,
    12,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    25,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    34,
    10,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    9,
    32,
    8,
    32,
    12,
    65,
    8,
    106,
    34,
    16,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    32,
    12,
    65,
    31,
    113,
    116,
    32,
    13,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    10,
    33,
    9,
    32,
    16,
    34,
    12,
    65,
    15,
    73,
    13,
    1,
    12,
    3,
    11,
    11,
    32,
    10,
    65,
    192,
    4,
    65,
    152,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    20,
    32,
    9,
    107,
    34,
    10,
    65,
    1,
    77,
    13,
    1,
    32,
    9,
    47,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    9,
    65,
    2,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    16,
    65,
    16,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    16,
    116,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    9,
    33,
    16,
    11,
    32,
    30,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    74,
    13,
    1,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    9,
    65,
    191,
    4,
    75,
    13,
    31,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    9,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    13,
    0,
    11,
    32,
    10,
    33,
    12,
    12,
    2,
    11,
    65,
    2,
    32,
    10,
    65,
    136,
    177,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    10,
    65,
    255,
    3,
    113,
    33,
    12,
    32,
    10,
    65,
    9,
    118,
    33,
    11,
    12,
    0,
    11,
    65,
    34,
    33,
    10,
    32,
    11,
    69,
    13,
    16,
    32,
    8,
    32,
    12,
    54,
    2,
    20,
    32,
    8,
    32,
    16,
    32,
    11,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    54,
    2,
    8,
    65,
    13,
    33,
    10,
    12,
    16,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    32,
    8,
    40,
    2,
    4,
    33,
    14,
    32,
    8,
    40,
    2,
    24,
    33,
    12,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    11,
    32,
    12,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    32,
    12,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    11,
    32,
    12,
    65,
    31,
    113,
    34,
    14,
    118,
    54,
    2,
    8,
    32,
    8,
    65,
    11,
    54,
    2,
    40,
    32,
    8,
    66,
    131,
    128,
    128,
    128,
    48,
    55,
    2,
    32,
    2,
    64,
    32,
    8,
    40,
    2,
    16,
    34,
    10,
    65,
    3,
    113,
    34,
    9,
    65,
    3,
    71,
    4,
    64,
    32,
    8,
    65,
    32,
    106,
    32,
    9,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    33,
    16,
    65,
    0,
    33,
    12,
    32,
    8,
    40,
    2,
    20,
    33,
    9,
    32,
    10,
    65,
    16,
    70,
    4,
    64,
    32,
    9,
    65,
    127,
    106,
    34,
    10,
    65,
    200,
    3,
    75,
    13,
    2,
    32,
    1,
    32,
    10,
    106,
    65,
    157,
    210,
    0,
    106,
    45,
    0,
    0,
    33,
    12,
    11,
    32,
    9,
    32,
    16,
    32,
    11,
    65,
    127,
    32,
    14,
    116,
    65,
    127,
    115,
    113,
    106,
    34,
    11,
    106,
    34,
    10,
    32,
    9,
    73,
    13,
    4,
    32,
    10,
    65,
    202,
    3,
    79,
    13,
    5,
    32,
    11,
    4,
    64,
    32,
    1,
    32,
    9,
    106,
    65,
    157,
    210,
    0,
    106,
    32,
    12,
    32,
    11,
    16,
    131,
    1,
    26,
    11,
    32,
    8,
    32,
    10,
    54,
    2,
    20,
    65,
    10,
    33,
    10,
    12,
    21,
    11,
    65,
    3,
    65,
    3,
    65,
    164,
    184,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    10,
    65,
    201,
    3,
    65,
    180,
    184,
    192,
    0,
    16,
    98,
    0,
    11,
    2,
    127,
    32,
    22,
    32,
    14,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    114,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    11,
    33,
    11,
    12,
    18,
    11,
    32,
    9,
    32,
    10,
    65,
    196,
    184,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    10,
    65,
    201,
    3,
    65,
    196,
    184,
    192,
    0,
    16,
    99,
    0,
    11,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    8,
    40,
    2,
    20,
    34,
    16,
    32,
    1,
    40,
    2,
    44,
    34,
    10,
    32,
    1,
    40,
    2,
    40,
    34,
    9,
    106,
    34,
    12,
    73,
    4,
    64,
    32,
    8,
    40,
    2,
    12,
    34,
    14,
    65,
    15,
    79,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    12,
    7,
    11,
    32,
    8,
    40,
    2,
    4,
    34,
    17,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    107,
    65,
    1,
    75,
    13,
    1,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    32,
    14,
    33,
    12,
    3,
    64,
    2,
    64,
    2,
    64,
    32,
    37,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    0,
    78,
    4,
    64,
    32,
    10,
    65,
    9,
    118,
    65,
    127,
    106,
    32,
    12,
    79,
    13,
    1,
    32,
    12,
    33,
    14,
    12,
    10,
    11,
    65,
    11,
    33,
    11,
    32,
    12,
    65,
    11,
    73,
    13,
    0,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    127,
    106,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    10,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    1,
    32,
    10,
    65,
    1,
    116,
    106,
    65,
    248,
    198,
    0,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    74,
    4,
    64,
    32,
    12,
    33,
    14,
    12,
    11,
    11,
    32,
    12,
    32,
    11,
    65,
    1,
    106,
    34,
    11,
    79,
    13,
    0,
    11,
    11,
    32,
    9,
    32,
    17,
    70,
    4,
    64,
    65,
    10,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    27,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    34,
    10,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    9,
    32,
    8,
    32,
    12,
    65,
    8,
    106,
    34,
    14,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    32,
    12,
    65,
    31,
    113,
    116,
    32,
    13,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    10,
    33,
    9,
    32,
    14,
    34,
    12,
    65,
    15,
    73,
    13,
    1,
    12,
    8,
    11,
    11,
    32,
    10,
    65,
    192,
    4,
    65,
    152,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    32,
    16,
    71,
    4,
    64,
    65,
    26,
    33,
    10,
    12,
    23,
    11,
    32,
    9,
    65,
    161,
    2,
    79,
    13,
    1,
    32,
    36,
    32,
    42,
    32,
    9,
    16,
    121,
    26,
    32,
    10,
    65,
    161,
    2,
    79,
    13,
    2,
    32,
    16,
    32,
    9,
    73,
    13,
    3,
    32,
    16,
    65,
    202,
    3,
    79,
    13,
    4,
    32,
    31,
    32,
    1,
    32,
    9,
    106,
    65,
    157,
    210,
    0,
    106,
    32,
    10,
    16,
    121,
    26,
    32,
    1,
    32,
    1,
    40,
    2,
    20,
    65,
    127,
    106,
    54,
    2,
    20,
    32,
    1,
    32,
    8,
    65,
    8,
    106,
    16,
    9,
    34,
    11,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    12,
    6,
    11,
    32,
    9,
    47,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    9,
    65,
    2,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    14,
    65,
    16,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    14,
    116,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    9,
    33,
    14,
    12,
    4,
    11,
    32,
    9,
    65,
    160,
    2,
    65,
    136,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    10,
    65,
    160,
    2,
    65,
    152,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    9,
    32,
    16,
    65,
    168,
    183,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    16,
    65,
    201,
    3,
    65,
    168,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    2,
    64,
    32,
    37,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    9,
    65,
    191,
    4,
    75,
    13,
    30,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    9,
    65,
    1,
    116,
    106,
    65,
    248,
    198,
    0,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    13,
    0,
    11,
    32,
    10,
    33,
    12,
    12,
    1,
    11,
    32,
    10,
    65,
    255,
    3,
    113,
    33,
    12,
    32,
    10,
    65,
    9,
    118,
    33,
    11,
    12,
    0,
    11,
    32,
    11,
    69,
    4,
    64,
    65,
    34,
    33,
    10,
    12,
    17,
    11,
    32,
    8,
    32,
    14,
    32,
    11,
    107,
    54,
    2,
    12,
    65,
    31,
    33,
    10,
    32,
    8,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    54,
    2,
    8,
    32,
    8,
    32,
    12,
    54,
    2,
    16,
    2,
    64,
    2,
    64,
    32,
    12,
    65,
    15,
    77,
    4,
    64,
    32,
    16,
    65,
    201,
    3,
    79,
    13,
    1,
    32,
    1,
    32,
    16,
    106,
    65,
    157,
    210,
    0,
    106,
    32,
    12,
    58,
    0,
    0,
    32,
    8,
    32,
    16,
    65,
    1,
    106,
    54,
    2,
    20,
    65,
    0,
    33,
    11,
    12,
    3,
    11,
    65,
    0,
    32,
    12,
    65,
    16,
    70,
    32,
    16,
    27,
    13,
    18,
    32,
    8,
    65,
    7,
    54,
    2,
    40,
    32,
    8,
    66,
    130,
    128,
    128,
    128,
    48,
    55,
    2,
    32,
    32,
    12,
    65,
    112,
    106,
    34,
    9,
    65,
    2,
    75,
    13,
    1,
    32,
    8,
    32,
    8,
    65,
    32,
    106,
    32,
    9,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    54,
    2,
    24,
    65,
    11,
    33,
    10,
    12,
    18,
    11,
    32,
    16,
    65,
    201,
    3,
    65,
    132,
    184,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    9,
    65,
    3,
    65,
    148,
    184,
    192,
    0,
    16,
    98,
    0,
    11,
    2,
    64,
    32,
    11,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    16,
    0,
    1,
    11,
    11,
    65,
    10,
    33,
    11,
    12,
    15,
    11,
    3,
    64,
    2,
    127,
    32,
    8,
    40,
    2,
    20,
    34,
    10,
    32,
    1,
    40,
    2,
    48,
    73,
    4,
    64,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    2,
    64,
    3,
    64,
    32,
    11,
    65,
    3,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    65,
    125,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    65,
    3,
    118,
    54,
    2,
    8,
    32,
    10,
    65,
    19,
    79,
    13,
    2,
    32,
    1,
    32,
    10,
    65,
    222,
    183,
    192,
    0,
    106,
    45,
    0,
    0,
    106,
    65,
    248,
    207,
    0,
    106,
    32,
    9,
    65,
    7,
    113,
    58,
    0,
    0,
    32,
    8,
    32,
    10,
    65,
    1,
    106,
    54,
    2,
    20,
    65,
    0,
    33,
    13,
    65,
    0,
    12,
    4,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    14,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    14,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    12,
    2,
    11,
    32,
    10,
    65,
    19,
    65,
    244,
    183,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    65,
    19,
    54,
    2,
    48,
    32,
    1,
    32,
    8,
    65,
    8,
    106,
    16,
    9,
    34,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    11,
    33,
    10,
    2,
    64,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    15,
    0,
    1,
    11,
    11,
    65,
    9,
    33,
    11,
    12,
    14,
    11,
    32,
    8,
    40,
    2,
    20,
    33,
    9,
    32,
    8,
    40,
    2,
    4,
    33,
    14,
    3,
    64,
    32,
    9,
    65,
    3,
    79,
    4,
    64,
    32,
    41,
    65,
    0,
    65,
    160,
    2,
    16,
    131,
    1,
    26,
    32,
    8,
    65,
    0,
    54,
    2,
    20,
    65,
    9,
    33,
    10,
    12,
    14,
    11,
    32,
    8,
    65,
    4,
    54,
    2,
    40,
    32,
    8,
    66,
    133,
    128,
    128,
    128,
    208,
    0,
    55,
    2,
    32,
    32,
    8,
    65,
    32,
    106,
    32,
    9,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    33,
    12,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    2,
    127,
    3,
    64,
    32,
    11,
    32,
    12,
    79,
    4,
    64,
    32,
    1,
    32,
    9,
    65,
    2,
    116,
    106,
    65,
    40,
    106,
    32,
    9,
    65,
    1,
    116,
    65,
    216,
    183,
    192,
    0,
    106,
    47,
    1,
    0,
    32,
    8,
    40,
    2,
    8,
    34,
    10,
    65,
    127,
    32,
    12,
    65,
    31,
    113,
    34,
    16,
    116,
    65,
    127,
    115,
    113,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    11,
    32,
    12,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    34,
    9,
    54,
    2,
    20,
    32,
    8,
    32,
    10,
    32,
    16,
    118,
    54,
    2,
    8,
    65,
    0,
    33,
    13,
    65,
    0,
    12,
    2,
    11,
    2,
    127,
    32,
    22,
    32,
    14,
    32,
    8,
    40,
    2,
    0,
    34,
    10,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    10,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    10,
    45,
    0,
    0,
    33,
    16,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    10,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    16,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    10,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    11,
    33,
    10,
    2,
    64,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    14,
    0,
    1,
    11,
    11,
    65,
    8,
    33,
    11,
    12,
    13,
    11,
    32,
    8,
    40,
    2,
    4,
    34,
    16,
    32,
    8,
    40,
    2,
    0,
    34,
    11,
    107,
    34,
    12,
    69,
    4,
    64,
    65,
    7,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    13,
    11,
    2,
    64,
    2,
    64,
    32,
    12,
    32,
    8,
    40,
    2,
    20,
    34,
    14,
    32,
    12,
    32,
    5,
    32,
    15,
    107,
    34,
    9,
    32,
    9,
    32,
    12,
    75,
    27,
    34,
    9,
    32,
    9,
    32,
    14,
    75,
    27,
    34,
    10,
    79,
    4,
    64,
    32,
    10,
    32,
    15,
    106,
    34,
    9,
    32,
    10,
    73,
    13,
    1,
    32,
    9,
    32,
    5,
    75,
    13,
    2,
    32,
    4,
    32,
    15,
    106,
    32,
    11,
    32,
    10,
    16,
    121,
    26,
    2,
    64,
    32,
    12,
    32,
    10,
    65,
    127,
    106,
    77,
    4,
    64,
    32,
    8,
    32,
    16,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    8,
    32,
    10,
    32,
    11,
    106,
    54,
    2,
    0,
    11,
    32,
    8,
    32,
    14,
    32,
    10,
    107,
    54,
    2,
    20,
    65,
    6,
    33,
    10,
    32,
    9,
    33,
    15,
    12,
    14,
    11,
    32,
    10,
    32,
    12,
    65,
    184,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    15,
    32,
    9,
    65,
    212,
    185,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    9,
    32,
    5,
    65,
    212,
    185,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    20,
    33,
    10,
    32,
    8,
    40,
    2,
    20,
    69,
    13,
    10,
    65,
    7,
    33,
    10,
    32,
    5,
    32,
    15,
    71,
    13,
    10,
    12,
    1,
    11,
    32,
    5,
    32,
    15,
    71,
    13,
    1,
    11,
    65,
    2,
    33,
    16,
    32,
    5,
    33,
    15,
    12,
    10,
    11,
    32,
    15,
    32,
    5,
    73,
    4,
    64,
    32,
    4,
    32,
    15,
    106,
    32,
    8,
    40,
    2,
    16,
    58,
    0,
    0,
    32,
    8,
    40,
    2,
    12,
    33,
    9,
    32,
    8,
    32,
    8,
    40,
    2,
    20,
    65,
    127,
    106,
    34,
    10,
    54,
    2,
    20,
    65,
    17,
    65,
    6,
    32,
    9,
    27,
    65,
    6,
    32,
    10,
    27,
    33,
    10,
    32,
    15,
    65,
    1,
    106,
    33,
    15,
    12,
    8,
    11,
    12,
    17,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    3,
    64,
    32,
    11,
    65,
    8,
    79,
    4,
    64,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    65,
    255,
    1,
    113,
    54,
    2,
    16,
    32,
    8,
    32,
    11,
    65,
    120,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    8,
    118,
    54,
    2,
    8,
    65,
    18,
    33,
    10,
    12,
    8,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    114,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    17,
    33,
    11,
    12,
    7,
    11,
    32,
    8,
    40,
    2,
    20,
    33,
    14,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    3,
    64,
    2,
    64,
    32,
    14,
    65,
    3,
    77,
    4,
    64,
    32,
    8,
    2,
    127,
    32,
    8,
    40,
    2,
    12,
    34,
    11,
    4,
    64,
    3,
    64,
    32,
    11,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    32,
    14,
    106,
    65,
    153,
    210,
    0,
    106,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    58,
    0,
    0,
    32,
    8,
    32,
    11,
    65,
    120,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    8,
    118,
    54,
    2,
    8,
    32,
    14,
    65,
    1,
    106,
    12,
    3,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    12,
    3,
    11,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    4,
    64,
    65,
    5,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    11,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    14,
    106,
    65,
    153,
    210,
    0,
    106,
    32,
    9,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    14,
    65,
    1,
    106,
    11,
    34,
    14,
    54,
    2,
    20,
    65,
    0,
    33,
    10,
    65,
    0,
    33,
    13,
    12,
    1,
    11,
    32,
    8,
    32,
    1,
    47,
    0,
    153,
    82,
    34,
    9,
    54,
    2,
    20,
    65,
    30,
    33,
    10,
    32,
    9,
    32,
    1,
    47,
    0,
    155,
    82,
    65,
    255,
    255,
    3,
    115,
    71,
    13,
    7,
    65,
    20,
    33,
    10,
    32,
    9,
    69,
    13,
    7,
    65,
    17,
    65,
    6,
    32,
    8,
    40,
    2,
    12,
    27,
    33,
    10,
    12,
    7,
    11,
    65,
    5,
    33,
    11,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    6,
    7,
    0,
    11,
    0,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    13,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    3,
    64,
    32,
    13,
    65,
    7,
    113,
    33,
    9,
    32,
    13,
    33,
    11,
    3,
    64,
    32,
    11,
    32,
    9,
    79,
    4,
    64,
    32,
    8,
    65,
    0,
    54,
    2,
    20,
    32,
    8,
    32,
    11,
    32,
    9,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    9,
    118,
    54,
    2,
    8,
    65,
    5,
    33,
    10,
    12,
    7,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    10,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    10,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    10,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    13,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    13,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    4,
    33,
    11,
    12,
    5,
    11,
    2,
    64,
    3,
    64,
    32,
    8,
    40,
    2,
    4,
    33,
    10,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    2,
    127,
    3,
    64,
    32,
    11,
    65,
    3,
    79,
    4,
    64,
    32,
    1,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    65,
    1,
    113,
    54,
    2,
    16,
    32,
    1,
    32,
    9,
    65,
    1,
    118,
    65,
    3,
    113,
    34,
    12,
    54,
    2,
    20,
    32,
    8,
    32,
    11,
    65,
    125,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    3,
    118,
    54,
    2,
    8,
    65,
    4,
    33,
    10,
    2,
    64,
    2,
    64,
    32,
    12,
    65,
    1,
    107,
    14,
    3,
    0,
    1,
    6,
    10,
    11,
    32,
    1,
    66,
    160,
    130,
    128,
    128,
    128,
    4,
    55,
    2,
    40,
    32,
    36,
    65,
    8,
    65,
    144,
    1,
    16,
    131,
    1,
    26,
    32,
    43,
    65,
    9,
    65,
    240,
    0,
    16,
    131,
    1,
    26,
    32,
    33,
    65,
    16,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    2,
    0,
    32,
    33,
    65,
    8,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    2,
    0,
    32,
    33,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    2,
    0,
    32,
    1,
    66,
    136,
    144,
    160,
    192,
    128,
    129,
    130,
    132,
    8,
    55,
    2,
    208,
    27,
    32,
    31,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    2,
    0,
    32,
    31,
    65,
    8,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    2,
    0,
    32,
    31,
    65,
    16,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    2,
    0,
    32,
    31,
    65,
    24,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    2,
    0,
    32,
    1,
    32,
    8,
    65,
    8,
    106,
    16,
    9,
    34,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    12,
    3,
    11,
    32,
    8,
    65,
    0,
    54,
    2,
    20,
    65,
    8,
    33,
    10,
    12,
    8,
    11,
    2,
    127,
    32,
    22,
    32,
    10,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    12,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    12,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    11,
    33,
    10,
    2,
    64,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    6,
    0,
    1,
    11,
    11,
    65,
    3,
    33,
    11,
    12,
    5,
    11,
    65,
    25,
    33,
    10,
    12,
    3,
    11,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    32,
    8,
    40,
    2,
    4,
    70,
    4,
    64,
    65,
    1,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    4,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    54,
    2,
    4,
    65,
    2,
    33,
    10,
    12,
    2,
    11,
    32,
    1,
    65,
    1,
    54,
    2,
    24,
    32,
    1,
    65,
    1,
    54,
    2,
    12,
    32,
    1,
    66,
    0,
    55,
    2,
    4,
    32,
    8,
    65,
    24,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    8,
    65,
    16,
    106,
    66,
    0,
    55,
    3,
    0,
    32,
    8,
    66,
    0,
    55,
    3,
    8,
    32,
    40,
    33,
    10,
    12,
    1,
    11,
    32,
    1,
    40,
    2,
    4,
    34,
    9,
    65,
    15,
    113,
    33,
    11,
    32,
    9,
    65,
    8,
    116,
    33,
    14,
    32,
    9,
    65,
    4,
    118,
    65,
    8,
    106,
    65,
    31,
    113,
    33,
    10,
    32,
    8,
    40,
    2,
    0,
    33,
    9,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    2,
    64,
    2,
    64,
    32,
    32,
    69,
    4,
    64,
    32,
    9,
    32,
    12,
    71,
    13,
    1,
    12,
    2,
    11,
    32,
    10,
    65,
    16,
    79,
    4,
    64,
    32,
    9,
    32,
    12,
    70,
    13,
    2,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    54,
    2,
    8,
    65,
    28,
    33,
    10,
    12,
    3,
    11,
    32,
    9,
    32,
    12,
    70,
    13,
    1,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    34,
    9,
    54,
    2,
    8,
    65,
    28,
    65,
    28,
    65,
    3,
    32,
    9,
    32,
    14,
    114,
    65,
    31,
    112,
    32,
    9,
    65,
    32,
    113,
    114,
    27,
    32,
    11,
    65,
    8,
    71,
    27,
    33,
    10,
    12,
    2,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    34,
    9,
    54,
    2,
    8,
    65,
    28,
    65,
    28,
    65,
    28,
    65,
    3,
    32,
    9,
    32,
    14,
    114,
    65,
    31,
    112,
    32,
    9,
    65,
    32,
    113,
    114,
    27,
    32,
    11,
    65,
    8,
    71,
    27,
    65,
    28,
    32,
    38,
    32,
    10,
    118,
    27,
    32,
    10,
    65,
    15,
    75,
    27,
    33,
    10,
    12,
    1,
    11,
    11,
    65,
    2,
    33,
    11,
    32,
    26,
    33,
    10,
    11,
    65,
    0,
    33,
    2,
    32,
    10,
    65,
    255,
    1,
    113,
    34,
    9,
    65,
    1,
    70,
    13,
    1,
    32,
    10,
    33,
    16,
    32,
    9,
    65,
    252,
    1,
    70,
    13,
    2,
    11,
    32,
    8,
    32,
    8,
    40,
    2,
    12,
    34,
    2,
    32,
    8,
    40,
    2,
    0,
    32,
    8,
    40,
    2,
    4,
    107,
    32,
    3,
    106,
    34,
    9,
    32,
    2,
    65,
    3,
    118,
    34,
    2,
    32,
    2,
    32,
    9,
    75,
    27,
    34,
    2,
    65,
    3,
    116,
    107,
    54,
    2,
    12,
    12,
    1,
    11,
    65,
    2,
    65,
    1,
    32,
    5,
    32,
    15,
    70,
    27,
    33,
    16,
    11,
    32,
    1,
    32,
    11,
    58,
    0,
    152,
    82,
    32,
    1,
    32,
    8,
    40,
    2,
    12,
    34,
    9,
    54,
    2,
    0,
    32,
    1,
    32,
    8,
    40,
    2,
    16,
    54,
    2,
    28,
    32,
    1,
    32,
    8,
    41,
    2,
    20,
    55,
    2,
    32,
    32,
    1,
    32,
    8,
    40,
    2,
    8,
    65,
    127,
    32,
    9,
    65,
    31,
    113,
    116,
    65,
    127,
    115,
    113,
    54,
    2,
    52,
    2,
    64,
    32,
    7,
    65,
    9,
    113,
    65,
    0,
    32,
    16,
    65,
    24,
    116,
    65,
    24,
    117,
    65,
    127,
    74,
    27,
    69,
    4,
    64,
    32,
    15,
    32,
    6,
    107,
    33,
    15,
    12,
    1,
    11,
    32,
    15,
    32,
    6,
    73,
    13,
    2,
    32,
    15,
    32,
    5,
    75,
    13,
    3,
    32,
    8,
    32,
    1,
    40,
    2,
    24,
    34,
    5,
    59,
    1,
    32,
    32,
    8,
    32,
    5,
    65,
    16,
    118,
    59,
    1,
    34,
    32,
    8,
    65,
    32,
    106,
    32,
    4,
    32,
    6,
    106,
    32,
    15,
    32,
    6,
    107,
    34,
    15,
    16,
    30,
    32,
    1,
    32,
    8,
    40,
    2,
    32,
    34,
    4,
    54,
    2,
    24,
    32,
    35,
    69,
    32,
    16,
    65,
    255,
    1,
    113,
    114,
    13,
    0,
    65,
    0,
    65,
    126,
    32,
    4,
    32,
    1,
    40,
    2,
    12,
    70,
    27,
    33,
    16,
    11,
    32,
    0,
    32,
    16,
    58,
    0,
    4,
    32,
    0,
    32,
    15,
    54,
    2,
    8,
    32,
    0,
    32,
    8,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    2,
    32,
    8,
    40,
    2,
    4,
    106,
    107,
    54,
    2,
    0,
    11,
    32,
    8,
    65,
    48,
    106,
    36,
    0,
    15,
    11,
    32,
    6,
    32,
    15,
    65,
    200,
    183,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    15,
    32,
    5,
    65,
    200,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    2,
    32,
    9,
    65,
    136,
    177,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    12,
    65,
    192,
    4,
    65,
    248,
    176,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    15,
    32,
    5,
    65,
    196,
    185,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    9,
    65,
    192,
    4,
    65,
    248,
    176,
    192,
    0,
    16,
    98,
    0,
    11,
    183,
    45,
    2,
    13,
    127,
    2,
    126,
    35,
    0,
    65,
    144,
    5,
    107,
    34,
    9,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    4,
    64,
    32,
    0,
    65,
    128,
    27,
    106,
    65,
    8,
    65,
    144,
    1,
    16,
    131,
    1,
    26,
    32,
    0,
    65,
    144,
    28,
    106,
    65,
    9,
    65,
    240,
    0,
    16,
    131,
    1,
    26,
    32,
    0,
    65,
    144,
    29,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    1,
    0,
    32,
    0,
    65,
    136,
    29,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    1,
    0,
    32,
    0,
    65,
    128,
    29,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    1,
    0,
    32,
    0,
    65,
    160,
    29,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    1,
    0,
    32,
    0,
    65,
    152,
    29,
    106,
    66,
    136,
    144,
    160,
    192,
    128,
    129,
    130,
    132,
    8,
    55,
    1,
    0,
    32,
    0,
    65,
    168,
    29,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    1,
    0,
    32,
    0,
    65,
    176,
    29,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    1,
    0,
    32,
    0,
    65,
    184,
    29,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    1,
    0,
    32,
    0,
    65,
    0,
    65,
    160,
    2,
    65,
    15,
    65,
    1,
    16,
    6,
    32,
    0,
    65,
    1,
    65,
    32,
    65,
    15,
    65,
    1,
    16,
    6,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    34,
    3,
    65,
    2,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    1,
    32,
    3,
    65,
    31,
    113,
    116,
    114,
    34,
    3,
    54,
    2,
    12,
    32,
    5,
    65,
    8,
    73,
    13,
    1,
    32,
    1,
    40,
    2,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    73,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    1,
    12,
    3,
    11,
    11,
    12,
    3,
    11,
    32,
    0,
    65,
    1,
    59,
    1,
    128,
    4,
    32,
    9,
    32,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    0,
    65,
    160,
    2,
    65,
    15,
    65,
    0,
    16,
    6,
    32,
    0,
    65,
    1,
    65,
    32,
    65,
    15,
    65,
    0,
    16,
    6,
    65,
    158,
    2,
    2,
    127,
    65,
    0,
    32,
    0,
    65,
    157,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    1,
    32,
    0,
    65,
    156,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    2,
    32,
    0,
    65,
    155,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    3,
    32,
    0,
    65,
    154,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    4,
    32,
    0,
    65,
    153,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    5,
    32,
    0,
    65,
    152,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    6,
    32,
    0,
    65,
    151,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    7,
    32,
    0,
    65,
    150,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    8,
    32,
    0,
    65,
    149,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    9,
    32,
    0,
    65,
    148,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    10,
    32,
    0,
    65,
    147,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    11,
    32,
    0,
    65,
    146,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    12,
    32,
    0,
    65,
    145,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    13,
    32,
    0,
    65,
    144,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    14,
    32,
    0,
    65,
    143,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    15,
    32,
    0,
    65,
    142,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    16,
    32,
    0,
    65,
    141,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    17,
    32,
    0,
    65,
    140,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    18,
    32,
    0,
    65,
    139,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    19,
    32,
    0,
    65,
    138,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    20,
    32,
    0,
    65,
    137,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    21,
    32,
    0,
    65,
    136,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    22,
    32,
    0,
    65,
    135,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    23,
    32,
    0,
    65,
    134,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    24,
    32,
    0,
    65,
    133,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    25,
    32,
    0,
    65,
    132,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    26,
    32,
    0,
    65,
    131,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    27,
    32,
    0,
    65,
    130,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    28,
    65,
    29,
    32,
    0,
    65,
    129,
    29,
    106,
    45,
    0,
    0,
    27,
    11,
    34,
    14,
    107,
    33,
    3,
    2,
    64,
    32,
    0,
    65,
    189,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    1,
    33,
    8,
    32,
    0,
    65,
    188,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    2,
    33,
    8,
    32,
    0,
    65,
    187,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    3,
    33,
    8,
    32,
    0,
    65,
    186,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    4,
    33,
    8,
    32,
    0,
    65,
    185,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    5,
    33,
    8,
    32,
    0,
    65,
    184,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    6,
    33,
    8,
    32,
    0,
    65,
    183,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    7,
    33,
    8,
    32,
    0,
    65,
    182,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    8,
    33,
    8,
    32,
    0,
    65,
    181,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    9,
    33,
    8,
    32,
    0,
    65,
    180,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    10,
    33,
    8,
    32,
    0,
    65,
    179,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    11,
    33,
    8,
    32,
    0,
    65,
    178,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    12,
    33,
    8,
    32,
    0,
    65,
    177,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    13,
    33,
    8,
    32,
    0,
    65,
    176,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    14,
    33,
    8,
    32,
    0,
    65,
    175,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    15,
    33,
    8,
    32,
    0,
    65,
    174,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    16,
    33,
    8,
    32,
    0,
    65,
    173,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    17,
    33,
    8,
    32,
    0,
    65,
    172,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    18,
    33,
    8,
    32,
    0,
    65,
    171,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    19,
    33,
    8,
    32,
    0,
    65,
    170,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    20,
    33,
    8,
    32,
    0,
    65,
    169,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    21,
    33,
    8,
    32,
    0,
    65,
    168,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    22,
    33,
    8,
    32,
    0,
    65,
    167,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    23,
    33,
    8,
    32,
    0,
    65,
    166,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    24,
    33,
    8,
    32,
    0,
    65,
    165,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    25,
    33,
    8,
    32,
    0,
    65,
    164,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    26,
    33,
    8,
    32,
    0,
    65,
    163,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    27,
    33,
    8,
    32,
    0,
    65,
    162,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    28,
    65,
    29,
    32,
    0,
    65,
    161,
    29,
    106,
    45,
    0,
    0,
    27,
    33,
    8,
    11,
    32,
    9,
    65,
    4,
    106,
    65,
    0,
    65,
    192,
    2,
    16,
    131,
    1,
    26,
    32,
    9,
    65,
    196,
    2,
    106,
    65,
    0,
    65,
    192,
    2,
    16,
    131,
    1,
    26,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    65,
    193,
    2,
    73,
    4,
    64,
    32,
    3,
    65,
    161,
    2,
    79,
    13,
    1,
    32,
    9,
    65,
    4,
    106,
    32,
    0,
    65,
    128,
    27,
    106,
    32,
    3,
    16,
    121,
    26,
    65,
    30,
    32,
    8,
    107,
    34,
    6,
    32,
    3,
    106,
    34,
    4,
    32,
    3,
    73,
    13,
    2,
    32,
    4,
    65,
    193,
    2,
    79,
    13,
    3,
    32,
    6,
    65,
    161,
    2,
    79,
    13,
    4,
    32,
    9,
    65,
    4,
    106,
    32,
    3,
    106,
    32,
    0,
    65,
    160,
    29,
    106,
    32,
    6,
    16,
    121,
    26,
    32,
    0,
    65,
    128,
    9,
    106,
    65,
    0,
    65,
    38,
    16,
    131,
    1,
    26,
    32,
    0,
    33,
    6,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    69,
    13,
    0,
    65,
    188,
    2,
    32,
    8,
    32,
    14,
    106,
    107,
    33,
    15,
    32,
    9,
    40,
    2,
    0,
    33,
    11,
    32,
    9,
    65,
    4,
    106,
    33,
    13,
    32,
    0,
    33,
    10,
    65,
    0,
    33,
    3,
    65,
    255,
    1,
    33,
    7,
    65,
    0,
    33,
    4,
    3,
    64,
    32,
    7,
    33,
    12,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    13,
    45,
    0,
    0,
    34,
    7,
    69,
    4,
    64,
    2,
    64,
    32,
    5,
    69,
    4,
    64,
    32,
    4,
    33,
    6,
    12,
    1,
    11,
    32,
    5,
    65,
    2,
    77,
    4,
    64,
    32,
    10,
    32,
    12,
    65,
    255,
    1,
    113,
    65,
    1,
    116,
    106,
    65,
    128,
    9,
    106,
    34,
    6,
    32,
    6,
    47,
    1,
    0,
    32,
    5,
    106,
    59,
    1,
    0,
    32,
    9,
    32,
    12,
    58,
    0,
    134,
    5,
    32,
    9,
    32,
    12,
    58,
    0,
    133,
    5,
    32,
    9,
    32,
    12,
    58,
    0,
    132,
    5,
    32,
    4,
    32,
    5,
    106,
    34,
    6,
    32,
    4,
    73,
    32,
    6,
    65,
    192,
    2,
    75,
    114,
    13,
    11,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    32,
    9,
    65,
    132,
    5,
    106,
    32,
    5,
    16,
    121,
    26,
    12,
    1,
    11,
    32,
    10,
    65,
    160,
    9,
    106,
    34,
    6,
    32,
    6,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    10,
    32,
    4,
    65,
    2,
    106,
    34,
    6,
    65,
    192,
    2,
    75,
    13,
    10,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    5,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    16,
    58,
    0,
    0,
    11,
    65,
    0,
    33,
    5,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    65,
    138,
    1,
    70,
    13,
    1,
    32,
    6,
    33,
    4,
    12,
    6,
    11,
    2,
    64,
    32,
    3,
    69,
    4,
    64,
    32,
    4,
    33,
    6,
    12,
    1,
    11,
    32,
    3,
    65,
    2,
    77,
    4,
    64,
    32,
    10,
    32,
    10,
    47,
    1,
    128,
    9,
    32,
    3,
    106,
    59,
    1,
    128,
    9,
    32,
    3,
    32,
    4,
    106,
    34,
    6,
    32,
    4,
    73,
    32,
    6,
    65,
    192,
    2,
    75,
    114,
    13,
    10,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    65,
    0,
    32,
    3,
    16,
    131,
    1,
    26,
    12,
    1,
    11,
    32,
    3,
    65,
    10,
    77,
    4,
    64,
    32,
    10,
    65,
    162,
    9,
    106,
    34,
    6,
    32,
    6,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    10,
    32,
    4,
    65,
    2,
    106,
    34,
    6,
    65,
    192,
    2,
    75,
    13,
    10,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    3,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    17,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    10,
    65,
    164,
    9,
    106,
    34,
    6,
    32,
    6,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    9,
    32,
    4,
    65,
    2,
    106,
    34,
    6,
    65,
    192,
    2,
    75,
    13,
    9,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    3,
    65,
    117,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    18,
    58,
    0,
    0,
    11,
    32,
    7,
    32,
    12,
    65,
    255,
    1,
    113,
    34,
    3,
    70,
    13,
    3,
    32,
    5,
    69,
    13,
    2,
    32,
    5,
    65,
    2,
    75,
    13,
    1,
    32,
    10,
    32,
    3,
    65,
    1,
    116,
    106,
    65,
    128,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    32,
    5,
    106,
    59,
    1,
    0,
    32,
    9,
    32,
    12,
    58,
    0,
    134,
    5,
    32,
    9,
    32,
    12,
    58,
    0,
    133,
    5,
    32,
    9,
    32,
    12,
    58,
    0,
    132,
    5,
    32,
    5,
    32,
    6,
    106,
    34,
    3,
    32,
    6,
    73,
    32,
    3,
    65,
    192,
    2,
    75,
    114,
    13,
    8,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    32,
    9,
    65,
    132,
    5,
    106,
    32,
    5,
    16,
    121,
    26,
    32,
    3,
    33,
    6,
    32,
    11,
    33,
    10,
    12,
    2,
    11,
    32,
    11,
    32,
    11,
    47,
    1,
    164,
    9,
    65,
    1,
    106,
    59,
    1,
    164,
    9,
    32,
    6,
    65,
    125,
    75,
    13,
    7,
    32,
    6,
    65,
    2,
    106,
    34,
    4,
    65,
    192,
    2,
    75,
    13,
    7,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    65,
    146,
    254,
    1,
    59,
    0,
    0,
    12,
    3,
    11,
    32,
    10,
    65,
    160,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    6,
    65,
    125,
    75,
    13,
    6,
    32,
    6,
    65,
    2,
    106,
    34,
    3,
    65,
    192,
    2,
    75,
    13,
    6,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    34,
    6,
    32,
    5,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    6,
    65,
    16,
    58,
    0,
    0,
    32,
    3,
    33,
    6,
    11,
    32,
    10,
    32,
    7,
    65,
    1,
    116,
    106,
    65,
    128,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    6,
    65,
    1,
    106,
    34,
    4,
    32,
    6,
    73,
    32,
    4,
    65,
    192,
    2,
    75,
    114,
    13,
    5,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    32,
    7,
    58,
    0,
    0,
    12,
    1,
    11,
    65,
    0,
    33,
    3,
    32,
    5,
    65,
    1,
    106,
    34,
    5,
    65,
    6,
    71,
    4,
    64,
    32,
    6,
    33,
    4,
    12,
    2,
    11,
    32,
    10,
    65,
    160,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    6,
    65,
    125,
    75,
    13,
    4,
    32,
    6,
    65,
    2,
    106,
    34,
    4,
    65,
    192,
    2,
    75,
    13,
    4,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    65,
    144,
    6,
    59,
    0,
    0,
    11,
    65,
    0,
    33,
    3,
    65,
    0,
    33,
    5,
    11,
    32,
    13,
    65,
    1,
    106,
    33,
    13,
    32,
    11,
    33,
    10,
    32,
    15,
    65,
    127,
    106,
    34,
    15,
    13,
    0,
    11,
    32,
    9,
    40,
    2,
    0,
    33,
    6,
    32,
    5,
    4,
    64,
    32,
    5,
    65,
    2,
    77,
    4,
    64,
    32,
    6,
    32,
    7,
    65,
    1,
    116,
    106,
    65,
    128,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    32,
    5,
    106,
    59,
    1,
    0,
    32,
    9,
    32,
    7,
    58,
    0,
    134,
    5,
    32,
    9,
    32,
    7,
    58,
    0,
    133,
    5,
    32,
    9,
    32,
    7,
    58,
    0,
    132,
    5,
    32,
    4,
    32,
    5,
    106,
    34,
    10,
    32,
    4,
    73,
    32,
    10,
    65,
    192,
    2,
    75,
    114,
    13,
    3,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    32,
    9,
    65,
    132,
    5,
    106,
    32,
    5,
    16,
    121,
    26,
    32,
    9,
    40,
    2,
    0,
    33,
    6,
    12,
    2,
    11,
    32,
    6,
    65,
    160,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    2,
    32,
    4,
    65,
    2,
    106,
    34,
    10,
    65,
    192,
    2,
    75,
    13,
    2,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    3,
    32,
    5,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    3,
    65,
    16,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    3,
    69,
    4,
    64,
    32,
    4,
    33,
    10,
    12,
    1,
    11,
    32,
    3,
    65,
    2,
    77,
    4,
    64,
    32,
    6,
    32,
    6,
    47,
    1,
    128,
    9,
    32,
    3,
    106,
    59,
    1,
    128,
    9,
    32,
    3,
    32,
    4,
    106,
    34,
    10,
    32,
    4,
    73,
    32,
    10,
    65,
    192,
    2,
    75,
    114,
    13,
    2,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    65,
    0,
    32,
    3,
    16,
    131,
    1,
    26,
    12,
    1,
    11,
    32,
    3,
    65,
    10,
    77,
    4,
    64,
    32,
    6,
    65,
    162,
    9,
    106,
    34,
    7,
    32,
    7,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    2,
    32,
    4,
    65,
    2,
    106,
    34,
    10,
    65,
    192,
    2,
    75,
    13,
    2,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    3,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    17,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    6,
    65,
    164,
    9,
    106,
    34,
    7,
    32,
    7,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    1,
    32,
    4,
    65,
    2,
    106,
    34,
    10,
    65,
    192,
    2,
    75,
    13,
    1,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    3,
    65,
    117,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    18,
    58,
    0,
    0,
    11,
    32,
    6,
    65,
    2,
    65,
    19,
    65,
    7,
    65,
    0,
    16,
    6,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    34,
    3,
    65,
    2,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    2,
    32,
    3,
    65,
    31,
    113,
    116,
    114,
    34,
    7,
    54,
    2,
    12,
    32,
    5,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    9,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    65,
    29,
    32,
    14,
    107,
    34,
    3,
    65,
    32,
    79,
    13,
    14,
    32,
    1,
    32,
    5,
    65,
    5,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    1,
    32,
    3,
    32,
    5,
    116,
    32,
    7,
    114,
    34,
    6,
    54,
    2,
    12,
    32,
    5,
    65,
    3,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    79,
    13,
    10,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    4,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    65,
    29,
    32,
    8,
    107,
    34,
    3,
    65,
    32,
    79,
    13,
    14,
    32,
    1,
    32,
    4,
    65,
    5,
    106,
    34,
    7,
    54,
    2,
    16,
    32,
    1,
    32,
    3,
    32,
    4,
    116,
    32,
    6,
    114,
    34,
    6,
    54,
    2,
    12,
    32,
    4,
    65,
    3,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    79,
    13,
    11,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    16,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    65,
    0,
    33,
    4,
    65,
    0,
    33,
    3,
    32,
    9,
    40,
    2,
    0,
    34,
    5,
    65,
    207,
    31,
    106,
    45,
    0,
    0,
    13,
    10,
    65,
    1,
    33,
    3,
    32,
    5,
    65,
    193,
    31,
    106,
    45,
    0,
    0,
    69,
    13,
    1,
    12,
    10,
    11,
    65,
    2,
    33,
    5,
    12,
    11,
    11,
    65,
    2,
    33,
    3,
    32,
    5,
    65,
    206,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    3,
    33,
    3,
    32,
    5,
    65,
    194,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    4,
    33,
    3,
    32,
    5,
    65,
    205,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    5,
    33,
    3,
    32,
    5,
    65,
    195,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    6,
    33,
    3,
    32,
    5,
    65,
    204,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    7,
    33,
    3,
    32,
    5,
    65,
    196,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    8,
    33,
    3,
    32,
    5,
    65,
    203,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    9,
    33,
    3,
    32,
    5,
    65,
    197,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    10,
    33,
    3,
    32,
    5,
    65,
    202,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    11,
    33,
    3,
    32,
    5,
    65,
    198,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    12,
    33,
    3,
    32,
    5,
    65,
    201,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    13,
    33,
    3,
    32,
    5,
    65,
    199,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    14,
    33,
    3,
    32,
    5,
    65,
    200,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    15,
    33,
    3,
    32,
    5,
    65,
    192,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    16,
    33,
    3,
    32,
    5,
    65,
    210,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    17,
    33,
    3,
    32,
    5,
    65,
    209,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    18,
    65,
    19,
    32,
    5,
    65,
    208,
    31,
    106,
    45,
    0,
    0,
    27,
    33,
    3,
    12,
    8,
    11,
    32,
    3,
    65,
    192,
    2,
    65,
    132,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    3,
    65,
    160,
    2,
    65,
    148,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    3,
    32,
    4,
    65,
    164,
    152,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    4,
    65,
    192,
    2,
    65,
    164,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    65,
    160,
    2,
    65,
    180,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    3,
    32,
    6,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    4,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    4,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    4,
    33,
    13,
    2,
    64,
    2,
    64,
    65,
    19,
    32,
    3,
    107,
    34,
    5,
    65,
    5,
    79,
    4,
    64,
    32,
    5,
    33,
    13,
    65,
    15,
    32,
    3,
    107,
    34,
    4,
    65,
    16,
    79,
    13,
    6,
    11,
    32,
    1,
    32,
    7,
    65,
    4,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    1,
    32,
    4,
    32,
    7,
    65,
    31,
    113,
    116,
    32,
    6,
    114,
    34,
    3,
    54,
    2,
    12,
    32,
    5,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    6,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    13,
    65,
    20,
    79,
    13,
    1,
    11,
    32,
    13,
    69,
    13,
    1,
    65,
    196,
    152,
    192,
    0,
    33,
    7,
    32,
    13,
    65,
    196,
    152,
    192,
    0,
    106,
    33,
    11,
    32,
    9,
    40,
    2,
    0,
    33,
    8,
    3,
    64,
    32,
    8,
    32,
    7,
    45,
    0,
    0,
    106,
    65,
    192,
    31,
    106,
    45,
    0,
    0,
    34,
    4,
    65,
    248,
    1,
    113,
    13,
    6,
    32,
    1,
    32,
    5,
    65,
    3,
    106,
    34,
    6,
    54,
    2,
    16,
    32,
    1,
    32,
    4,
    32,
    5,
    65,
    31,
    113,
    116,
    32,
    3,
    114,
    34,
    3,
    54,
    2,
    12,
    2,
    64,
    32,
    6,
    65,
    8,
    73,
    4,
    64,
    32,
    6,
    33,
    5,
    12,
    1,
    11,
    32,
    1,
    40,
    2,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    7,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    7,
    65,
    1,
    106,
    34,
    7,
    32,
    11,
    71,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    13,
    65,
    19,
    65,
    216,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    10,
    69,
    13,
    0,
    65,
    0,
    33,
    7,
    32,
    9,
    40,
    2,
    0,
    33,
    8,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    7,
    65,
    191,
    2,
    77,
    4,
    64,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    7,
    106,
    45,
    0,
    0,
    34,
    11,
    65,
    19,
    79,
    13,
    4,
    32,
    8,
    32,
    11,
    65,
    1,
    116,
    106,
    65,
    192,
    22,
    106,
    47,
    1,
    0,
    34,
    6,
    32,
    8,
    32,
    11,
    106,
    65,
    192,
    31,
    106,
    45,
    0,
    0,
    34,
    4,
    65,
    31,
    113,
    118,
    13,
    10,
    32,
    1,
    32,
    4,
    32,
    5,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    1,
    32,
    6,
    32,
    5,
    65,
    31,
    113,
    116,
    32,
    3,
    114,
    34,
    3,
    54,
    2,
    12,
    32,
    4,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    7,
    32,
    1,
    40,
    2,
    0,
    32,
    5,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    4,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    7,
    65,
    1,
    106,
    33,
    6,
    2,
    127,
    32,
    11,
    65,
    16,
    73,
    4,
    64,
    32,
    4,
    33,
    5,
    32,
    6,
    12,
    1,
    11,
    32,
    7,
    65,
    190,
    2,
    75,
    13,
    3,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    45,
    0,
    0,
    33,
    6,
    32,
    9,
    65,
    7,
    54,
    2,
    140,
    5,
    32,
    9,
    66,
    130,
    128,
    128,
    128,
    48,
    55,
    2,
    132,
    5,
    32,
    11,
    65,
    112,
    106,
    34,
    5,
    65,
    2,
    75,
    13,
    4,
    32,
    6,
    32,
    9,
    65,
    132,
    5,
    106,
    32,
    5,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    34,
    5,
    65,
    31,
    113,
    118,
    13,
    11,
    32,
    1,
    32,
    4,
    32,
    5,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    1,
    32,
    6,
    32,
    4,
    116,
    32,
    3,
    114,
    34,
    3,
    54,
    2,
    12,
    32,
    5,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    9,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    7,
    65,
    2,
    106,
    11,
    34,
    7,
    32,
    10,
    73,
    13,
    1,
    12,
    7,
    11,
    11,
    32,
    7,
    65,
    192,
    2,
    65,
    232,
    152,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    192,
    2,
    65,
    192,
    2,
    65,
    180,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    3,
    65,
    196,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    248,
    152,
    192,
    0,
    65,
    43,
    65,
    164,
    153,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    32,
    6,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    12,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    0,
    34,
    11,
    65,
    129,
    128,
    4,
    73,
    4,
    64,
    32,
    3,
    173,
    33,
    17,
    32,
    11,
    69,
    13,
    5,
    32,
    2,
    65,
    16,
    106,
    33,
    13,
    65,
    1,
    33,
    6,
    65,
    0,
    33,
    8,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    127,
    32,
    6,
    65,
    1,
    71,
    4,
    64,
    32,
    8,
    33,
    10,
    32,
    6,
    12,
    1,
    11,
    32,
    8,
    65,
    1,
    106,
    33,
    10,
    32,
    2,
    32,
    8,
    106,
    65,
    16,
    106,
    45,
    0,
    0,
    65,
    128,
    2,
    114,
    11,
    34,
    7,
    65,
    1,
    113,
    4,
    64,
    32,
    10,
    32,
    11,
    79,
    13,
    4,
    32,
    10,
    65,
    1,
    106,
    34,
    6,
    32,
    11,
    79,
    13,
    10,
    32,
    10,
    65,
    2,
    106,
    34,
    8,
    32,
    11,
    79,
    13,
    11,
    32,
    2,
    32,
    10,
    106,
    65,
    16,
    106,
    45,
    0,
    0,
    34,
    14,
    65,
    1,
    116,
    65,
    164,
    154,
    192,
    0,
    106,
    47,
    1,
    0,
    34,
    3,
    65,
    159,
    2,
    75,
    13,
    5,
    32,
    14,
    65,
    248,
    158,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    4,
    65,
    16,
    75,
    13,
    6,
    32,
    0,
    32,
    3,
    106,
    65,
    128,
    27,
    106,
    45,
    0,
    0,
    33,
    16,
    32,
    0,
    32,
    3,
    65,
    1,
    116,
    106,
    65,
    192,
    13,
    106,
    51,
    1,
    0,
    2,
    127,
    32,
    6,
    32,
    13,
    106,
    45,
    0,
    0,
    32,
    8,
    32,
    13,
    106,
    45,
    0,
    0,
    34,
    8,
    65,
    8,
    116,
    114,
    34,
    3,
    65,
    255,
    3,
    77,
    4,
    64,
    32,
    3,
    65,
    136,
    161,
    192,
    0,
    106,
    33,
    15,
    32,
    3,
    65,
    136,
    165,
    192,
    0,
    106,
    12,
    1,
    11,
    32,
    3,
    65,
    16,
    116,
    65,
    16,
    117,
    65,
    0,
    72,
    13,
    8,
    32,
    8,
    65,
    136,
    169,
    192,
    0,
    106,
    33,
    15,
    32,
    8,
    65,
    152,
    170,
    192,
    0,
    106,
    11,
    45,
    0,
    0,
    34,
    12,
    65,
    16,
    75,
    13,
    8,
    32,
    7,
    65,
    1,
    118,
    33,
    6,
    32,
    10,
    65,
    3,
    106,
    33,
    8,
    32,
    5,
    65,
    63,
    113,
    173,
    134,
    32,
    17,
    132,
    32,
    4,
    65,
    2,
    116,
    65,
    180,
    158,
    192,
    0,
    106,
    53,
    2,
    0,
    32,
    14,
    173,
    131,
    32,
    5,
    32,
    16,
    106,
    34,
    7,
    65,
    63,
    113,
    173,
    134,
    132,
    32,
    0,
    32,
    15,
    45,
    0,
    0,
    34,
    10,
    65,
    1,
    116,
    106,
    65,
    128,
    18,
    106,
    51,
    1,
    0,
    32,
    4,
    32,
    7,
    106,
    34,
    4,
    65,
    63,
    113,
    173,
    134,
    132,
    32,
    12,
    65,
    2,
    116,
    65,
    180,
    158,
    192,
    0,
    106,
    53,
    2,
    0,
    32,
    3,
    173,
    131,
    32,
    4,
    32,
    0,
    32,
    10,
    106,
    65,
    160,
    29,
    106,
    45,
    0,
    0,
    106,
    34,
    3,
    65,
    63,
    113,
    173,
    134,
    132,
    33,
    17,
    32,
    3,
    32,
    12,
    106,
    33,
    4,
    12,
    1,
    11,
    32,
    10,
    32,
    13,
    106,
    33,
    12,
    32,
    10,
    65,
    3,
    106,
    33,
    8,
    32,
    10,
    32,
    10,
    32,
    11,
    32,
    10,
    32,
    11,
    75,
    27,
    34,
    14,
    107,
    33,
    15,
    65,
    0,
    33,
    3,
    32,
    5,
    33,
    4,
    3,
    64,
    32,
    3,
    65,
    3,
    70,
    4,
    64,
    32,
    7,
    33,
    6,
    12,
    2,
    11,
    32,
    3,
    32,
    15,
    106,
    69,
    13,
    2,
    32,
    7,
    65,
    1,
    118,
    33,
    6,
    32,
    0,
    32,
    3,
    32,
    12,
    106,
    45,
    0,
    0,
    34,
    16,
    65,
    1,
    116,
    106,
    65,
    192,
    13,
    106,
    51,
    1,
    0,
    32,
    4,
    65,
    63,
    113,
    173,
    134,
    32,
    17,
    132,
    33,
    17,
    32,
    3,
    65,
    1,
    106,
    33,
    5,
    32,
    4,
    32,
    0,
    32,
    16,
    106,
    65,
    128,
    27,
    106,
    45,
    0,
    0,
    106,
    33,
    4,
    32,
    3,
    32,
    10,
    106,
    65,
    1,
    106,
    32,
    11,
    73,
    4,
    64,
    32,
    7,
    65,
    2,
    113,
    32,
    5,
    33,
    3,
    32,
    6,
    33,
    7,
    69,
    13,
    1,
    11,
    11,
    32,
    5,
    32,
    10,
    106,
    33,
    8,
    11,
    32,
    1,
    40,
    2,
    8,
    34,
    3,
    65,
    8,
    106,
    33,
    7,
    32,
    3,
    65,
    120,
    79,
    13,
    10,
    32,
    1,
    40,
    2,
    4,
    34,
    10,
    32,
    7,
    73,
    13,
    11,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    17,
    55,
    0,
    0,
    65,
    2,
    33,
    5,
    32,
    1,
    40,
    2,
    8,
    34,
    7,
    32,
    4,
    65,
    3,
    118,
    106,
    34,
    3,
    32,
    7,
    73,
    13,
    13,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    75,
    13,
    13,
    32,
    1,
    32,
    3,
    54,
    2,
    8,
    32,
    4,
    65,
    7,
    113,
    33,
    5,
    32,
    17,
    32,
    4,
    65,
    56,
    113,
    173,
    136,
    33,
    17,
    32,
    8,
    32,
    11,
    73,
    13,
    1,
    12,
    12,
    11,
    11,
    32,
    14,
    32,
    11,
    65,
    132,
    154,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    10,
    32,
    11,
    65,
    148,
    154,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    65,
    160,
    2,
    65,
    164,
    158,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    17,
    65,
    248,
    160,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    128,
    1,
    65,
    136,
    170,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    65,
    17,
    65,
    152,
    171,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    65,
    128,
    128,
    4,
    65,
    168,
    171,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    32,
    11,
    65,
    132,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    32,
    11,
    65,
    148,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    7,
    65,
    180,
    148,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    7,
    32,
    10,
    65,
    180,
    148,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    66,
    0,
    55,
    2,
    12,
    65,
    0,
    33,
    7,
    2,
    64,
    32,
    5,
    69,
    4,
    64,
    65,
    0,
    33,
    4,
    12,
    1,
    11,
    65,
    0,
    33,
    4,
    2,
    64,
    3,
    64,
    32,
    5,
    65,
    16,
    32,
    5,
    65,
    16,
    73,
    27,
    34,
    6,
    65,
    2,
    116,
    65,
    180,
    158,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    17,
    167,
    113,
    34,
    3,
    32,
    6,
    118,
    69,
    4,
    64,
    32,
    1,
    32,
    4,
    32,
    6,
    106,
    34,
    2,
    54,
    2,
    16,
    32,
    1,
    32,
    3,
    32,
    4,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    12,
    2,
    64,
    32,
    2,
    65,
    8,
    73,
    4,
    64,
    32,
    2,
    33,
    4,
    12,
    1,
    11,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    79,
    13,
    4,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    4,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    17,
    32,
    6,
    173,
    136,
    33,
    17,
    32,
    5,
    32,
    6,
    107,
    34,
    5,
    13,
    1,
    12,
    3,
    11,
    11,
    12,
    4,
    11,
    32,
    3,
    32,
    2,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    0,
    65,
    192,
    17,
    106,
    47,
    1,
    0,
    34,
    2,
    32,
    0,
    65,
    128,
    29,
    106,
    45,
    0,
    0,
    34,
    0,
    65,
    31,
    113,
    118,
    13,
    2,
    32,
    1,
    32,
    0,
    32,
    4,
    106,
    34,
    0,
    54,
    2,
    16,
    32,
    1,
    32,
    2,
    32,
    4,
    116,
    32,
    7,
    114,
    34,
    4,
    54,
    2,
    12,
    65,
    1,
    33,
    5,
    32,
    0,
    65,
    8,
    73,
    13,
    0,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    0,
    73,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    4,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    4,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    0,
    54,
    2,
    16,
    32,
    0,
    65,
    7,
    75,
    13,
    1,
    12,
    2,
    11,
    11,
    32,
    3,
    32,
    0,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    9,
    65,
    144,
    5,
    106,
    36,
    0,
    32,
    5,
    15,
    11,
    32,
    4,
    32,
    6,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    228,
    147,
    192,
    0,
    65,
    48,
    65,
    148,
    148,
    192,
    0,
    16,
    114,
    0,
    11,
    187,
    43,
    2,
    34,
    127,
    1,
    126,
    35,
    0,
    65,
    48,
    107,
    34,
    13,
    36,
    0,
    32,
    1,
    65,
    172,
    128,
    4,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    180,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    5,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    198,
    128,
    4,
    106,
    45,
    0,
    0,
    65,
    4,
    70,
    4,
    64,
    32,
    1,
    32,
    3,
    58,
    0,
    198,
    128,
    4,
    32,
    3,
    65,
    255,
    1,
    113,
    65,
    4,
    71,
    32,
    5,
    114,
    13,
    1,
    12,
    2,
    11,
    32,
    1,
    32,
    3,
    58,
    0,
    198,
    128,
    4,
    32,
    5,
    69,
    13,
    1,
    11,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    66,
    254,
    255,
    255,
    255,
    15,
    55,
    2,
    0,
    32,
    1,
    65,
    126,
    54,
    2,
    180,
    128,
    4,
    12,
    1,
    11,
    32,
    1,
    65,
    144,
    128,
    4,
    106,
    33,
    24,
    2,
    64,
    32,
    1,
    65,
    164,
    128,
    4,
    106,
    40,
    2,
    0,
    69,
    4,
    64,
    32,
    1,
    65,
    199,
    128,
    4,
    106,
    45,
    0,
    0,
    69,
    13,
    1,
    11,
    32,
    13,
    65,
    32,
    106,
    32,
    2,
    32,
    24,
    16,
    67,
    32,
    1,
    32,
    13,
    40,
    2,
    32,
    54,
    2,
    180,
    128,
    4,
    32,
    0,
    32,
    13,
    41,
    3,
    32,
    55,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    13,
    65,
    40,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    12,
    1,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    24,
    40,
    2,
    0,
    65,
    255,
    159,
    45,
    113,
    65,
    129,
    128,
    1,
    71,
    4,
    64,
    32,
    2,
    40,
    2,
    0,
    34,
    26,
    69,
    13,
    2,
    32,
    1,
    65,
    204,
    128,
    4,
    106,
    33,
    31,
    32,
    1,
    65,
    156,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    3,
    32,
    1,
    65,
    152,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    17,
    32,
    1,
    65,
    197,
    128,
    4,
    106,
    45,
    0,
    0,
    33,
    19,
    32,
    1,
    65,
    224,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    16,
    32,
    1,
    65,
    220,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    10,
    32,
    2,
    40,
    2,
    4,
    33,
    18,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    33,
    14,
    2,
    64,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    18,
    32,
    11,
    77,
    4,
    64,
    32,
    10,
    69,
    13,
    1,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    69,
    13,
    1,
    11,
    2,
    127,
    2,
    64,
    65,
    130,
    2,
    32,
    10,
    107,
    34,
    5,
    32,
    18,
    32,
    11,
    107,
    34,
    4,
    32,
    4,
    32,
    5,
    75,
    27,
    34,
    6,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    32,
    10,
    106,
    65,
    2,
    73,
    13,
    0,
    32,
    6,
    32,
    11,
    106,
    34,
    7,
    32,
    6,
    79,
    4,
    64,
    32,
    18,
    32,
    7,
    79,
    4,
    64,
    32,
    14,
    40,
    2,
    0,
    34,
    5,
    65,
    128,
    128,
    8,
    106,
    34,
    8,
    32,
    10,
    32,
    16,
    106,
    34,
    9,
    65,
    126,
    106,
    34,
    4,
    65,
    255,
    255,
    1,
    113,
    106,
    45,
    0,
    0,
    65,
    5,
    116,
    32,
    8,
    32,
    9,
    65,
    127,
    106,
    65,
    255,
    255,
    1,
    113,
    106,
    45,
    0,
    0,
    115,
    33,
    12,
    32,
    6,
    32,
    10,
    106,
    33,
    10,
    32,
    6,
    65,
    127,
    106,
    33,
    6,
    32,
    11,
    32,
    26,
    106,
    33,
    8,
    3,
    64,
    32,
    5,
    32,
    9,
    65,
    255,
    255,
    1,
    113,
    34,
    9,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    8,
    45,
    0,
    0,
    34,
    5,
    58,
    0,
    0,
    32,
    9,
    65,
    128,
    2,
    77,
    4,
    64,
    32,
    14,
    40,
    2,
    0,
    32,
    9,
    65,
    128,
    128,
    2,
    114,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    5,
    58,
    0,
    0,
    11,
    32,
    14,
    40,
    2,
    0,
    34,
    11,
    32,
    4,
    65,
    255,
    255,
    1,
    113,
    65,
    1,
    116,
    106,
    32,
    11,
    32,
    12,
    65,
    5,
    116,
    65,
    224,
    255,
    1,
    113,
    32,
    5,
    115,
    34,
    12,
    65,
    1,
    116,
    34,
    5,
    106,
    65,
    128,
    128,
    4,
    106,
    47,
    1,
    0,
    59,
    1,
    0,
    32,
    14,
    40,
    2,
    0,
    32,
    5,
    106,
    65,
    128,
    128,
    4,
    106,
    32,
    4,
    59,
    1,
    0,
    32,
    7,
    32,
    6,
    69,
    13,
    4,
    26,
    32,
    8,
    65,
    1,
    106,
    33,
    8,
    32,
    6,
    65,
    127,
    106,
    33,
    6,
    32,
    9,
    65,
    1,
    106,
    33,
    9,
    32,
    4,
    65,
    1,
    106,
    33,
    4,
    32,
    14,
    40,
    2,
    0,
    33,
    5,
    12,
    0,
    11,
    0,
    11,
    32,
    7,
    32,
    18,
    65,
    216,
    173,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    11,
    32,
    7,
    65,
    216,
    173,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    6,
    32,
    11,
    106,
    34,
    5,
    32,
    6,
    73,
    13,
    2,
    32,
    18,
    32,
    5,
    73,
    13,
    3,
    32,
    6,
    4,
    64,
    32,
    11,
    32,
    26,
    106,
    33,
    12,
    32,
    10,
    32,
    16,
    106,
    33,
    7,
    65,
    0,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    7,
    106,
    34,
    9,
    65,
    255,
    255,
    1,
    113,
    34,
    8,
    32,
    14,
    40,
    2,
    0,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    4,
    32,
    12,
    106,
    45,
    0,
    0,
    34,
    11,
    58,
    0,
    0,
    32,
    8,
    65,
    128,
    2,
    77,
    4,
    64,
    32,
    14,
    40,
    2,
    0,
    32,
    8,
    65,
    128,
    128,
    2,
    114,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    11,
    58,
    0,
    0,
    11,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    32,
    4,
    32,
    10,
    106,
    106,
    65,
    1,
    106,
    65,
    3,
    79,
    4,
    64,
    32,
    14,
    40,
    2,
    0,
    34,
    8,
    32,
    9,
    65,
    126,
    106,
    34,
    15,
    65,
    255,
    255,
    1,
    113,
    34,
    20,
    65,
    1,
    116,
    106,
    32,
    8,
    32,
    11,
    32,
    8,
    65,
    128,
    128,
    8,
    106,
    34,
    11,
    32,
    9,
    65,
    127,
    106,
    65,
    255,
    255,
    1,
    113,
    106,
    45,
    0,
    0,
    65,
    5,
    116,
    115,
    32,
    11,
    32,
    20,
    106,
    45,
    0,
    0,
    65,
    10,
    116,
    65,
    128,
    248,
    1,
    113,
    115,
    65,
    1,
    116,
    34,
    9,
    106,
    65,
    128,
    128,
    4,
    106,
    47,
    1,
    0,
    59,
    1,
    0,
    32,
    14,
    40,
    2,
    0,
    32,
    9,
    106,
    65,
    128,
    128,
    4,
    106,
    32,
    15,
    59,
    1,
    0,
    11,
    32,
    6,
    32,
    4,
    65,
    1,
    106,
    34,
    4,
    71,
    13,
    0,
    11,
    32,
    4,
    32,
    10,
    106,
    33,
    10,
    11,
    32,
    5,
    11,
    33,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    34,
    5,
    65,
    128,
    128,
    2,
    32,
    10,
    107,
    34,
    4,
    32,
    4,
    32,
    5,
    75,
    27,
    34,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    10,
    65,
    129,
    2,
    77,
    4,
    64,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    69,
    13,
    1,
    11,
    32,
    16,
    65,
    255,
    255,
    1,
    113,
    33,
    7,
    32,
    3,
    65,
    2,
    32,
    3,
    27,
    33,
    9,
    2,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    144,
    128,
    4,
    34,
    23,
    65,
    128,
    128,
    36,
    113,
    4,
    64,
    65,
    0,
    33,
    4,
    32,
    27,
    69,
    32,
    23,
    65,
    128,
    128,
    32,
    113,
    114,
    13,
    17,
    32,
    7,
    32,
    10,
    106,
    34,
    5,
    32,
    10,
    73,
    13,
    14,
    32,
    5,
    65,
    131,
    130,
    2,
    79,
    13,
    15,
    32,
    10,
    13,
    1,
    12,
    2,
    11,
    65,
    0,
    33,
    4,
    32,
    10,
    65,
    130,
    2,
    32,
    10,
    65,
    130,
    2,
    73,
    27,
    34,
    15,
    32,
    9,
    65,
    1,
    32,
    9,
    65,
    1,
    75,
    27,
    34,
    9,
    77,
    13,
    16,
    32,
    7,
    32,
    9,
    106,
    34,
    6,
    65,
    127,
    106,
    34,
    5,
    65,
    129,
    130,
    2,
    75,
    13,
    5,
    32,
    5,
    65,
    129,
    130,
    2,
    70,
    13,
    6,
    32,
    31,
    32,
    9,
    65,
    31,
    75,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    65,
    127,
    106,
    34,
    28,
    69,
    13,
    16,
    32,
    14,
    40,
    2,
    0,
    34,
    20,
    32,
    7,
    106,
    34,
    29,
    65,
    128,
    128,
    8,
    106,
    47,
    0,
    0,
    33,
    32,
    32,
    20,
    65,
    128,
    128,
    8,
    106,
    34,
    25,
    32,
    6,
    106,
    45,
    0,
    0,
    65,
    8,
    116,
    32,
    5,
    32,
    25,
    106,
    45,
    0,
    0,
    114,
    33,
    30,
    32,
    20,
    65,
    130,
    128,
    8,
    106,
    33,
    33,
    65,
    128,
    130,
    2,
    32,
    7,
    107,
    65,
    248,
    255,
    3,
    113,
    33,
    34,
    32,
    7,
    33,
    5,
    3,
    64,
    65,
    4,
    33,
    8,
    2,
    64,
    3,
    64,
    32,
    8,
    65,
    127,
    106,
    34,
    8,
    69,
    13,
    1,
    32,
    20,
    32,
    5,
    65,
    1,
    116,
    106,
    47,
    1,
    0,
    34,
    22,
    69,
    13,
    19,
    32,
    16,
    32,
    22,
    107,
    65,
    255,
    255,
    3,
    113,
    34,
    12,
    32,
    27,
    75,
    13,
    19,
    32,
    22,
    65,
    255,
    255,
    1,
    113,
    34,
    5,
    32,
    9,
    106,
    34,
    21,
    65,
    127,
    106,
    34,
    6,
    65,
    129,
    130,
    2,
    75,
    13,
    10,
    32,
    6,
    65,
    129,
    130,
    2,
    70,
    13,
    11,
    32,
    6,
    32,
    25,
    106,
    45,
    0,
    0,
    32,
    21,
    32,
    25,
    106,
    45,
    0,
    0,
    65,
    8,
    116,
    114,
    32,
    30,
    71,
    13,
    0,
    11,
    32,
    12,
    69,
    13,
    18,
    32,
    5,
    32,
    20,
    106,
    65,
    128,
    128,
    8,
    106,
    47,
    0,
    0,
    32,
    32,
    71,
    13,
    0,
    32,
    5,
    32,
    33,
    106,
    33,
    21,
    65,
    128,
    130,
    2,
    32,
    5,
    107,
    65,
    248,
    255,
    3,
    113,
    65,
    8,
    106,
    33,
    35,
    65,
    0,
    33,
    6,
    3,
    64,
    32,
    6,
    65,
    128,
    2,
    70,
    13,
    18,
    32,
    6,
    32,
    34,
    70,
    13,
    12,
    32,
    35,
    32,
    6,
    65,
    8,
    106,
    34,
    8,
    70,
    13,
    13,
    32,
    6,
    32,
    21,
    106,
    32,
    6,
    32,
    29,
    106,
    33,
    37,
    32,
    8,
    33,
    6,
    41,
    0,
    0,
    32,
    37,
    65,
    130,
    128,
    8,
    106,
    41,
    0,
    0,
    133,
    34,
    38,
    80,
    13,
    0,
    11,
    32,
    38,
    122,
    167,
    34,
    22,
    65,
    3,
    118,
    34,
    21,
    32,
    8,
    106,
    65,
    122,
    106,
    34,
    6,
    32,
    9,
    77,
    13,
    0,
    32,
    15,
    32,
    6,
    77,
    13,
    17,
    32,
    7,
    32,
    21,
    106,
    32,
    8,
    106,
    34,
    4,
    65,
    121,
    106,
    65,
    129,
    130,
    2,
    75,
    13,
    13,
    32,
    4,
    65,
    248,
    253,
    125,
    106,
    69,
    13,
    14,
    32,
    21,
    32,
    29,
    106,
    32,
    8,
    106,
    65,
    249,
    255,
    7,
    106,
    47,
    0,
    0,
    33,
    30,
    32,
    6,
    33,
    9,
    32,
    12,
    33,
    4,
    11,
    32,
    28,
    65,
    127,
    106,
    34,
    28,
    13,
    0,
    11,
    12,
    16,
    11,
    32,
    14,
    40,
    2,
    0,
    34,
    5,
    32,
    16,
    65,
    127,
    106,
    65,
    255,
    255,
    1,
    113,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    33,
    9,
    32,
    5,
    32,
    7,
    106,
    65,
    128,
    128,
    8,
    106,
    33,
    5,
    3,
    64,
    32,
    4,
    32,
    5,
    106,
    45,
    0,
    0,
    32,
    9,
    71,
    13,
    1,
    32,
    10,
    32,
    4,
    65,
    1,
    106,
    34,
    4,
    71,
    13,
    0,
    11,
    32,
    10,
    33,
    4,
    11,
    65,
    0,
    32,
    4,
    32,
    4,
    65,
    3,
    73,
    27,
    33,
    9,
    32,
    4,
    65,
    2,
    75,
    33,
    4,
    12,
    14,
    11,
    32,
    1,
    32,
    16,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    10,
    54,
    2,
    220,
    128,
    4,
    32,
    1,
    32,
    11,
    54,
    2,
    172,
    128,
    4,
    32,
    1,
    32,
    19,
    58,
    0,
    197,
    128,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    156,
    128,
    4,
    32,
    1,
    32,
    17,
    54,
    2,
    152,
    128,
    4,
    12,
    17,
    11,
    32,
    11,
    32,
    5,
    65,
    232,
    173,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    32,
    18,
    65,
    232,
    173,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    5,
    65,
    130,
    130,
    2,
    65,
    132,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    130,
    130,
    2,
    65,
    148,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    130,
    130,
    2,
    65,
    132,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    21,
    65,
    130,
    130,
    2,
    65,
    148,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    16,
    65,
    255,
    255,
    1,
    113,
    32,
    6,
    106,
    65,
    10,
    106,
    65,
    130,
    130,
    2,
    65,
    212,
    153,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    22,
    65,
    255,
    255,
    1,
    113,
    32,
    6,
    106,
    65,
    10,
    106,
    65,
    130,
    130,
    2,
    65,
    212,
    153,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    16,
    65,
    255,
    255,
    1,
    113,
    32,
    22,
    65,
    3,
    118,
    106,
    32,
    8,
    106,
    65,
    121,
    106,
    65,
    130,
    130,
    2,
    65,
    132,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    16,
    65,
    255,
    255,
    1,
    113,
    32,
    22,
    65,
    3,
    118,
    106,
    32,
    8,
    106,
    65,
    122,
    106,
    65,
    130,
    130,
    2,
    65,
    148,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    32,
    5,
    65,
    248,
    173,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    65,
    130,
    130,
    2,
    65,
    248,
    173,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    15,
    33,
    9,
    32,
    12,
    33,
    4,
    11,
    65,
    0,
    32,
    4,
    32,
    9,
    65,
    3,
    70,
    32,
    4,
    65,
    255,
    63,
    75,
    113,
    32,
    23,
    65,
    128,
    128,
    8,
    113,
    65,
    17,
    118,
    32,
    9,
    65,
    6,
    73,
    113,
    114,
    32,
    4,
    32,
    7,
    70,
    114,
    34,
    5,
    27,
    33,
    6,
    65,
    0,
    32,
    9,
    32,
    5,
    27,
    33,
    5,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    127,
    32,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    33,
    4,
    32,
    5,
    32,
    3,
    77,
    13,
    3,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    128,
    128,
    4,
    79,
    13,
    26,
    32,
    1,
    32,
    3,
    106,
    65,
    16,
    106,
    32,
    19,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    3,
    65,
    128,
    128,
    4,
    79,
    13,
    2,
    32,
    1,
    32,
    3,
    106,
    65,
    16,
    106,
    34,
    3,
    32,
    3,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    3,
    54,
    2,
    12,
    32,
    3,
    69,
    4,
    64,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    65,
    1,
    106,
    54,
    2,
    0,
    11,
    32,
    4,
    32,
    19,
    65,
    1,
    116,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    5,
    65,
    255,
    0,
    75,
    4,
    64,
    12,
    7,
    11,
    32,
    14,
    40,
    2,
    0,
    32,
    7,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    12,
    1,
    11,
    2,
    64,
    32,
    6,
    4,
    64,
    32,
    23,
    65,
    128,
    128,
    4,
    113,
    32,
    5,
    65,
    255,
    0,
    75,
    114,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    196,
    128,
    4,
    69,
    13,
    2,
    11,
    12,
    7,
    11,
    32,
    14,
    40,
    2,
    0,
    32,
    7,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    33,
    3,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    5,
    65,
    128,
    128,
    4,
    79,
    13,
    4,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    1,
    32,
    5,
    106,
    65,
    16,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    5,
    65,
    128,
    128,
    4,
    79,
    13,
    5,
    32,
    1,
    32,
    5,
    106,
    65,
    16,
    106,
    34,
    5,
    32,
    5,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    5,
    54,
    2,
    12,
    32,
    5,
    69,
    4,
    64,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    5,
    54,
    2,
    4,
    32,
    1,
    32,
    5,
    65,
    1,
    106,
    54,
    2,
    0,
    11,
    65,
    1,
    33,
    4,
    32,
    3,
    65,
    1,
    116,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    65,
    0,
    12,
    7,
    11,
    32,
    14,
    40,
    2,
    0,
    32,
    7,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    11,
    33,
    19,
    65,
    1,
    33,
    4,
    32,
    6,
    33,
    17,
    32,
    5,
    12,
    5,
    11,
    32,
    3,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    32,
    3,
    32,
    17,
    16,
    35,
    32,
    3,
    65,
    127,
    106,
    33,
    4,
    65,
    0,
    12,
    3,
    11,
    32,
    5,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    1,
    32,
    5,
    32,
    6,
    16,
    35,
    32,
    5,
    33,
    4,
    65,
    0,
    11,
    33,
    3,
    32,
    10,
    32,
    4,
    73,
    13,
    1,
    32,
    4,
    32,
    16,
    106,
    33,
    16,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    32,
    4,
    106,
    34,
    5,
    65,
    128,
    128,
    2,
    32,
    5,
    65,
    128,
    128,
    2,
    73,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    10,
    32,
    4,
    107,
    33,
    10,
    32,
    1,
    40,
    2,
    0,
    33,
    5,
    2,
    64,
    32,
    1,
    40,
    2,
    8,
    34,
    4,
    65,
    129,
    248,
    1,
    79,
    4,
    64,
    32,
    5,
    65,
    248,
    255,
    3,
    75,
    32,
    5,
    65,
    243,
    0,
    108,
    65,
    7,
    118,
    32,
    4,
    79,
    114,
    13,
    1,
    32,
    1,
    40,
    2,
    144,
    128,
    4,
    65,
    128,
    128,
    32,
    113,
    69,
    13,
    2,
    12,
    1,
    11,
    32,
    5,
    65,
    249,
    255,
    3,
    73,
    13,
    1,
    11,
    32,
    1,
    32,
    16,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    10,
    54,
    2,
    220,
    128,
    4,
    32,
    1,
    32,
    11,
    54,
    2,
    172,
    128,
    4,
    32,
    13,
    65,
    24,
    106,
    32,
    1,
    32,
    2,
    65,
    0,
    16,
    5,
    65,
    127,
    32,
    13,
    40,
    2,
    28,
    32,
    13,
    40,
    2,
    24,
    27,
    34,
    5,
    69,
    13,
    0,
    11,
    32,
    1,
    32,
    3,
    54,
    2,
    156,
    128,
    4,
    32,
    1,
    32,
    17,
    54,
    2,
    152,
    128,
    4,
    32,
    1,
    32,
    19,
    58,
    0,
    197,
    128,
    4,
    32,
    5,
    65,
    0,
    74,
    13,
    2,
    32,
    1,
    40,
    2,
    172,
    128,
    4,
    33,
    5,
    12,
    15,
    11,
    65,
    136,
    174,
    192,
    0,
    65,
    47,
    65,
    184,
    174,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    2,
    40,
    2,
    0,
    34,
    16,
    69,
    13,
    1,
    32,
    1,
    65,
    224,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    11,
    65,
    255,
    255,
    1,
    113,
    33,
    9,
    32,
    2,
    40,
    2,
    4,
    33,
    10,
    32,
    1,
    40,
    2,
    220,
    128,
    4,
    33,
    3,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    33,
    17,
    65,
    0,
    33,
    5,
    3,
    64,
    2,
    64,
    2,
    64,
    32,
    10,
    32,
    5,
    77,
    4,
    64,
    32,
    3,
    69,
    13,
    1,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    69,
    13,
    1,
    11,
    65,
    128,
    32,
    32,
    3,
    107,
    34,
    4,
    32,
    10,
    32,
    5,
    107,
    34,
    6,
    32,
    6,
    32,
    4,
    75,
    27,
    34,
    4,
    4,
    64,
    32,
    3,
    32,
    11,
    106,
    33,
    12,
    32,
    5,
    33,
    8,
    32,
    4,
    33,
    6,
    3,
    64,
    32,
    6,
    65,
    128,
    128,
    2,
    32,
    12,
    65,
    255,
    255,
    1,
    113,
    34,
    15,
    107,
    34,
    5,
    32,
    5,
    32,
    6,
    75,
    27,
    34,
    7,
    32,
    15,
    106,
    34,
    12,
    65,
    131,
    130,
    2,
    79,
    13,
    17,
    32,
    7,
    32,
    8,
    106,
    34,
    5,
    32,
    7,
    73,
    13,
    16,
    32,
    10,
    32,
    5,
    73,
    13,
    15,
    32,
    17,
    40,
    2,
    0,
    32,
    15,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    8,
    32,
    16,
    106,
    34,
    19,
    32,
    7,
    16,
    121,
    26,
    32,
    15,
    65,
    128,
    2,
    77,
    4,
    64,
    65,
    129,
    2,
    32,
    15,
    107,
    34,
    14,
    32,
    7,
    32,
    7,
    32,
    14,
    75,
    27,
    34,
    14,
    32,
    15,
    65,
    128,
    128,
    2,
    114,
    34,
    18,
    106,
    34,
    15,
    65,
    131,
    130,
    2,
    79,
    13,
    15,
    32,
    8,
    32,
    14,
    106,
    34,
    15,
    32,
    14,
    73,
    13,
    14,
    32,
    10,
    32,
    15,
    73,
    13,
    13,
    32,
    17,
    40,
    2,
    0,
    32,
    18,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    19,
    32,
    14,
    16,
    121,
    26,
    11,
    32,
    5,
    33,
    8,
    32,
    6,
    32,
    7,
    107,
    34,
    6,
    13,
    0,
    11,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    34,
    6,
    65,
    128,
    128,
    2,
    32,
    3,
    32,
    4,
    106,
    34,
    12,
    107,
    34,
    3,
    32,
    3,
    32,
    6,
    75,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    12,
    65,
    255,
    31,
    75,
    13,
    1,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    13,
    1,
    32,
    12,
    33,
    3,
    11,
    32,
    1,
    32,
    11,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    220,
    128,
    4,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    12,
    2,
    11,
    2,
    64,
    32,
    12,
    65,
    4,
    79,
    4,
    64,
    3,
    64,
    32,
    17,
    40,
    2,
    0,
    34,
    3,
    32,
    3,
    32,
    9,
    65,
    255,
    255,
    1,
    113,
    106,
    65,
    128,
    128,
    8,
    106,
    40,
    0,
    0,
    34,
    6,
    65,
    255,
    255,
    255,
    7,
    113,
    34,
    3,
    65,
    17,
    118,
    32,
    6,
    65,
    255,
    31,
    113,
    115,
    65,
    1,
    116,
    106,
    65,
    128,
    128,
    4,
    106,
    34,
    4,
    47,
    1,
    0,
    33,
    8,
    32,
    4,
    32,
    11,
    59,
    1,
    0,
    2,
    64,
    32,
    11,
    32,
    8,
    107,
    34,
    15,
    65,
    255,
    255,
    3,
    113,
    34,
    7,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    75,
    13,
    0,
    2,
    64,
    2,
    64,
    32,
    3,
    32,
    17,
    40,
    2,
    0,
    34,
    4,
    32,
    8,
    65,
    255,
    255,
    1,
    113,
    34,
    3,
    106,
    65,
    128,
    128,
    8,
    106,
    40,
    0,
    0,
    65,
    255,
    255,
    255,
    7,
    113,
    70,
    4,
    64,
    32,
    4,
    65,
    131,
    128,
    8,
    106,
    34,
    4,
    32,
    3,
    106,
    33,
    14,
    32,
    4,
    32,
    9,
    106,
    33,
    19,
    65,
    255,
    129,
    2,
    32,
    3,
    107,
    65,
    248,
    255,
    3,
    113,
    65,
    8,
    106,
    33,
    18,
    65,
    0,
    33,
    3,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    3,
    65,
    128,
    2,
    70,
    4,
    64,
    65,
    130,
    2,
    33,
    3,
    32,
    7,
    13,
    6,
    12,
    2,
    11,
    32,
    3,
    32,
    9,
    106,
    34,
    4,
    65,
    3,
    106,
    65,
    120,
    79,
    13,
    2,
    32,
    4,
    65,
    11,
    106,
    65,
    131,
    130,
    2,
    79,
    13,
    3,
    32,
    18,
    32,
    3,
    65,
    8,
    106,
    34,
    4,
    70,
    13,
    4,
    32,
    3,
    32,
    19,
    106,
    33,
    20,
    32,
    3,
    32,
    14,
    106,
    32,
    4,
    33,
    3,
    41,
    0,
    0,
    32,
    20,
    41,
    0,
    0,
    133,
    34,
    38,
    80,
    13,
    0,
    11,
    32,
    38,
    122,
    167,
    65,
    3,
    118,
    32,
    4,
    106,
    34,
    4,
    65,
    123,
    106,
    34,
    3,
    65,
    3,
    73,
    13,
    0,
    32,
    4,
    65,
    120,
    106,
    32,
    7,
    65,
    128,
    192,
    0,
    73,
    114,
    13,
    4,
    11,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    128,
    128,
    4,
    79,
    13,
    27,
    32,
    1,
    32,
    3,
    106,
    65,
    16,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    65,
    128,
    128,
    4,
    73,
    13,
    5,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    3,
    106,
    32,
    4,
    65,
    11,
    106,
    65,
    212,
    153,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    4,
    65,
    11,
    106,
    65,
    130,
    130,
    2,
    65,
    212,
    153,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    65,
    255,
    255,
    1,
    113,
    32,
    3,
    106,
    65,
    11,
    106,
    65,
    130,
    130,
    2,
    65,
    212,
    153,
    192,
    0,
    16,
    99,
    0,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    65,
    128,
    128,
    4,
    73,
    4,
    64,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    12,
    32,
    3,
    32,
    3,
    32,
    12,
    75,
    27,
    34,
    3,
    65,
    125,
    106,
    34,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    1,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    15,
    65,
    127,
    106,
    34,
    4,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    8,
    54,
    2,
    0,
    32,
    8,
    65,
    128,
    128,
    4,
    79,
    13,
    2,
    32,
    1,
    32,
    8,
    106,
    65,
    16,
    106,
    32,
    4,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    34,
    8,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    7,
    65,
    128,
    128,
    4,
    79,
    13,
    3,
    32,
    1,
    32,
    7,
    106,
    65,
    16,
    106,
    34,
    7,
    32,
    7,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    7,
    65,
    128,
    128,
    4,
    79,
    13,
    4,
    32,
    1,
    32,
    7,
    106,
    65,
    16,
    106,
    34,
    7,
    32,
    7,
    45,
    0,
    0,
    65,
    128,
    1,
    114,
    58,
    0,
    0,
    2,
    64,
    2,
    64,
    2,
    127,
    32,
    4,
    65,
    255,
    255,
    3,
    113,
    34,
    7,
    65,
    128,
    4,
    79,
    4,
    64,
    32,
    4,
    65,
    16,
    116,
    65,
    16,
    117,
    65,
    127,
    76,
    13,
    2,
    32,
    8,
    65,
    136,
    169,
    192,
    0,
    106,
    12,
    1,
    11,
    32,
    7,
    65,
    136,
    161,
    192,
    0,
    106,
    11,
    33,
    4,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    45,
    0,
    0,
    65,
    1,
    116,
    106,
    65,
    192,
    4,
    106,
    34,
    4,
    32,
    4,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    6,
    65,
    255,
    1,
    75,
    13,
    1,
    32,
    6,
    65,
    1,
    116,
    65,
    164,
    154,
    192,
    0,
    106,
    47,
    1,
    0,
    34,
    4,
    65,
    160,
    2,
    73,
    13,
    9,
    32,
    4,
    65,
    160,
    2,
    65,
    168,
    175,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    128,
    1,
    65,
    136,
    175,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    128,
    2,
    65,
    152,
    175,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    128,
    128,
    4,
    79,
    13,
    22,
    32,
    1,
    32,
    3,
    106,
    65,
    16,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    65,
    128,
    128,
    4,
    73,
    13,
    0,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    1,
    33,
    3,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    34,
    4,
    32,
    4,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    6,
    65,
    255,
    1,
    113,
    33,
    4,
    11,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    65,
    1,
    116,
    106,
    34,
    4,
    32,
    4,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    4,
    54,
    2,
    12,
    2,
    64,
    32,
    4,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    33,
    4,
    12,
    1,
    11,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    54,
    2,
    4,
    32,
    1,
    32,
    4,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    32,
    3,
    106,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    32,
    3,
    106,
    34,
    6,
    65,
    128,
    128,
    2,
    32,
    6,
    65,
    128,
    128,
    2,
    73,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    12,
    32,
    3,
    107,
    33,
    12,
    32,
    3,
    32,
    11,
    106,
    33,
    11,
    32,
    3,
    32,
    9,
    106,
    65,
    255,
    255,
    1,
    113,
    33,
    9,
    32,
    4,
    65,
    249,
    255,
    3,
    73,
    13,
    0,
    32,
    1,
    32,
    11,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    12,
    54,
    2,
    220,
    128,
    4,
    32,
    13,
    65,
    16,
    106,
    32,
    1,
    32,
    2,
    65,
    0,
    16,
    5,
    32,
    13,
    40,
    2,
    16,
    13,
    7,
    32,
    13,
    40,
    2,
    20,
    34,
    3,
    13,
    3,
    32,
    1,
    40,
    2,
    224,
    128,
    4,
    33,
    11,
    32,
    1,
    40,
    2,
    220,
    128,
    4,
    33,
    12,
    11,
    32,
    12,
    65,
    3,
    75,
    13,
    0,
    11,
    11,
    65,
    0,
    33,
    3,
    32,
    12,
    69,
    13,
    1,
    3,
    64,
    32,
    17,
    40,
    2,
    0,
    32,
    9,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    33,
    4,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    6,
    65,
    128,
    128,
    4,
    79,
    13,
    6,
    32,
    1,
    32,
    6,
    106,
    65,
    16,
    106,
    32,
    4,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    65,
    128,
    128,
    4,
    79,
    13,
    7,
    32,
    1,
    32,
    6,
    106,
    65,
    16,
    106,
    34,
    6,
    32,
    6,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    6,
    54,
    2,
    12,
    32,
    6,
    69,
    4,
    64,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    6,
    54,
    2,
    4,
    32,
    1,
    32,
    6,
    65,
    1,
    106,
    54,
    2,
    0,
    11,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    65,
    1,
    116,
    106,
    34,
    4,
    32,
    4,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    65,
    1,
    106,
    34,
    4,
    65,
    128,
    128,
    2,
    32,
    4,
    65,
    128,
    128,
    2,
    73,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    12,
    65,
    127,
    106,
    33,
    12,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    40,
    2,
    0,
    65,
    249,
    255,
    3,
    79,
    4,
    64,
    32,
    1,
    32,
    11,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    12,
    54,
    2,
    220,
    128,
    4,
    32,
    13,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    65,
    0,
    16,
    5,
    32,
    13,
    40,
    2,
    8,
    13,
    9,
    32,
    13,
    40,
    2,
    12,
    34,
    4,
    4,
    64,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    32,
    4,
    65,
    0,
    76,
    13,
    18,
    12,
    5,
    11,
    32,
    1,
    40,
    2,
    220,
    128,
    4,
    33,
    12,
    32,
    1,
    40,
    2,
    224,
    128,
    4,
    33,
    11,
    11,
    32,
    9,
    65,
    1,
    106,
    65,
    255,
    255,
    1,
    113,
    33,
    9,
    32,
    12,
    13,
    0,
    11,
    12,
    1,
    11,
    11,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    32,
    3,
    65,
    0,
    76,
    13,
    13,
    11,
    32,
    2,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    24,
    65,
    1,
    106,
    45,
    0,
    0,
    65,
    48,
    113,
    69,
    13,
    0,
    32,
    2,
    40,
    2,
    4,
    34,
    4,
    32,
    1,
    40,
    2,
    172,
    128,
    4,
    34,
    3,
    73,
    13,
    5,
    32,
    13,
    32,
    1,
    40,
    2,
    168,
    128,
    4,
    34,
    4,
    65,
    16,
    118,
    59,
    1,
    34,
    32,
    13,
    32,
    4,
    59,
    1,
    32,
    32,
    13,
    65,
    32,
    106,
    32,
    5,
    32,
    3,
    16,
    30,
    32,
    1,
    32,
    13,
    40,
    2,
    32,
    54,
    2,
    168,
    128,
    4,
    11,
    2,
    64,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    34,
    3,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    172,
    128,
    4,
    32,
    2,
    40,
    2,
    4,
    65,
    0,
    32,
    2,
    40,
    2,
    0,
    27,
    71,
    13,
    0,
    32,
    1,
    65,
    220,
    128,
    4,
    106,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    164,
    128,
    4,
    114,
    13,
    0,
    32,
    13,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    5,
    32,
    13,
    40,
    2,
    0,
    4,
    64,
    32,
    1,
    65,
    127,
    54,
    2,
    180,
    128,
    4,
    32,
    0,
    65,
    127,
    54,
    2,
    0,
    32,
    0,
    32,
    1,
    41,
    2,
    172,
    128,
    4,
    55,
    2,
    4,
    12,
    14,
    11,
    32,
    13,
    40,
    2,
    4,
    65,
    127,
    76,
    4,
    64,
    32,
    0,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    54,
    2,
    8,
    32,
    0,
    32,
    1,
    40,
    2,
    172,
    128,
    4,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    40,
    2,
    180,
    128,
    4,
    54,
    2,
    0,
    12,
    14,
    11,
    32,
    1,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    34,
    3,
    65,
    4,
    70,
    58,
    0,
    199,
    128,
    4,
    32,
    3,
    65,
    3,
    71,
    13,
    0,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    34,
    3,
    40,
    2,
    0,
    65,
    128,
    128,
    4,
    106,
    65,
    0,
    65,
    128,
    128,
    4,
    16,
    131,
    1,
    26,
    32,
    3,
    40,
    2,
    0,
    65,
    0,
    65,
    128,
    128,
    4,
    16,
    131,
    1,
    26,
    32,
    1,
    65,
    228,
    128,
    4,
    106,
    65,
    0,
    54,
    2,
    0,
    11,
    32,
    13,
    65,
    32,
    106,
    32,
    2,
    32,
    24,
    16,
    67,
    32,
    1,
    32,
    13,
    40,
    2,
    32,
    54,
    2,
    180,
    128,
    4,
    32,
    0,
    32,
    13,
    41,
    3,
    32,
    55,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    13,
    65,
    40,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    12,
    12,
    11,
    32,
    1,
    65,
    127,
    54,
    2,
    180,
    128,
    4,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    12,
    10,
    11,
    32,
    6,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    32,
    1,
    65,
    127,
    54,
    2,
    180,
    128,
    4,
    12,
    7,
    11,
    32,
    3,
    32,
    4,
    65,
    216,
    175,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    15,
    32,
    10,
    65,
    248,
    174,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    32,
    15,
    65,
    248,
    174,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    15,
    65,
    130,
    130,
    2,
    65,
    232,
    174,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    5,
    32,
    10,
    65,
    216,
    174,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    32,
    5,
    65,
    216,
    174,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    12,
    65,
    130,
    130,
    2,
    65,
    200,
    174,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    0,
    32,
    5,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    54,
    2,
    8,
    32,
    0,
    32,
    1,
    40,
    2,
    180,
    128,
    4,
    54,
    2,
    0,
    11,
    32,
    13,
    65,
    48,
    106,
    36,
    0,
    15,
    11,
    32,
    3,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    220,
    26,
    1,
    9,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    4,
    36,
    0,
    65,
    1,
    33,
    5,
    32,
    1,
    65,
    192,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    8,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    16,
    65,
    1,
    71,
    13,
    0,
    32,
    2,
    65,
    24,
    106,
    40,
    2,
    0,
    34,
    7,
    32,
    1,
    65,
    176,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    6,
    107,
    65,
    204,
    153,
    5,
    73,
    13,
    0,
    32,
    6,
    65,
    188,
    153,
    5,
    106,
    33,
    8,
    32,
    6,
    65,
    196,
    230,
    122,
    79,
    13,
    1,
    32,
    7,
    32,
    8,
    73,
    13,
    2,
    32,
    2,
    65,
    20,
    106,
    40,
    2,
    0,
    32,
    6,
    106,
    33,
    8,
    65,
    0,
    33,
    5,
    11,
    32,
    4,
    32,
    5,
    58,
    0,
    28,
    32,
    4,
    66,
    188,
    153,
    5,
    55,
    2,
    12,
    32,
    4,
    32,
    8,
    54,
    2,
    8,
    32,
    4,
    32,
    1,
    65,
    184,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    9,
    54,
    2,
    20,
    32,
    4,
    32,
    1,
    65,
    188,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    6,
    54,
    2,
    24,
    32,
    1,
    65,
    146,
    128,
    4,
    106,
    45,
    0,
    0,
    65,
    8,
    113,
    69,
    13,
    2,
    65,
    1,
    33,
    11,
    32,
    1,
    65,
    224,
    128,
    4,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    216,
    128,
    4,
    106,
    40,
    2,
    0,
    107,
    32,
    1,
    65,
    228,
    128,
    4,
    106,
    40,
    2,
    0,
    75,
    13,
    2,
    12,
    3,
    11,
    32,
    6,
    32,
    8,
    65,
    212,
    147,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    8,
    32,
    7,
    65,
    212,
    147,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    0,
    33,
    11,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    164,
    128,
    4,
    106,
    40,
    2,
    0,
    69,
    4,
    64,
    32,
    1,
    65,
    160,
    128,
    4,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    5,
    65,
    128,
    128,
    4,
    79,
    13,
    1,
    32,
    1,
    32,
    5,
    106,
    65,
    16,
    106,
    33,
    5,
    2,
    64,
    32,
    1,
    40,
    2,
    12,
    34,
    7,
    65,
    8,
    70,
    4,
    64,
    32,
    5,
    65,
    0,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    127,
    106,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    5,
    32,
    5,
    45,
    0,
    0,
    32,
    7,
    65,
    7,
    113,
    118,
    58,
    0,
    0,
    11,
    65,
    0,
    33,
    5,
    2,
    64,
    32,
    1,
    40,
    2,
    144,
    128,
    4,
    34,
    10,
    65,
    128,
    32,
    113,
    69,
    13,
    0,
    32,
    1,
    65,
    148,
    128,
    4,
    106,
    40,
    2,
    0,
    13,
    0,
    32,
    4,
    32,
    6,
    65,
    8,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    4,
    65,
    248,
    0,
    32,
    6,
    65,
    31,
    113,
    116,
    32,
    9,
    114,
    34,
    9,
    54,
    2,
    20,
    32,
    10,
    65,
    255,
    31,
    113,
    34,
    5,
    65,
    1,
    75,
    65,
    3,
    65,
    2,
    32,
    5,
    65,
    255,
    5,
    75,
    27,
    32,
    10,
    65,
    128,
    128,
    1,
    113,
    27,
    65,
    6,
    116,
    34,
    10,
    65,
    128,
    240,
    1,
    114,
    65,
    31,
    112,
    33,
    12,
    65,
    0,
    33,
    5,
    2,
    64,
    32,
    6,
    65,
    119,
    75,
    13,
    0,
    32,
    8,
    32,
    9,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    9,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    8,
    73,
    13,
    0,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    21,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    9,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    9,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    4,
    32,
    7,
    65,
    8,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    4,
    32,
    10,
    32,
    12,
    114,
    65,
    31,
    115,
    32,
    7,
    65,
    31,
    113,
    116,
    32,
    9,
    114,
    34,
    9,
    54,
    2,
    20,
    32,
    7,
    65,
    119,
    75,
    13,
    0,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    20,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    9,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    9,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    65,
    1,
    33,
    8,
    32,
    4,
    32,
    6,
    65,
    1,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    4,
    32,
    3,
    65,
    255,
    1,
    113,
    65,
    4,
    70,
    32,
    6,
    65,
    31,
    113,
    116,
    32,
    9,
    114,
    34,
    6,
    54,
    2,
    20,
    32,
    7,
    65,
    8,
    79,
    4,
    64,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    7,
    79,
    13,
    4,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    4,
    45,
    0,
    28,
    33,
    9,
    32,
    11,
    69,
    4,
    64,
    65,
    0,
    33,
    8,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    65,
    8,
    106,
    32,
    1,
    32,
    1,
    40,
    2,
    144,
    128,
    4,
    65,
    128,
    128,
    16,
    113,
    65,
    18,
    118,
    32,
    1,
    40,
    2,
    8,
    65,
    48,
    73,
    114,
    16,
    3,
    65,
    255,
    1,
    113,
    65,
    2,
    70,
    13,
    6,
    11,
    32,
    1,
    40,
    2,
    8,
    34,
    10,
    65,
    32,
    77,
    13,
    3,
    32,
    4,
    40,
    2,
    16,
    32,
    5,
    107,
    65,
    1,
    106,
    32,
    10,
    73,
    13,
    3,
    32,
    11,
    32,
    1,
    65,
    224,
    128,
    4,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    216,
    128,
    4,
    106,
    40,
    2,
    0,
    107,
    32,
    1,
    65,
    228,
    128,
    4,
    106,
    40,
    2,
    0,
    77,
    114,
    69,
    13,
    4,
    12,
    6,
    11,
    65,
    184,
    171,
    192,
    0,
    65,
    47,
    65,
    232,
    171,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    13,
    2,
    11,
    32,
    8,
    69,
    13,
    2,
    32,
    4,
    32,
    9,
    58,
    0,
    28,
    32,
    4,
    32,
    7,
    54,
    2,
    24,
    32,
    4,
    32,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    5,
    54,
    2,
    16,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    65,
    8,
    106,
    32,
    1,
    65,
    1,
    16,
    3,
    65,
    255,
    1,
    113,
    65,
    2,
    71,
    13,
    2,
    11,
    65,
    1,
    33,
    5,
    12,
    11,
    11,
    32,
    4,
    32,
    9,
    58,
    0,
    28,
    32,
    4,
    32,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    7,
    65,
    2,
    106,
    54,
    2,
    24,
    2,
    64,
    2,
    64,
    32,
    7,
    65,
    6,
    73,
    13,
    0,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    8,
    79,
    13,
    15,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    8,
    54,
    2,
    24,
    32,
    8,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    8,
    13,
    0,
    65,
    0,
    33,
    7,
    12,
    1,
    11,
    32,
    4,
    65,
    8,
    54,
    2,
    24,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    8,
    79,
    13,
    14,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    4,
    32,
    7,
    65,
    16,
    106,
    54,
    2,
    24,
    32,
    4,
    32,
    1,
    47,
    1,
    8,
    32,
    7,
    116,
    32,
    6,
    114,
    34,
    6,
    54,
    2,
    20,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    8,
    79,
    13,
    13,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    7,
    65,
    120,
    106,
    34,
    8,
    54,
    2,
    24,
    32,
    8,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    7,
    65,
    8,
    106,
    54,
    2,
    24,
    32,
    4,
    32,
    1,
    47,
    1,
    8,
    65,
    255,
    255,
    3,
    115,
    32,
    8,
    116,
    32,
    6,
    114,
    34,
    7,
    54,
    2,
    20,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    12,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    1,
    40,
    2,
    8,
    34,
    11,
    69,
    13,
    0,
    65,
    0,
    33,
    9,
    3,
    64,
    32,
    1,
    40,
    2,
    212,
    128,
    4,
    32,
    1,
    40,
    2,
    216,
    128,
    4,
    32,
    9,
    106,
    65,
    255,
    255,
    1,
    113,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    33,
    10,
    32,
    4,
    32,
    6,
    65,
    8,
    106,
    34,
    8,
    54,
    2,
    24,
    32,
    4,
    32,
    10,
    32,
    6,
    65,
    31,
    113,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    20,
    2,
    64,
    32,
    6,
    65,
    119,
    75,
    4,
    64,
    32,
    8,
    33,
    6,
    12,
    1,
    11,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    14,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    9,
    65,
    1,
    106,
    34,
    9,
    32,
    11,
    71,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    255,
    1,
    113,
    34,
    6,
    69,
    13,
    1,
    32,
    4,
    40,
    2,
    24,
    33,
    3,
    32,
    6,
    65,
    4,
    71,
    13,
    0,
    2,
    64,
    32,
    3,
    69,
    4,
    64,
    65,
    0,
    33,
    6,
    12,
    1,
    11,
    32,
    4,
    65,
    8,
    54,
    2,
    24,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    32,
    4,
    40,
    2,
    20,
    33,
    7,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    79,
    13,
    14,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    1,
    65,
    145,
    128,
    4,
    106,
    45,
    0,
    0,
    65,
    16,
    113,
    69,
    13,
    1,
    32,
    4,
    32,
    6,
    65,
    8,
    106,
    54,
    2,
    24,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    32,
    1,
    65,
    168,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    3,
    65,
    24,
    118,
    32,
    6,
    116,
    114,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    11,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    8,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    8,
    54,
    2,
    24,
    32,
    4,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    32,
    6,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    20,
    32,
    3,
    65,
    255,
    1,
    113,
    33,
    8,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    11,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    9,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    9,
    54,
    2,
    24,
    32,
    4,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    32,
    6,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    11,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    6,
    65,
    120,
    106,
    34,
    3,
    54,
    2,
    24,
    32,
    3,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    6,
    54,
    2,
    24,
    32,
    4,
    32,
    8,
    32,
    3,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    11,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    3,
    54,
    2,
    24,
    32,
    3,
    65,
    7,
    75,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    4,
    32,
    3,
    65,
    3,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    4,
    40,
    2,
    20,
    33,
    6,
    32,
    7,
    65,
    8,
    79,
    4,
    64,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    79,
    13,
    13,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    4,
    2,
    127,
    32,
    7,
    69,
    4,
    64,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    65,
    16,
    12,
    1,
    11,
    32,
    4,
    65,
    8,
    54,
    2,
    24,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    79,
    13,
    13,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    3,
    65,
    120,
    106,
    34,
    8,
    54,
    2,
    24,
    32,
    8,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    3,
    65,
    8,
    106,
    11,
    54,
    2,
    24,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    79,
    13,
    12,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    8,
    65,
    120,
    106,
    34,
    3,
    54,
    2,
    24,
    32,
    3,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    8,
    65,
    8,
    106,
    54,
    2,
    24,
    32,
    4,
    65,
    255,
    255,
    3,
    32,
    3,
    116,
    32,
    6,
    114,
    34,
    6,
    54,
    2,
    20,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    73,
    4,
    64,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    3,
    54,
    2,
    24,
    32,
    3,
    65,
    7,
    75,
    13,
    1,
    12,
    2,
    11,
    11,
    12,
    11,
    11,
    65,
    0,
    33,
    5,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    65,
    0,
    65,
    192,
    4,
    16,
    131,
    1,
    26,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    65,
    192,
    4,
    106,
    65,
    0,
    65,
    192,
    0,
    16,
    131,
    1,
    26,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    66,
    1,
    55,
    2,
    0,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    32,
    1,
    65,
    0,
    54,
    2,
    8,
    32,
    1,
    32,
    4,
    41,
    2,
    20,
    55,
    2,
    184,
    128,
    4,
    32,
    1,
    65,
    216,
    128,
    4,
    106,
    34,
    6,
    32,
    3,
    32,
    6,
    40,
    2,
    0,
    106,
    54,
    2,
    0,
    32,
    1,
    65,
    148,
    128,
    4,
    106,
    34,
    3,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    40,
    2,
    16,
    34,
    3,
    69,
    4,
    64,
    32,
    1,
    40,
    2,
    164,
    128,
    4,
    33,
    6,
    12,
    8,
    11,
    32,
    4,
    45,
    0,
    28,
    33,
    6,
    32,
    2,
    40,
    2,
    8,
    34,
    8,
    4,
    64,
    32,
    8,
    32,
    1,
    65,
    172,
    128,
    4,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    11,
    32,
    2,
    40,
    2,
    16,
    65,
    1,
    70,
    4,
    64,
    32,
    6,
    69,
    13,
    4,
    32,
    2,
    65,
    24,
    106,
    40,
    2,
    0,
    34,
    7,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    34,
    8,
    107,
    34,
    6,
    32,
    3,
    32,
    6,
    32,
    3,
    73,
    34,
    9,
    27,
    34,
    6,
    32,
    8,
    106,
    34,
    5,
    32,
    6,
    73,
    13,
    1,
    32,
    7,
    32,
    5,
    73,
    13,
    2,
    32,
    6,
    65,
    205,
    153,
    5,
    79,
    13,
    3,
    32,
    2,
    40,
    2,
    20,
    32,
    8,
    106,
    32,
    1,
    40,
    2,
    192,
    128,
    4,
    32,
    6,
    16,
    121,
    26,
    32,
    1,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    32,
    6,
    106,
    54,
    2,
    176,
    128,
    4,
    32,
    9,
    69,
    13,
    6,
    32,
    1,
    32,
    6,
    54,
    2,
    160,
    128,
    4,
    32,
    1,
    32,
    3,
    32,
    6,
    107,
    54,
    2,
    164,
    128,
    4,
    12,
    6,
    11,
    32,
    3,
    65,
    205,
    153,
    5,
    79,
    13,
    4,
    32,
    2,
    40,
    2,
    20,
    32,
    1,
    40,
    2,
    192,
    128,
    4,
    32,
    3,
    32,
    2,
    65,
    24,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    5,
    32,
    1,
    65,
    180,
    128,
    4,
    106,
    65,
    127,
    54,
    2,
    0,
    65,
    127,
    12,
    6,
    11,
    32,
    8,
    32,
    5,
    65,
    180,
    147,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    180,
    147,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    65,
    204,
    153,
    5,
    65,
    196,
    147,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    32,
    3,
    106,
    54,
    2,
    176,
    128,
    4,
    32,
    1,
    40,
    2,
    164,
    128,
    4,
    12,
    2,
    11,
    32,
    3,
    65,
    204,
    153,
    5,
    65,
    164,
    147,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    40,
    2,
    164,
    128,
    4,
    11,
    33,
    6,
    65,
    0,
    33,
    5,
    11,
    32,
    0,
    32,
    6,
    54,
    2,
    4,
    32,
    0,
    32,
    5,
    54,
    2,
    0,
    32,
    4,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    5,
    32,
    6,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    8,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    3,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    130,
    22,
    1,
    14,
    127,
    35,
    0,
    65,
    144,
    44,
    107,
    34,
    10,
    36,
    0,
    32,
    10,
    65,
    8,
    106,
    65,
    0,
    65,
    132,
    1,
    16,
    131,
    1,
    26,
    32,
    10,
    65,
    140,
    1,
    106,
    65,
    0,
    65,
    132,
    1,
    16,
    131,
    1,
    26,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    1,
    65,
    2,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    69,
    4,
    64,
    32,
    10,
    65,
    144,
    2,
    106,
    65,
    0,
    65,
    128,
    9,
    16,
    131,
    1,
    26,
    32,
    10,
    65,
    144,
    11,
    106,
    65,
    0,
    65,
    128,
    9,
    16,
    131,
    1,
    26,
    32,
    2,
    13,
    1,
    32,
    10,
    65,
    144,
    20,
    106,
    65,
    0,
    65,
    128,
    16,
    16,
    131,
    1,
    26,
    65,
    0,
    12,
    6,
    11,
    32,
    2,
    69,
    13,
    14,
    32,
    0,
    32,
    1,
    65,
    160,
    2,
    108,
    106,
    65,
    128,
    27,
    106,
    33,
    4,
    32,
    2,
    33,
    5,
    3,
    64,
    32,
    4,
    45,
    0,
    0,
    34,
    6,
    65,
    32,
    75,
    13,
    2,
    32,
    10,
    65,
    8,
    106,
    32,
    6,
    65,
    2,
    116,
    106,
    34,
    6,
    32,
    6,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    65,
    1,
    106,
    33,
    4,
    32,
    5,
    65,
    127,
    106,
    34,
    5,
    13,
    0,
    11,
    12,
    14,
    11,
    32,
    0,
    32,
    1,
    65,
    192,
    4,
    108,
    106,
    33,
    5,
    65,
    0,
    33,
    4,
    3,
    64,
    32,
    4,
    65,
    160,
    2,
    70,
    13,
    2,
    32,
    5,
    47,
    1,
    0,
    34,
    8,
    4,
    64,
    32,
    6,
    65,
    159,
    2,
    75,
    13,
    4,
    32,
    10,
    65,
    144,
    2,
    106,
    32,
    6,
    65,
    2,
    116,
    106,
    34,
    14,
    32,
    4,
    59,
    1,
    2,
    32,
    14,
    32,
    8,
    59,
    1,
    0,
    32,
    6,
    65,
    1,
    106,
    33,
    6,
    11,
    32,
    5,
    65,
    2,
    106,
    33,
    5,
    32,
    4,
    65,
    1,
    106,
    34,
    4,
    32,
    2,
    71,
    13,
    0,
    11,
    12,
    3,
    11,
    32,
    6,
    65,
    33,
    65,
    212,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    160,
    2,
    65,
    160,
    2,
    65,
    228,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    160,
    2,
    65,
    244,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    161,
    2,
    79,
    13,
    1,
    65,
    0,
    33,
    14,
    32,
    10,
    65,
    144,
    20,
    106,
    65,
    0,
    65,
    128,
    16,
    16,
    131,
    1,
    26,
    65,
    0,
    32,
    6,
    69,
    13,
    0,
    26,
    32,
    6,
    65,
    2,
    116,
    33,
    5,
    32,
    10,
    65,
    144,
    2,
    106,
    33,
    4,
    3,
    64,
    32,
    10,
    65,
    144,
    20,
    106,
    32,
    4,
    45,
    0,
    0,
    65,
    2,
    116,
    106,
    34,
    8,
    32,
    8,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    45,
    0,
    1,
    65,
    2,
    116,
    32,
    10,
    106,
    65,
    144,
    28,
    106,
    34,
    8,
    32,
    8,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    65,
    4,
    106,
    33,
    4,
    32,
    5,
    65,
    124,
    106,
    34,
    5,
    13,
    0,
    11,
    32,
    6,
    33,
    14,
    32,
    10,
    40,
    2,
    144,
    28,
    11,
    32,
    14,
    70,
    27,
    33,
    15,
    32,
    10,
    65,
    144,
    20,
    106,
    33,
    9,
    32,
    10,
    65,
    144,
    11,
    106,
    33,
    11,
    32,
    10,
    65,
    144,
    2,
    106,
    33,
    4,
    32,
    14,
    34,
    5,
    33,
    12,
    65,
    0,
    33,
    6,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    12,
    33,
    7,
    32,
    11,
    33,
    8,
    32,
    5,
    33,
    12,
    32,
    4,
    33,
    11,
    32,
    10,
    65,
    144,
    36,
    106,
    65,
    0,
    65,
    128,
    8,
    16,
    131,
    1,
    26,
    32,
    6,
    65,
    2,
    70,
    13,
    2,
    65,
    0,
    33,
    4,
    65,
    0,
    33,
    5,
    3,
    64,
    32,
    10,
    65,
    144,
    36,
    106,
    32,
    4,
    106,
    32,
    5,
    54,
    2,
    0,
    32,
    4,
    32,
    9,
    106,
    40,
    2,
    0,
    32,
    5,
    106,
    33,
    5,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    65,
    128,
    8,
    71,
    13,
    0,
    11,
    32,
    12,
    4,
    64,
    32,
    11,
    32,
    12,
    65,
    2,
    116,
    106,
    33,
    16,
    32,
    6,
    65,
    3,
    116,
    65,
    8,
    113,
    33,
    17,
    32,
    11,
    33,
    4,
    3,
    64,
    32,
    10,
    65,
    144,
    36,
    106,
    32,
    4,
    47,
    1,
    0,
    34,
    18,
    32,
    17,
    118,
    65,
    255,
    1,
    113,
    65,
    2,
    116,
    106,
    34,
    5,
    40,
    2,
    0,
    34,
    13,
    32,
    7,
    79,
    13,
    3,
    32,
    8,
    32,
    13,
    65,
    2,
    116,
    106,
    34,
    13,
    32,
    4,
    65,
    2,
    106,
    47,
    1,
    0,
    59,
    1,
    2,
    32,
    13,
    32,
    18,
    59,
    1,
    0,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    32,
    16,
    71,
    13,
    0,
    11,
    11,
    32,
    9,
    65,
    128,
    8,
    106,
    33,
    9,
    32,
    8,
    33,
    4,
    32,
    7,
    33,
    5,
    32,
    6,
    65,
    1,
    106,
    34,
    13,
    33,
    6,
    32,
    13,
    32,
    15,
    71,
    13,
    0,
    11,
    2,
    64,
    32,
    7,
    14,
    2,
    7,
    4,
    0,
    11,
    32,
    8,
    32,
    8,
    47,
    1,
    0,
    32,
    8,
    47,
    1,
    4,
    106,
    59,
    1,
    0,
    32,
    7,
    65,
    127,
    106,
    34,
    4,
    65,
    2,
    79,
    4,
    64,
    32,
    8,
    65,
    4,
    106,
    33,
    6,
    65,
    0,
    33,
    5,
    65,
    2,
    33,
    11,
    65,
    2,
    33,
    9,
    3,
    64,
    32,
    11,
    65,
    127,
    106,
    33,
    12,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    9,
    32,
    7,
    73,
    4,
    64,
    32,
    5,
    32,
    7,
    79,
    13,
    3,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    32,
    8,
    32,
    9,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    34,
    13,
    79,
    13,
    1,
    11,
    32,
    5,
    32,
    7,
    79,
    13,
    3,
    32,
    12,
    32,
    7,
    79,
    13,
    4,
    32,
    6,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    34,
    13,
    47,
    1,
    0,
    59,
    1,
    0,
    32,
    13,
    32,
    12,
    59,
    1,
    0,
    32,
    5,
    65,
    1,
    106,
    33,
    5,
    12,
    1,
    11,
    32,
    12,
    32,
    7,
    79,
    13,
    4,
    32,
    6,
    32,
    13,
    59,
    1,
    0,
    32,
    9,
    65,
    1,
    106,
    33,
    9,
    11,
    2,
    64,
    32,
    9,
    32,
    7,
    79,
    4,
    64,
    32,
    12,
    32,
    7,
    73,
    13,
    1,
    12,
    21,
    11,
    32,
    5,
    32,
    12,
    79,
    13,
    7,
    32,
    5,
    32,
    7,
    79,
    13,
    5,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    32,
    8,
    32,
    9,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    79,
    13,
    7,
    32,
    12,
    32,
    7,
    79,
    13,
    20,
    11,
    32,
    5,
    32,
    7,
    79,
    13,
    5,
    32,
    6,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    34,
    13,
    47,
    1,
    0,
    32,
    6,
    47,
    1,
    0,
    106,
    59,
    1,
    0,
    32,
    13,
    32,
    12,
    59,
    1,
    0,
    32,
    5,
    65,
    1,
    106,
    33,
    5,
    12,
    7,
    11,
    32,
    5,
    32,
    7,
    65,
    228,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    244,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    65,
    127,
    106,
    32,
    7,
    65,
    132,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    65,
    127,
    106,
    32,
    7,
    65,
    148,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    164,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    196,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    32,
    7,
    79,
    4,
    64,
    32,
    11,
    65,
    127,
    106,
    32,
    7,
    65,
    212,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    8,
    32,
    9,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    32,
    6,
    47,
    1,
    0,
    106,
    59,
    1,
    0,
    32,
    9,
    65,
    1,
    106,
    33,
    9,
    11,
    32,
    6,
    65,
    4,
    106,
    33,
    6,
    32,
    7,
    32,
    11,
    65,
    1,
    106,
    34,
    11,
    71,
    13,
    0,
    11,
    32,
    7,
    65,
    126,
    106,
    33,
    11,
    2,
    64,
    2,
    64,
    32,
    7,
    65,
    1,
    75,
    4,
    64,
    65,
    0,
    33,
    9,
    32,
    8,
    32,
    11,
    65,
    2,
    116,
    106,
    65,
    0,
    59,
    1,
    0,
    32,
    11,
    69,
    13,
    8,
    32,
    7,
    65,
    125,
    106,
    33,
    6,
    32,
    8,
    32,
    7,
    65,
    2,
    116,
    106,
    65,
    116,
    106,
    33,
    5,
    3,
    64,
    32,
    6,
    32,
    7,
    79,
    13,
    2,
    32,
    7,
    32,
    5,
    47,
    1,
    0,
    34,
    12,
    77,
    13,
    3,
    32,
    5,
    32,
    8,
    32,
    12,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    5,
    65,
    124,
    106,
    33,
    5,
    32,
    6,
    65,
    127,
    106,
    34,
    6,
    65,
    127,
    71,
    13,
    0,
    11,
    32,
    11,
    33,
    9,
    12,
    8,
    11,
    32,
    11,
    32,
    7,
    65,
    228,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    7,
    65,
    244,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    32,
    7,
    65,
    132,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    0,
    33,
    9,
    32,
    7,
    65,
    2,
    116,
    32,
    8,
    106,
    65,
    120,
    106,
    65,
    0,
    59,
    1,
    0,
    12,
    4,
    11,
    32,
    13,
    32,
    7,
    65,
    212,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    2,
    65,
    2,
    65,
    196,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    160,
    2,
    65,
    132,
    151,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    65,
    1,
    59,
    1,
    0,
    32,
    8,
    65,
    4,
    106,
    33,
    6,
    12,
    1,
    11,
    65,
    0,
    33,
    11,
    65,
    1,
    33,
    13,
    2,
    64,
    3,
    64,
    2,
    64,
    32,
    9,
    65,
    0,
    72,
    4,
    64,
    65,
    0,
    33,
    6,
    12,
    1,
    11,
    32,
    9,
    65,
    1,
    106,
    33,
    12,
    32,
    8,
    32,
    9,
    65,
    2,
    116,
    106,
    33,
    5,
    65,
    0,
    33,
    6,
    2,
    64,
    3,
    64,
    32,
    9,
    32,
    7,
    79,
    13,
    1,
    32,
    5,
    47,
    1,
    0,
    32,
    11,
    65,
    255,
    255,
    3,
    113,
    71,
    13,
    2,
    32,
    5,
    65,
    124,
    106,
    33,
    5,
    32,
    6,
    65,
    1,
    106,
    33,
    6,
    32,
    9,
    65,
    127,
    106,
    34,
    9,
    65,
    127,
    71,
    13,
    0,
    11,
    32,
    12,
    33,
    6,
    65,
    127,
    33,
    9,
    12,
    1,
    11,
    32,
    9,
    32,
    7,
    65,
    148,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    13,
    32,
    6,
    74,
    4,
    64,
    32,
    8,
    32,
    4,
    65,
    2,
    116,
    106,
    33,
    5,
    3,
    64,
    32,
    4,
    32,
    7,
    79,
    13,
    3,
    32,
    5,
    32,
    11,
    59,
    1,
    0,
    32,
    5,
    65,
    124,
    106,
    33,
    5,
    32,
    4,
    65,
    127,
    106,
    33,
    4,
    32,
    13,
    65,
    127,
    106,
    34,
    13,
    32,
    6,
    74,
    13,
    0,
    11,
    11,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    6,
    65,
    1,
    116,
    34,
    13,
    65,
    0,
    74,
    13,
    0,
    11,
    32,
    7,
    69,
    13,
    2,
    32,
    8,
    32,
    7,
    65,
    2,
    116,
    106,
    33,
    6,
    12,
    1,
    11,
    32,
    4,
    32,
    7,
    65,
    164,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    47,
    1,
    0,
    34,
    5,
    65,
    33,
    79,
    13,
    3,
    32,
    10,
    65,
    8,
    106,
    32,
    5,
    65,
    2,
    116,
    106,
    34,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    6,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    71,
    13,
    0,
    11,
    12,
    1,
    11,
    65,
    0,
    33,
    7,
    11,
    2,
    64,
    32,
    14,
    65,
    2,
    73,
    13,
    0,
    2,
    64,
    32,
    3,
    65,
    32,
    70,
    4,
    64,
    32,
    10,
    65,
    8,
    106,
    32,
    3,
    65,
    2,
    116,
    106,
    34,
    12,
    40,
    2,
    0,
    33,
    6,
    12,
    1,
    11,
    32,
    3,
    65,
    2,
    116,
    33,
    4,
    32,
    10,
    65,
    12,
    106,
    33,
    6,
    65,
    0,
    33,
    5,
    3,
    64,
    32,
    4,
    32,
    6,
    106,
    40,
    2,
    0,
    32,
    5,
    106,
    33,
    5,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    65,
    128,
    1,
    71,
    13,
    0,
    11,
    32,
    10,
    65,
    8,
    106,
    32,
    3,
    65,
    2,
    116,
    106,
    34,
    12,
    32,
    12,
    40,
    2,
    0,
    32,
    5,
    106,
    34,
    6,
    54,
    2,
    0,
    32,
    3,
    69,
    13,
    1,
    11,
    32,
    6,
    33,
    11,
    32,
    3,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    65,
    2,
    116,
    32,
    10,
    106,
    65,
    4,
    106,
    33,
    4,
    65,
    1,
    33,
    5,
    3,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    5,
    65,
    31,
    113,
    116,
    32,
    11,
    106,
    33,
    11,
    32,
    4,
    65,
    124,
    106,
    33,
    4,
    32,
    3,
    32,
    5,
    65,
    1,
    106,
    34,
    5,
    71,
    13,
    0,
    11,
    11,
    65,
    1,
    32,
    3,
    65,
    31,
    113,
    116,
    34,
    13,
    32,
    11,
    79,
    13,
    0,
    32,
    3,
    65,
    2,
    116,
    32,
    10,
    106,
    65,
    12,
    106,
    33,
    9,
    2,
    64,
    3,
    64,
    32,
    12,
    32,
    6,
    65,
    127,
    106,
    54,
    2,
    0,
    32,
    13,
    65,
    1,
    106,
    33,
    13,
    32,
    9,
    33,
    5,
    32,
    3,
    33,
    4,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    4,
    65,
    2,
    73,
    13,
    1,
    32,
    4,
    65,
    127,
    106,
    34,
    6,
    65,
    32,
    75,
    13,
    2,
    32,
    5,
    65,
    120,
    106,
    32,
    5,
    65,
    124,
    106,
    34,
    15,
    33,
    5,
    32,
    6,
    33,
    4,
    40,
    2,
    0,
    34,
    16,
    69,
    13,
    0,
    11,
    32,
    15,
    65,
    124,
    106,
    32,
    16,
    65,
    127,
    106,
    54,
    2,
    0,
    32,
    6,
    65,
    1,
    106,
    65,
    32,
    75,
    13,
    3,
    32,
    15,
    32,
    15,
    40,
    2,
    0,
    65,
    2,
    106,
    54,
    2,
    0,
    11,
    32,
    11,
    32,
    13,
    70,
    13,
    3,
    32,
    12,
    40,
    2,
    0,
    33,
    6,
    12,
    1,
    11,
    11,
    32,
    4,
    65,
    127,
    106,
    65,
    33,
    65,
    180,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    33,
    65,
    33,
    65,
    196,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    0,
    32,
    1,
    65,
    160,
    2,
    108,
    106,
    34,
    11,
    65,
    128,
    27,
    106,
    65,
    0,
    65,
    160,
    2,
    16,
    131,
    1,
    26,
    32,
    0,
    32,
    1,
    65,
    192,
    4,
    108,
    106,
    65,
    192,
    13,
    106,
    65,
    0,
    65,
    192,
    4,
    16,
    131,
    1,
    26,
    32,
    3,
    69,
    13,
    2,
    32,
    8,
    65,
    2,
    106,
    33,
    8,
    65,
    1,
    33,
    6,
    3,
    64,
    32,
    14,
    33,
    5,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    6,
    65,
    33,
    73,
    4,
    64,
    32,
    5,
    32,
    10,
    65,
    8,
    106,
    32,
    6,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    34,
    4,
    107,
    33,
    14,
    32,
    5,
    32,
    4,
    73,
    13,
    2,
    32,
    7,
    32,
    5,
    73,
    13,
    3,
    32,
    4,
    69,
    13,
    4,
    65,
    0,
    32,
    4,
    65,
    2,
    116,
    107,
    33,
    4,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    33,
    12,
    3,
    64,
    32,
    4,
    32,
    12,
    106,
    47,
    1,
    0,
    34,
    5,
    65,
    159,
    2,
    75,
    13,
    2,
    32,
    5,
    32,
    11,
    106,
    65,
    128,
    27,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    13,
    0,
    11,
    12,
    4,
    11,
    32,
    6,
    65,
    33,
    65,
    164,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    160,
    2,
    65,
    196,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    14,
    32,
    5,
    65,
    180,
    151,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    180,
    151,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    32,
    3,
    79,
    32,
    6,
    32,
    6,
    32,
    3,
    73,
    106,
    34,
    6,
    32,
    3,
    75,
    114,
    69,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    5,
    65,
    33,
    65,
    148,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    65,
    127,
    106,
    32,
    7,
    65,
    180,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    0,
    33,
    5,
    32,
    10,
    65,
    0,
    54,
    2,
    144,
    1,
    2,
    64,
    32,
    3,
    65,
    2,
    73,
    13,
    0,
    65,
    2,
    33,
    4,
    3,
    64,
    32,
    4,
    65,
    127,
    106,
    34,
    6,
    65,
    33,
    79,
    4,
    64,
    32,
    6,
    65,
    33,
    65,
    212,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    32,
    77,
    4,
    64,
    32,
    4,
    32,
    3,
    79,
    32,
    10,
    65,
    140,
    1,
    106,
    32,
    4,
    65,
    2,
    116,
    106,
    32,
    10,
    65,
    8,
    106,
    32,
    6,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    32,
    5,
    106,
    65,
    1,
    116,
    34,
    5,
    54,
    2,
    0,
    32,
    4,
    32,
    4,
    32,
    3,
    73,
    106,
    34,
    6,
    33,
    4,
    32,
    6,
    32,
    3,
    75,
    114,
    69,
    13,
    1,
    12,
    2,
    11,
    11,
    32,
    4,
    65,
    33,
    65,
    228,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    0,
    32,
    1,
    65,
    160,
    2,
    108,
    106,
    34,
    3,
    65,
    160,
    29,
    106,
    33,
    8,
    32,
    3,
    65,
    128,
    27,
    106,
    33,
    9,
    32,
    0,
    32,
    1,
    65,
    192,
    4,
    108,
    106,
    65,
    192,
    13,
    106,
    33,
    7,
    3,
    64,
    32,
    8,
    32,
    9,
    70,
    13,
    1,
    2,
    64,
    32,
    9,
    45,
    0,
    0,
    34,
    0,
    4,
    64,
    32,
    0,
    65,
    32,
    75,
    13,
    1,
    32,
    10,
    65,
    140,
    1,
    106,
    32,
    0,
    65,
    2,
    116,
    106,
    34,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    65,
    1,
    106,
    54,
    2,
    0,
    65,
    0,
    33,
    5,
    65,
    0,
    33,
    6,
    3,
    64,
    32,
    4,
    65,
    1,
    113,
    32,
    5,
    65,
    1,
    116,
    114,
    33,
    5,
    32,
    4,
    65,
    1,
    118,
    33,
    4,
    32,
    6,
    65,
    1,
    106,
    34,
    6,
    65,
    255,
    1,
    113,
    32,
    0,
    73,
    13,
    0,
    11,
    32,
    7,
    32,
    5,
    59,
    1,
    0,
    11,
    32,
    7,
    65,
    2,
    106,
    33,
    7,
    32,
    9,
    65,
    1,
    106,
    33,
    9,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    1,
    12,
    2,
    11,
    11,
    32,
    0,
    65,
    33,
    65,
    244,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    10,
    65,
    144,
    44,
    106,
    36,
    0,
    11,
    154,
    13,
    1,
    11,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    8,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    6,
    65,
    3,
    70,
    4,
    64,
    32,
    0,
    66,
    129,
    128,
    128,
    128,
    96,
    55,
    2,
    8,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    12,
    1,
    11,
    32,
    1,
    45,
    0,
    240,
    213,
    2,
    33,
    11,
    32,
    1,
    65,
    0,
    58,
    0,
    240,
    213,
    2,
    32,
    1,
    44,
    0,
    243,
    213,
    2,
    65,
    127,
    76,
    4,
    64,
    32,
    0,
    66,
    129,
    128,
    128,
    128,
    80,
    55,
    2,
    8,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    12,
    1,
    11,
    32,
    1,
    45,
    0,
    242,
    213,
    2,
    33,
    7,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    6,
    65,
    4,
    70,
    34,
    10,
    69,
    65,
    0,
    32,
    1,
    45,
    0,
    241,
    213,
    2,
    34,
    9,
    27,
    69,
    4,
    64,
    65,
    8,
    65,
    9,
    32,
    7,
    27,
    33,
    7,
    32,
    1,
    32,
    10,
    32,
    9,
    65,
    0,
    71,
    114,
    58,
    0,
    241,
    213,
    2,
    2,
    64,
    32,
    11,
    65,
    0,
    32,
    6,
    65,
    4,
    70,
    27,
    69,
    4,
    64,
    32,
    1,
    40,
    2,
    236,
    85,
    34,
    9,
    69,
    13,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    3,
    32,
    5,
    32,
    9,
    32,
    9,
    32,
    5,
    75,
    27,
    34,
    2,
    106,
    34,
    5,
    32,
    3,
    73,
    13,
    3,
    32,
    5,
    65,
    129,
    128,
    2,
    79,
    13,
    4,
    32,
    4,
    32,
    1,
    32,
    3,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    2,
    16,
    121,
    26,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    2,
    107,
    34,
    3,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    2,
    106,
    65,
    255,
    255,
    1,
    113,
    54,
    2,
    232,
    85,
    32,
    0,
    65,
    12,
    106,
    32,
    3,
    32,
    1,
    45,
    0,
    243,
    213,
    2,
    114,
    69,
    54,
    2,
    0,
    12,
    16,
    11,
    65,
    0,
    33,
    6,
    32,
    8,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    65,
    0,
    32,
    7,
    65,
    4,
    114,
    16,
    2,
    32,
    1,
    32,
    8,
    44,
    0,
    4,
    34,
    2,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    8,
    33,
    3,
    32,
    8,
    40,
    2,
    0,
    33,
    4,
    2,
    64,
    32,
    2,
    65,
    0,
    72,
    4,
    127,
    65,
    125,
    5,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    12,
    2,
    11,
    32,
    1,
    65,
    255,
    1,
    58,
    0,
    243,
    213,
    2,
    65,
    123,
    11,
    33,
    1,
    65,
    1,
    33,
    6,
    11,
    32,
    0,
    32,
    6,
    54,
    2,
    8,
    32,
    0,
    32,
    3,
    54,
    2,
    4,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    12,
    106,
    32,
    1,
    54,
    2,
    0,
    12,
    15,
    11,
    32,
    7,
    32,
    7,
    65,
    2,
    114,
    32,
    6,
    65,
    4,
    70,
    27,
    33,
    14,
    32,
    1,
    65,
    240,
    213,
    0,
    106,
    33,
    15,
    32,
    1,
    40,
    2,
    232,
    85,
    33,
    7,
    32,
    3,
    69,
    13,
    3,
    32,
    8,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    7,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    45,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    32,
    3,
    75,
    13,
    11,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    6,
    65,
    4,
    70,
    13,
    10,
    65,
    0,
    33,
    11,
    3,
    64,
    32,
    1,
    32,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    10,
    32,
    5,
    32,
    7,
    32,
    7,
    32,
    5,
    75,
    27,
    34,
    6,
    106,
    34,
    7,
    32,
    10,
    73,
    13,
    17,
    32,
    7,
    65,
    129,
    128,
    2,
    79,
    13,
    16,
    32,
    12,
    32,
    13,
    106,
    33,
    13,
    32,
    4,
    32,
    1,
    32,
    10,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    6,
    16,
    121,
    33,
    10,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    6,
    107,
    34,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    6,
    106,
    65,
    255,
    255,
    1,
    113,
    34,
    16,
    54,
    2,
    232,
    85,
    32,
    6,
    32,
    11,
    106,
    33,
    11,
    32,
    9,
    65,
    24,
    116,
    65,
    24,
    117,
    65,
    0,
    72,
    13,
    5,
    32,
    9,
    65,
    255,
    1,
    113,
    34,
    17,
    69,
    33,
    4,
    32,
    7,
    69,
    33,
    9,
    32,
    7,
    32,
    17,
    69,
    114,
    13,
    7,
    32,
    5,
    32,
    6,
    107,
    34,
    5,
    69,
    13,
    7,
    32,
    3,
    32,
    12,
    107,
    34,
    3,
    69,
    13,
    7,
    32,
    6,
    32,
    10,
    106,
    33,
    4,
    32,
    8,
    32,
    1,
    32,
    2,
    32,
    12,
    106,
    34,
    2,
    32,
    3,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    16,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    45,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    3,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    79,
    13,
    0,
    11,
    12,
    11,
    11,
    32,
    0,
    66,
    129,
    128,
    128,
    128,
    96,
    55,
    2,
    8,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    12,
    13,
    11,
    32,
    3,
    32,
    5,
    65,
    220,
    186,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    65,
    128,
    128,
    2,
    65,
    220,
    186,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    0,
    33,
    3,
    32,
    8,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    7,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    44,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    13,
    7,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    6,
    65,
    4,
    70,
    4,
    64,
    65,
    0,
    33,
    11,
    3,
    64,
    32,
    1,
    32,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    6,
    32,
    5,
    32,
    7,
    32,
    7,
    32,
    5,
    75,
    27,
    34,
    3,
    106,
    34,
    7,
    32,
    6,
    73,
    13,
    6,
    32,
    7,
    65,
    128,
    128,
    2,
    75,
    13,
    7,
    32,
    4,
    32,
    1,
    32,
    6,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    3,
    16,
    121,
    33,
    7,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    3,
    107,
    34,
    4,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    3,
    106,
    65,
    255,
    255,
    1,
    113,
    34,
    12,
    54,
    2,
    232,
    85,
    32,
    3,
    32,
    11,
    106,
    33,
    11,
    65,
    1,
    33,
    10,
    32,
    9,
    65,
    24,
    116,
    65,
    24,
    117,
    65,
    0,
    72,
    4,
    64,
    65,
    125,
    33,
    6,
    12,
    12,
    11,
    65,
    123,
    33,
    6,
    2,
    64,
    32,
    9,
    65,
    255,
    1,
    113,
    14,
    2,
    6,
    12,
    0,
    11,
    32,
    5,
    32,
    3,
    107,
    34,
    5,
    69,
    13,
    11,
    32,
    3,
    32,
    7,
    106,
    33,
    4,
    65,
    0,
    33,
    3,
    32,
    8,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    12,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    45,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    69,
    13,
    0,
    11,
    12,
    8,
    11,
    32,
    1,
    32,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    6,
    32,
    5,
    32,
    7,
    32,
    7,
    32,
    5,
    75,
    27,
    34,
    11,
    106,
    34,
    7,
    32,
    6,
    73,
    13,
    4,
    32,
    7,
    65,
    129,
    128,
    2,
    79,
    13,
    5,
    32,
    4,
    32,
    1,
    32,
    6,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    11,
    16,
    121,
    26,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    11,
    107,
    34,
    2,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    11,
    106,
    65,
    255,
    255,
    1,
    113,
    54,
    2,
    232,
    85,
    32,
    9,
    65,
    0,
    78,
    13,
    1,
    11,
    65,
    1,
    33,
    10,
    65,
    125,
    33,
    6,
    12,
    8,
    11,
    65,
    1,
    33,
    10,
    65,
    123,
    33,
    6,
    32,
    9,
    65,
    1,
    70,
    13,
    7,
    32,
    9,
    69,
    33,
    4,
    32,
    2,
    69,
    33,
    9,
    11,
    32,
    4,
    32,
    9,
    113,
    33,
    6,
    65,
    0,
    33,
    10,
    12,
    6,
    11,
    12,
    4,
    11,
    32,
    6,
    32,
    7,
    65,
    220,
    186,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    7,
    65,
    128,
    128,
    2,
    65,
    220,
    186,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    0,
    33,
    11,
    3,
    64,
    32,
    1,
    32,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    10,
    32,
    5,
    32,
    7,
    32,
    7,
    32,
    5,
    75,
    27,
    34,
    6,
    106,
    34,
    7,
    32,
    10,
    73,
    13,
    6,
    32,
    7,
    65,
    128,
    128,
    2,
    75,
    13,
    5,
    32,
    12,
    32,
    13,
    106,
    33,
    13,
    32,
    4,
    32,
    1,
    32,
    10,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    6,
    16,
    121,
    33,
    7,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    6,
    107,
    34,
    4,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    6,
    106,
    65,
    255,
    255,
    1,
    113,
    34,
    16,
    54,
    2,
    232,
    85,
    32,
    6,
    32,
    11,
    106,
    33,
    11,
    65,
    1,
    33,
    10,
    32,
    9,
    65,
    24,
    116,
    65,
    24,
    117,
    65,
    0,
    72,
    4,
    64,
    65,
    125,
    33,
    6,
    12,
    4,
    11,
    32,
    9,
    65,
    255,
    1,
    113,
    69,
    13,
    2,
    32,
    5,
    32,
    6,
    107,
    34,
    5,
    69,
    4,
    64,
    65,
    123,
    33,
    6,
    12,
    4,
    11,
    32,
    6,
    32,
    7,
    106,
    33,
    4,
    32,
    8,
    32,
    1,
    32,
    2,
    32,
    12,
    106,
    34,
    2,
    32,
    3,
    32,
    12,
    107,
    34,
    3,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    16,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    45,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    3,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    79,
    13,
    0,
    11,
    11,
    32,
    12,
    32,
    3,
    65,
    204,
    186,
    192,
    0,
    16,
    101,
    0,
    11,
    65,
    123,
    65,
    1,
    32,
    4,
    27,
    33,
    6,
    32,
    4,
    65,
    0,
    71,
    33,
    10,
    11,
    32,
    0,
    32,
    10,
    54,
    2,
    8,
    32,
    0,
    32,
    11,
    54,
    2,
    4,
    32,
    0,
    32,
    13,
    54,
    2,
    0,
    32,
    0,
    65,
    12,
    106,
    32,
    6,
    54,
    2,
    0,
    11,
    32,
    8,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    32,
    7,
    65,
    128,
    128,
    2,
    65,
    220,
    186,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    10,
    32,
    7,
    65,
    220,
    186,
    192,
    0,
    16,
    100,
    0,
    11,
    174,
    12,
    1,
    1,
    127,
    32,
    0,
    40,
    2,
    0,
    65,
    127,
    115,
    33,
    3,
    32,
    2,
    65,
    192,
    0,
    79,
    4,
    64,
    3,
    64,
    32,
    1,
    65,
    51,
    106,
    45,
    0,
    0,
    32,
    1,
    65,
    35,
    106,
    45,
    0,
    0,
    32,
    1,
    65,
    19,
    106,
    45,
    0,
    0,
    32,
    1,
    45,
    0,
    0,
    32,
    3,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    180,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    1,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    172,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    2,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    164,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    3,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    24,
    118,
    115,
    65,
    2,
    116,
    65,
    172,
    156,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    4,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    148,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    5,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    140,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    6,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    132,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    7,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    252,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    8,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    244,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    9,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    236,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    10,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    228,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    11,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    220,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    12,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    212,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    13,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    204,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    14,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    196,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    15,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    34,
    3,
    65,
    24,
    118,
    115,
    65,
    2,
    116,
    65,
    172,
    156,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    20,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    148,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    21,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    140,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    22,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    132,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    23,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    252,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    24,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    244,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    25,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    236,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    26,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    228,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    27,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    220,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    28,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    212,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    29,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    204,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    30,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    196,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    31,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    32,
    1,
    65,
    18,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    164,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    17,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    172,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    16,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    180,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    34,
    3,
    65,
    24,
    118,
    115,
    65,
    2,
    116,
    65,
    172,
    156,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    36,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    148,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    37,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    140,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    38,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    132,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    39,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    252,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    40,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    244,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    41,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    236,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    42,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    228,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    43,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    220,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    44,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    212,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    45,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    204,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    46,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    196,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    47,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    32,
    1,
    65,
    34,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    164,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    33,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    172,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    32,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    180,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    34,
    3,
    65,
    24,
    118,
    115,
    65,
    2,
    116,
    65,
    172,
    156,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    52,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    148,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    53,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    140,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    54,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    132,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    55,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    252,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    56,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    244,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    57,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    236,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    58,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    228,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    59,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    220,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    60,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    212,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    61,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    204,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    62,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    196,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    63,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    32,
    1,
    65,
    50,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    164,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    49,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    172,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    48,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    180,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    33,
    3,
    32,
    1,
    65,
    64,
    107,
    33,
    1,
    32,
    2,
    65,
    64,
    106,
    34,
    2,
    65,
    63,
    75,
    13,
    0,
    11,
    11,
    32,
    2,
    4,
    64,
    3,
    64,
    32,
    1,
    45,
    0,
    0,
    32,
    3,
    115,
    65,
    255,
    1,
    113,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    3,
    65,
    8,
    118,
    115,
    33,
    3,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    11,
    32,
    0,
    32,
    3,
    65,
    127,
    115,
    54,
    2,
    0,
    11,
    151,
    11,
    1,
    27,
    127,
    35,
    0,
    65,
    144,
    1,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    20,
    34,
    4,
    65,
    2,
    77,
    4,
    64,
    32,
    0,
    65,
    56,
    106,
    33,
    21,
    32,
    2,
    65,
    56,
    106,
    33,
    22,
    32,
    2,
    65,
    40,
    106,
    33,
    23,
    32,
    2,
    65,
    32,
    106,
    33,
    24,
    32,
    2,
    65,
    24,
    106,
    33,
    25,
    32,
    2,
    65,
    16,
    106,
    33,
    26,
    3,
    64,
    32,
    0,
    32,
    4,
    65,
    2,
    116,
    106,
    65,
    40,
    106,
    40,
    2,
    0,
    33,
    12,
    32,
    2,
    65,
    64,
    107,
    66,
    0,
    55,
    3,
    0,
    32,
    22,
    66,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    48,
    106,
    66,
    0,
    55,
    3,
    0,
    32,
    23,
    66,
    0,
    55,
    3,
    0,
    32,
    24,
    66,
    0,
    55,
    3,
    0,
    32,
    25,
    66,
    0,
    55,
    3,
    0,
    32,
    26,
    66,
    0,
    55,
    3,
    0,
    32,
    2,
    66,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    204,
    0,
    106,
    65,
    0,
    65,
    196,
    0,
    16,
    131,
    1,
    26,
    32,
    0,
    32,
    4,
    65,
    160,
    27,
    108,
    34,
    27,
    106,
    34,
    14,
    65,
    56,
    106,
    65,
    0,
    65,
    128,
    16,
    16,
    131,
    1,
    33,
    28,
    32,
    14,
    65,
    184,
    16,
    106,
    65,
    0,
    65,
    128,
    9,
    16,
    131,
    1,
    26,
    2,
    127,
    2,
    64,
    32,
    12,
    65,
    161,
    2,
    73,
    4,
    64,
    32,
    12,
    69,
    4,
    64,
    65,
    0,
    33,
    4,
    65,
    0,
    33,
    6,
    65,
    0,
    33,
    10,
    65,
    0,
    33,
    9,
    65,
    0,
    33,
    8,
    65,
    0,
    33,
    11,
    65,
    0,
    33,
    13,
    65,
    0,
    33,
    7,
    65,
    0,
    33,
    15,
    65,
    0,
    33,
    16,
    65,
    0,
    33,
    17,
    65,
    0,
    33,
    18,
    65,
    0,
    33,
    19,
    65,
    0,
    33,
    20,
    65,
    0,
    12,
    3,
    11,
    32,
    14,
    65,
    184,
    25,
    106,
    33,
    4,
    32,
    12,
    33,
    6,
    3,
    64,
    32,
    4,
    45,
    0,
    0,
    34,
    5,
    65,
    15,
    77,
    4,
    64,
    32,
    2,
    65,
    8,
    106,
    32,
    5,
    65,
    2,
    116,
    106,
    34,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    65,
    1,
    106,
    33,
    4,
    32,
    6,
    65,
    127,
    106,
    34,
    6,
    13,
    1,
    12,
    3,
    11,
    11,
    32,
    5,
    65,
    16,
    65,
    200,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    65,
    160,
    2,
    65,
    184,
    177,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    2,
    40,
    2,
    68,
    33,
    4,
    32,
    2,
    40,
    2,
    64,
    33,
    6,
    32,
    2,
    40,
    2,
    56,
    33,
    10,
    32,
    2,
    40,
    2,
    52,
    33,
    9,
    32,
    2,
    40,
    2,
    48,
    33,
    8,
    32,
    2,
    40,
    2,
    44,
    33,
    11,
    32,
    2,
    40,
    2,
    40,
    33,
    13,
    32,
    2,
    40,
    2,
    36,
    33,
    7,
    32,
    2,
    40,
    2,
    32,
    33,
    15,
    32,
    2,
    40,
    2,
    28,
    33,
    16,
    32,
    2,
    40,
    2,
    24,
    33,
    17,
    32,
    2,
    40,
    2,
    20,
    33,
    18,
    32,
    2,
    40,
    2,
    16,
    33,
    19,
    32,
    2,
    40,
    2,
    12,
    33,
    20,
    32,
    2,
    40,
    2,
    60,
    11,
    33,
    5,
    32,
    2,
    32,
    20,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    84,
    32,
    2,
    32,
    3,
    32,
    19,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    88,
    32,
    2,
    32,
    3,
    32,
    18,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    92,
    32,
    2,
    32,
    3,
    32,
    17,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    96,
    32,
    2,
    32,
    3,
    32,
    16,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    100,
    32,
    2,
    32,
    3,
    32,
    15,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    104,
    32,
    2,
    32,
    3,
    32,
    7,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    108,
    32,
    2,
    32,
    3,
    32,
    13,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    112,
    32,
    2,
    32,
    3,
    32,
    11,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    116,
    32,
    2,
    32,
    3,
    32,
    8,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    120,
    32,
    2,
    32,
    3,
    32,
    9,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    124,
    32,
    2,
    32,
    3,
    32,
    10,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    128,
    1,
    32,
    2,
    32,
    3,
    32,
    5,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    132,
    1,
    32,
    2,
    32,
    3,
    32,
    6,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    136,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    140,
    1,
    2,
    64,
    2,
    127,
    65,
    27,
    32,
    3,
    65,
    128,
    128,
    4,
    70,
    32,
    4,
    32,
    6,
    32,
    5,
    32,
    10,
    32,
    9,
    32,
    8,
    32,
    11,
    32,
    13,
    32,
    7,
    32,
    15,
    32,
    16,
    32,
    17,
    32,
    18,
    32,
    19,
    32,
    20,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    65,
    2,
    73,
    114,
    69,
    13,
    0,
    26,
    2,
    64,
    32,
    12,
    69,
    13,
    0,
    32,
    21,
    32,
    27,
    106,
    33,
    15,
    65,
    0,
    33,
    11,
    65,
    255,
    255,
    3,
    33,
    7,
    3,
    64,
    32,
    11,
    65,
    160,
    2,
    32,
    11,
    65,
    160,
    2,
    75,
    27,
    33,
    13,
    3,
    64,
    32,
    11,
    34,
    10,
    32,
    13,
    70,
    13,
    7,
    32,
    10,
    65,
    1,
    106,
    33,
    11,
    2,
    64,
    2,
    64,
    32,
    10,
    32,
    14,
    106,
    65,
    184,
    25,
    106,
    45,
    0,
    0,
    34,
    8,
    69,
    13,
    0,
    32,
    8,
    65,
    16,
    75,
    13,
    10,
    32,
    2,
    65,
    204,
    0,
    106,
    32,
    8,
    65,
    2,
    116,
    106,
    34,
    5,
    32,
    5,
    40,
    2,
    0,
    34,
    6,
    65,
    1,
    106,
    54,
    2,
    0,
    65,
    0,
    33,
    4,
    65,
    0,
    33,
    5,
    3,
    64,
    32,
    6,
    65,
    1,
    113,
    32,
    4,
    34,
    9,
    65,
    1,
    116,
    114,
    33,
    4,
    32,
    6,
    65,
    1,
    118,
    33,
    6,
    32,
    5,
    65,
    1,
    106,
    34,
    5,
    65,
    255,
    1,
    113,
    32,
    8,
    73,
    13,
    0,
    11,
    32,
    8,
    65,
    11,
    79,
    13,
    1,
    32,
    4,
    65,
    255,
    7,
    75,
    13,
    0,
    32,
    8,
    65,
    9,
    116,
    32,
    10,
    114,
    33,
    5,
    32,
    15,
    32,
    4,
    65,
    1,
    116,
    106,
    33,
    6,
    65,
    1,
    32,
    8,
    65,
    31,
    113,
    116,
    34,
    10,
    65,
    1,
    116,
    33,
    9,
    3,
    64,
    32,
    6,
    32,
    5,
    59,
    1,
    0,
    32,
    6,
    32,
    9,
    106,
    33,
    6,
    32,
    4,
    32,
    10,
    106,
    34,
    4,
    65,
    128,
    8,
    73,
    13,
    0,
    11,
    11,
    32,
    11,
    32,
    12,
    73,
    13,
    1,
    12,
    3,
    11,
    11,
    2,
    127,
    32,
    7,
    32,
    28,
    32,
    4,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    34,
    5,
    47,
    1,
    0,
    34,
    6,
    13,
    0,
    26,
    32,
    5,
    32,
    7,
    59,
    1,
    0,
    32,
    7,
    34,
    6,
    65,
    126,
    106,
    11,
    33,
    5,
    32,
    9,
    65,
    8,
    118,
    65,
    255,
    255,
    255,
    3,
    113,
    33,
    9,
    2,
    64,
    32,
    8,
    65,
    12,
    73,
    4,
    64,
    32,
    5,
    33,
    7,
    12,
    1,
    11,
    65,
    11,
    33,
    4,
    3,
    64,
    32,
    9,
    65,
    1,
    118,
    34,
    9,
    65,
    1,
    113,
    32,
    6,
    65,
    127,
    115,
    106,
    34,
    6,
    65,
    16,
    116,
    65,
    16,
    117,
    33,
    7,
    32,
    6,
    65,
    255,
    255,
    3,
    113,
    65,
    192,
    4,
    79,
    13,
    10,
    32,
    4,
    65,
    1,
    106,
    33,
    4,
    2,
    64,
    32,
    14,
    32,
    7,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    34,
    7,
    47,
    1,
    0,
    34,
    6,
    4,
    64,
    32,
    5,
    33,
    7,
    12,
    1,
    11,
    32,
    7,
    32,
    5,
    59,
    1,
    0,
    32,
    5,
    34,
    6,
    65,
    126,
    106,
    34,
    7,
    33,
    5,
    11,
    32,
    4,
    65,
    255,
    1,
    113,
    32,
    8,
    73,
    13,
    0,
    11,
    11,
    32,
    9,
    65,
    1,
    118,
    65,
    1,
    113,
    32,
    6,
    65,
    127,
    115,
    106,
    34,
    6,
    65,
    16,
    116,
    65,
    16,
    117,
    33,
    5,
    32,
    6,
    65,
    255,
    255,
    3,
    113,
    65,
    192,
    4,
    79,
    13,
    9,
    32,
    14,
    32,
    5,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    32,
    10,
    59,
    1,
    0,
    32,
    11,
    32,
    12,
    73,
    13,
    0,
    11,
    11,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    20,
    34,
    5,
    14,
    3,
    0,
    3,
    1,
    3,
    11,
    32,
    1,
    65,
    0,
    54,
    2,
    12,
    65,
    12,
    12,
    1,
    11,
    32,
    1,
    65,
    0,
    54,
    2,
    12,
    65,
    10,
    11,
    32,
    2,
    65,
    144,
    1,
    106,
    36,
    0,
    65,
    8,
    116,
    65,
    1,
    114,
    15,
    11,
    32,
    0,
    32,
    5,
    65,
    127,
    106,
    34,
    4,
    54,
    2,
    20,
    32,
    4,
    65,
    3,
    73,
    13,
    0,
    11,
    11,
    32,
    4,
    65,
    3,
    65,
    168,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    13,
    65,
    160,
    2,
    65,
    216,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    17,
    65,
    232,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    65,
    192,
    4,
    65,
    248,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    192,
    4,
    65,
    136,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    164,
    11,
    2,
    19,
    127,
    5,
    126,
    35,
    0,
    65,
    144,
    1,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    14,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    0,
    65,
    208,
    0,
    106,
    33,
    16,
    32,
    0,
    65,
    232,
    0,
    106,
    33,
    10,
    32,
    0,
    65,
    140,
    1,
    106,
    33,
    17,
    32,
    3,
    65,
    4,
    114,
    33,
    18,
    32,
    3,
    65,
    236,
    0,
    106,
    33,
    11,
    32,
    0,
    65,
    216,
    0,
    106,
    33,
    13,
    32,
    0,
    65,
    148,
    1,
    106,
    33,
    7,
    32,
    0,
    65,
    252,
    0,
    106,
    33,
    19,
    32,
    0,
    65,
    240,
    0,
    106,
    33,
    20,
    32,
    0,
    65,
    228,
    0,
    106,
    33,
    21,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    92,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    65,
    0,
    54,
    2,
    36,
    32,
    3,
    65,
    0,
    58,
    0,
    32,
    32,
    3,
    32,
    2,
    54,
    2,
    28,
    32,
    3,
    32,
    1,
    54,
    2,
    24,
    32,
    3,
    32,
    7,
    40,
    2,
    0,
    54,
    2,
    20,
    32,
    3,
    32,
    0,
    40,
    2,
    140,
    1,
    54,
    2,
    16,
    32,
    3,
    65,
    224,
    0,
    106,
    32,
    3,
    65,
    16,
    106,
    16,
    13,
    32,
    3,
    65,
    216,
    0,
    106,
    32,
    11,
    65,
    32,
    106,
    40,
    2,
    0,
    34,
    4,
    54,
    2,
    0,
    32,
    3,
    65,
    208,
    0,
    106,
    32,
    11,
    65,
    24,
    106,
    41,
    2,
    0,
    34,
    23,
    55,
    3,
    0,
    32,
    3,
    65,
    200,
    0,
    106,
    32,
    11,
    65,
    16,
    106,
    41,
    2,
    0,
    34,
    24,
    55,
    3,
    0,
    32,
    3,
    65,
    64,
    107,
    32,
    11,
    65,
    8,
    106,
    41,
    2,
    0,
    34,
    25,
    55,
    3,
    0,
    32,
    3,
    32,
    11,
    41,
    2,
    0,
    34,
    26,
    55,
    3,
    56,
    32,
    3,
    41,
    2,
    100,
    33,
    22,
    32,
    3,
    40,
    2,
    96,
    32,
    3,
    40,
    2,
    36,
    33,
    6,
    32,
    3,
    65,
    48,
    106,
    34,
    9,
    32,
    4,
    54,
    2,
    0,
    32,
    3,
    65,
    40,
    106,
    34,
    4,
    32,
    23,
    55,
    3,
    0,
    32,
    3,
    65,
    32,
    106,
    34,
    15,
    32,
    24,
    55,
    3,
    0,
    32,
    3,
    65,
    24,
    106,
    34,
    8,
    32,
    25,
    55,
    3,
    0,
    32,
    3,
    32,
    26,
    55,
    3,
    16,
    69,
    4,
    64,
    32,
    3,
    65,
    128,
    1,
    106,
    34,
    5,
    32,
    9,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    248,
    0,
    106,
    34,
    9,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    240,
    0,
    106,
    34,
    4,
    32,
    15,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    232,
    0,
    106,
    34,
    15,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    16,
    55,
    3,
    96,
    2,
    64,
    32,
    0,
    40,
    2,
    92,
    69,
    13,
    0,
    2,
    64,
    32,
    0,
    40,
    2,
    96,
    34,
    8,
    69,
    13,
    0,
    32,
    21,
    40,
    2,
    0,
    34,
    12,
    69,
    13,
    0,
    32,
    8,
    32,
    12,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    0,
    40,
    2,
    108,
    34,
    8,
    69,
    13,
    0,
    32,
    20,
    40,
    2,
    0,
    34,
    12,
    69,
    13,
    0,
    32,
    8,
    32,
    12,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    120,
    34,
    8,
    69,
    13,
    0,
    32,
    19,
    40,
    2,
    0,
    34,
    12,
    69,
    13,
    0,
    32,
    8,
    32,
    12,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    32,
    22,
    55,
    2,
    96,
    32,
    0,
    65,
    1,
    54,
    2,
    92,
    32,
    10,
    32,
    3,
    41,
    3,
    96,
    55,
    2,
    0,
    32,
    10,
    65,
    8,
    106,
    32,
    15,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    10,
    65,
    16,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    10,
    65,
    24,
    106,
    32,
    9,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    10,
    65,
    32,
    106,
    32,
    5,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    7,
    40,
    2,
    0,
    33,
    4,
    32,
    7,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    32,
    6,
    32,
    4,
    107,
    33,
    4,
    12,
    2,
    11,
    32,
    3,
    32,
    22,
    55,
    3,
    96,
    32,
    3,
    65,
    224,
    0,
    106,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    17,
    71,
    13,
    3,
    32,
    17,
    32,
    7,
    40,
    2,
    0,
    32,
    2,
    16,
    75,
    32,
    0,
    40,
    2,
    140,
    1,
    32,
    7,
    40,
    2,
    0,
    106,
    32,
    1,
    32,
    2,
    16,
    121,
    26,
    32,
    7,
    32,
    7,
    40,
    2,
    0,
    32,
    2,
    106,
    54,
    2,
    0,
    32,
    3,
    32,
    2,
    54,
    2,
    4,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    45,
    0,
    96,
    65,
    1,
    77,
    4,
    64,
    32,
    2,
    33,
    4,
    12,
    3,
    11,
    32,
    3,
    40,
    2,
    100,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    100,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    70,
    13,
    10,
    32,
    3,
    40,
    2,
    4,
    33,
    4,
    12,
    2,
    11,
    32,
    3,
    65,
    224,
    0,
    106,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    47,
    32,
    3,
    41,
    2,
    100,
    33,
    22,
    32,
    3,
    40,
    2,
    96,
    65,
    1,
    70,
    13,
    3,
    2,
    64,
    32,
    2,
    32,
    22,
    167,
    34,
    4,
    77,
    32,
    22,
    66,
    128,
    128,
    128,
    128,
    240,
    31,
    131,
    66,
    128,
    128,
    128,
    128,
    32,
    82,
    114,
    13,
    0,
    32,
    13,
    40,
    2,
    0,
    34,
    9,
    65,
    7,
    75,
    13,
    0,
    65,
    8,
    32,
    9,
    107,
    34,
    5,
    32,
    2,
    32,
    4,
    107,
    34,
    6,
    32,
    6,
    32,
    5,
    75,
    27,
    34,
    6,
    32,
    4,
    106,
    34,
    5,
    32,
    6,
    73,
    13,
    5,
    32,
    5,
    32,
    2,
    75,
    13,
    6,
    32,
    16,
    32,
    9,
    32,
    6,
    16,
    75,
    32,
    0,
    40,
    2,
    80,
    32,
    13,
    40,
    2,
    0,
    106,
    32,
    1,
    32,
    4,
    106,
    32,
    6,
    16,
    121,
    26,
    32,
    13,
    32,
    13,
    40,
    2,
    0,
    32,
    6,
    106,
    54,
    2,
    0,
    32,
    3,
    32,
    5,
    54,
    2,
    4,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    12,
    2,
    11,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    11,
    32,
    3,
    32,
    4,
    54,
    2,
    4,
    11,
    32,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    5,
    32,
    0,
    65,
    24,
    106,
    65,
    244,
    128,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    236,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    228,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    220,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    6,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    23,
    66,
    8,
    136,
    33,
    22,
    32,
    23,
    167,
    33,
    14,
    12,
    11,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    6,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    8,
    11,
    32,
    3,
    32,
    3,
    41,
    3,
    96,
    55,
    2,
    4,
    32,
    3,
    65,
    1,
    54,
    2,
    0,
    12,
    6,
    11,
    32,
    3,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    22,
    55,
    2,
    4,
    12,
    5,
    11,
    32,
    22,
    167,
    32,
    5,
    65,
    228,
    129,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    32,
    2,
    65,
    228,
    129,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    204,
    128,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    18,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    22,
    32,
    3,
    45,
    0,
    4,
    33,
    14,
    12,
    3,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    0,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    73,
    13,
    0,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    144,
    1,
    106,
    36,
    0,
    32,
    14,
    173,
    66,
    255,
    1,
    131,
    32,
    22,
    66,
    8,
    134,
    132,
    11,
    165,
    9,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    240,
    3,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    216,
    2,
    106,
    16,
    124,
    32,
    3,
    65,
    248,
    2,
    106,
    34,
    4,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    66,
    1,
    55,
    3,
    240,
    2,
    32,
    3,
    65,
    168,
    1,
    106,
    65,
    0,
    16,
    136,
    1,
    32,
    3,
    65,
    32,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    24,
    106,
    32,
    3,
    41,
    3,
    240,
    2,
    55,
    3,
    0,
    32,
    3,
    65,
    16,
    106,
    32,
    3,
    65,
    232,
    2,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    8,
    106,
    32,
    3,
    65,
    224,
    2,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    216,
    2,
    55,
    3,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    4,
    4,
    64,
    32,
    3,
    65,
    196,
    0,
    106,
    66,
    128,
    128,
    2,
    55,
    2,
    0,
    32,
    3,
    65,
    56,
    106,
    32,
    3,
    65,
    184,
    1,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    48,
    106,
    32,
    3,
    65,
    176,
    1,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    168,
    1,
    55,
    3,
    40,
    32,
    3,
    32,
    4,
    54,
    2,
    64,
    65,
    8,
    65,
    1,
    16,
    149,
    1,
    34,
    4,
    69,
    13,
    1,
    32,
    3,
    65,
    148,
    1,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    212,
    0,
    106,
    66,
    8,
    55,
    2,
    0,
    32,
    3,
    66,
    1,
    55,
    2,
    140,
    1,
    32,
    3,
    65,
    0,
    54,
    2,
    92,
    32,
    3,
    32,
    4,
    54,
    2,
    80,
    32,
    3,
    32,
    1,
    32,
    2,
    16,
    10,
    33,
    8,
    32,
    3,
    65,
    168,
    1,
    106,
    32,
    3,
    65,
    152,
    1,
    16,
    121,
    26,
    2,
    127,
    2,
    64,
    32,
    3,
    2,
    127,
    32,
    8,
    167,
    34,
    4,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    3,
    65,
    163,
    1,
    106,
    32,
    8,
    66,
    56,
    136,
    60,
    0,
    0,
    32,
    3,
    65,
    161,
    1,
    106,
    32,
    8,
    66,
    40,
    136,
    61,
    0,
    0,
    32,
    3,
    32,
    4,
    58,
    0,
    156,
    1,
    32,
    3,
    65,
    1,
    54,
    2,
    152,
    1,
    32,
    3,
    32,
    8,
    66,
    8,
    136,
    62,
    0,
    157,
    1,
    2,
    64,
    32,
    3,
    40,
    2,
    192,
    1,
    69,
    13,
    0,
    32,
    3,
    65,
    168,
    1,
    106,
    16,
    82,
    34,
    8,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    8,
    66,
    32,
    136,
    167,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    4,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    192,
    1,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    40,
    2,
    196,
    1,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    224,
    1,
    106,
    40,
    2,
    0,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    3,
    65,
    236,
    1,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    232,
    1,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    252,
    1,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    248,
    1,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    3,
    40,
    2,
    132,
    2,
    69,
    13,
    0,
    2,
    64,
    32,
    3,
    65,
    136,
    2,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    140,
    2,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    3,
    65,
    148,
    2,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    152,
    2,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    160,
    2,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    164,
    2,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    184,
    2,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    180,
    2,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    152,
    1,
    106,
    65,
    4,
    114,
    12,
    1,
    11,
    32,
    3,
    65,
    216,
    2,
    106,
    32,
    3,
    65,
    168,
    1,
    106,
    65,
    152,
    1,
    16,
    121,
    26,
    32,
    3,
    65,
    152,
    1,
    106,
    32,
    3,
    65,
    216,
    2,
    106,
    16,
    54,
    32,
    3,
    40,
    2,
    152,
    1,
    65,
    1,
    71,
    13,
    1,
    32,
    3,
    65,
    152,
    1,
    106,
    65,
    4,
    114,
    11,
    41,
    2,
    0,
    55,
    3,
    192,
    2,
    32,
    3,
    65,
    192,
    2,
    106,
    16,
    133,
    1,
    33,
    4,
    32,
    3,
    65,
    180,
    1,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    3,
    65,
    236,
    2,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    10,
    54,
    2,
    172,
    1,
    32,
    3,
    66,
    2,
    55,
    2,
    220,
    2,
    32,
    3,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    216,
    2,
    32,
    3,
    32,
    4,
    58,
    0,
    215,
    2,
    32,
    3,
    32,
    3,
    65,
    192,
    2,
    106,
    54,
    2,
    176,
    1,
    32,
    3,
    32,
    3,
    65,
    215,
    2,
    106,
    54,
    2,
    168,
    1,
    32,
    3,
    32,
    3,
    65,
    168,
    1,
    106,
    54,
    2,
    232,
    2,
    32,
    3,
    65,
    200,
    2,
    106,
    32,
    3,
    65,
    216,
    2,
    106,
    16,
    51,
    32,
    3,
    40,
    2,
    200,
    2,
    34,
    5,
    32,
    3,
    40,
    2,
    208,
    2,
    16,
    0,
    33,
    4,
    32,
    3,
    40,
    2,
    204,
    2,
    34,
    6,
    4,
    64,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    45,
    0,
    192,
    2,
    65,
    2,
    79,
    4,
    64,
    32,
    3,
    40,
    2,
    196,
    2,
    34,
    5,
    40,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    5,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    196,
    2,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    12,
    1,
    11,
    32,
    3,
    65,
    160,
    1,
    106,
    41,
    3,
    0,
    33,
    8,
    32,
    3,
    40,
    2,
    156,
    1,
    33,
    4,
    65,
    0,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    13,
    2,
    2,
    64,
    32,
    8,
    167,
    34,
    5,
    32,
    8,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    4,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    4,
    32,
    5,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    4,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    240,
    3,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    8,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    169,
    8,
    1,
    6,
    127,
    35,
    0,
    65,
    240,
    0,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    32,
    3,
    54,
    2,
    12,
    32,
    5,
    32,
    2,
    54,
    2,
    8,
    65,
    1,
    33,
    6,
    32,
    1,
    33,
    7,
    2,
    64,
    32,
    1,
    65,
    129,
    2,
    73,
    13,
    0,
    65,
    0,
    32,
    1,
    107,
    33,
    9,
    65,
    128,
    2,
    33,
    8,
    3,
    64,
    2,
    64,
    32,
    8,
    32,
    1,
    79,
    13,
    0,
    65,
    0,
    33,
    6,
    32,
    0,
    32,
    8,
    106,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    0,
    32,
    8,
    33,
    7,
    12,
    2,
    11,
    32,
    8,
    65,
    127,
    106,
    33,
    7,
    65,
    0,
    33,
    6,
    32,
    8,
    65,
    1,
    70,
    13,
    1,
    32,
    8,
    32,
    9,
    106,
    32,
    7,
    33,
    8,
    65,
    1,
    71,
    13,
    0,
    11,
    11,
    32,
    5,
    32,
    7,
    54,
    2,
    20,
    32,
    5,
    32,
    0,
    54,
    2,
    16,
    32,
    5,
    65,
    0,
    65,
    5,
    32,
    6,
    27,
    54,
    2,
    28,
    32,
    5,
    65,
    228,
    196,
    193,
    0,
    65,
    136,
    203,
    193,
    0,
    32,
    6,
    27,
    54,
    2,
    24,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    2,
    32,
    1,
    75,
    34,
    6,
    32,
    3,
    32,
    1,
    75,
    114,
    69,
    4,
    64,
    32,
    2,
    32,
    3,
    75,
    13,
    1,
    2,
    64,
    32,
    2,
    69,
    32,
    1,
    32,
    2,
    70,
    114,
    69,
    4,
    64,
    32,
    1,
    32,
    2,
    77,
    13,
    1,
    32,
    0,
    32,
    2,
    106,
    44,
    0,
    0,
    65,
    64,
    72,
    13,
    1,
    11,
    32,
    3,
    33,
    2,
    11,
    32,
    5,
    32,
    2,
    54,
    2,
    32,
    32,
    2,
    65,
    0,
    32,
    1,
    32,
    2,
    71,
    27,
    69,
    4,
    64,
    32,
    2,
    33,
    6,
    12,
    3,
    11,
    32,
    1,
    65,
    1,
    106,
    33,
    3,
    3,
    64,
    2,
    64,
    32,
    2,
    32,
    1,
    79,
    13,
    0,
    32,
    0,
    32,
    2,
    106,
    44,
    0,
    0,
    65,
    64,
    72,
    13,
    0,
    32,
    2,
    33,
    6,
    32,
    5,
    65,
    36,
    106,
    12,
    5,
    11,
    32,
    2,
    65,
    127,
    106,
    33,
    6,
    32,
    2,
    65,
    1,
    70,
    13,
    3,
    32,
    2,
    32,
    3,
    70,
    32,
    6,
    33,
    2,
    69,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    5,
    32,
    2,
    32,
    3,
    32,
    6,
    27,
    54,
    2,
    40,
    32,
    5,
    65,
    196,
    0,
    106,
    65,
    3,
    54,
    2,
    0,
    32,
    5,
    65,
    220,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    66,
    3,
    55,
    2,
    52,
    32,
    5,
    65,
    176,
    203,
    193,
    0,
    54,
    2,
    48,
    32,
    5,
    65,
    61,
    54,
    2,
    76,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    64,
    32,
    5,
    32,
    5,
    65,
    24,
    106,
    54,
    2,
    88,
    32,
    5,
    32,
    5,
    65,
    16,
    106,
    54,
    2,
    80,
    32,
    5,
    32,
    5,
    65,
    40,
    106,
    54,
    2,
    72,
    12,
    3,
    11,
    32,
    5,
    65,
    228,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    220,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    5,
    65,
    196,
    0,
    106,
    65,
    4,
    54,
    2,
    0,
    32,
    5,
    66,
    4,
    55,
    2,
    52,
    32,
    5,
    65,
    236,
    203,
    193,
    0,
    54,
    2,
    48,
    32,
    5,
    65,
    61,
    54,
    2,
    76,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    64,
    32,
    5,
    32,
    5,
    65,
    24,
    106,
    54,
    2,
    96,
    32,
    5,
    32,
    5,
    65,
    16,
    106,
    54,
    2,
    88,
    32,
    5,
    32,
    5,
    65,
    12,
    106,
    54,
    2,
    80,
    32,
    5,
    32,
    5,
    65,
    8,
    106,
    54,
    2,
    72,
    12,
    2,
    11,
    32,
    5,
    65,
    36,
    106,
    11,
    33,
    8,
    2,
    64,
    32,
    1,
    32,
    6,
    70,
    13,
    0,
    65,
    1,
    33,
    3,
    65,
    0,
    33,
    9,
    2,
    64,
    32,
    0,
    32,
    6,
    106,
    34,
    7,
    44,
    0,
    0,
    34,
    2,
    65,
    0,
    78,
    4,
    64,
    32,
    5,
    32,
    2,
    65,
    255,
    1,
    113,
    54,
    2,
    36,
    32,
    5,
    65,
    40,
    106,
    33,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    1,
    106,
    34,
    1,
    33,
    3,
    32,
    1,
    32,
    7,
    65,
    1,
    106,
    71,
    4,
    64,
    32,
    7,
    45,
    0,
    1,
    65,
    63,
    113,
    33,
    9,
    32,
    7,
    65,
    2,
    106,
    33,
    3,
    11,
    32,
    2,
    65,
    31,
    113,
    33,
    10,
    2,
    64,
    32,
    2,
    65,
    255,
    1,
    113,
    65,
    224,
    1,
    73,
    4,
    64,
    32,
    9,
    32,
    10,
    65,
    6,
    116,
    114,
    33,
    2,
    12,
    1,
    11,
    65,
    0,
    33,
    0,
    32,
    1,
    33,
    7,
    32,
    1,
    32,
    3,
    71,
    4,
    127,
    32,
    3,
    65,
    1,
    106,
    33,
    7,
    32,
    3,
    45,
    0,
    0,
    65,
    63,
    113,
    5,
    32,
    0,
    11,
    32,
    9,
    65,
    6,
    116,
    114,
    33,
    0,
    32,
    2,
    65,
    255,
    1,
    113,
    65,
    240,
    1,
    73,
    4,
    64,
    32,
    0,
    32,
    10,
    65,
    12,
    116,
    114,
    33,
    2,
    12,
    1,
    11,
    65,
    0,
    33,
    2,
    32,
    1,
    32,
    7,
    71,
    4,
    127,
    32,
    7,
    45,
    0,
    0,
    65,
    63,
    113,
    5,
    32,
    2,
    11,
    32,
    10,
    65,
    18,
    116,
    65,
    128,
    128,
    240,
    0,
    113,
    32,
    0,
    65,
    6,
    116,
    114,
    114,
    34,
    2,
    65,
    128,
    128,
    196,
    0,
    70,
    13,
    2,
    11,
    32,
    5,
    32,
    2,
    54,
    2,
    36,
    65,
    1,
    33,
    3,
    32,
    5,
    65,
    40,
    106,
    33,
    1,
    32,
    2,
    65,
    128,
    1,
    73,
    13,
    0,
    65,
    2,
    33,
    3,
    32,
    2,
    65,
    128,
    16,
    73,
    13,
    0,
    65,
    3,
    65,
    4,
    32,
    2,
    65,
    128,
    128,
    4,
    73,
    27,
    33,
    3,
    11,
    32,
    5,
    32,
    6,
    54,
    2,
    40,
    32,
    5,
    32,
    3,
    32,
    6,
    106,
    54,
    2,
    44,
    32,
    5,
    65,
    196,
    0,
    106,
    65,
    5,
    54,
    2,
    0,
    32,
    5,
    65,
    236,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    228,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    220,
    0,
    106,
    65,
    63,
    54,
    2,
    0,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    192,
    0,
    54,
    2,
    0,
    32,
    5,
    66,
    5,
    55,
    2,
    52,
    32,
    5,
    65,
    192,
    204,
    193,
    0,
    54,
    2,
    48,
    32,
    5,
    32,
    1,
    54,
    2,
    88,
    32,
    5,
    32,
    8,
    54,
    2,
    80,
    32,
    5,
    65,
    61,
    54,
    2,
    76,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    64,
    32,
    5,
    32,
    5,
    65,
    24,
    106,
    54,
    2,
    104,
    32,
    5,
    32,
    5,
    65,
    16,
    106,
    54,
    2,
    96,
    32,
    5,
    32,
    5,
    65,
    32,
    106,
    54,
    2,
    72,
    12,
    1,
    11,
    65,
    240,
    196,
    193,
    0,
    65,
    43,
    32,
    4,
    16,
    114,
    0,
    11,
    32,
    5,
    65,
    48,
    106,
    32,
    4,
    16,
    130,
    1,
    0,
    11,
    176,
    8,
    2,
    11,
    127,
    1,
    126,
    35,
    0,
    65,
    208,
    0,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    16,
    124,
    32,
    2,
    32,
    1,
    54,
    2,
    24,
    32,
    2,
    65,
    40,
    106,
    65,
    0,
    59,
    1,
    0,
    32,
    2,
    66,
    0,
    55,
    3,
    32,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    32,
    2,
    65,
    32,
    106,
    65,
    10,
    16,
    41,
    34,
    13,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    2,
    64,
    32,
    2,
    45,
    0,
    32,
    65,
    31,
    70,
    4,
    64,
    32,
    2,
    45,
    0,
    33,
    65,
    139,
    1,
    70,
    13,
    1,
    11,
    16,
    90,
    33,
    13,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    12,
    5,
    11,
    32,
    2,
    45,
    0,
    34,
    65,
    8,
    71,
    4,
    64,
    16,
    90,
    33,
    13,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    12,
    5,
    11,
    32,
    2,
    45,
    0,
    41,
    33,
    9,
    32,
    2,
    40,
    2,
    36,
    33,
    10,
    32,
    2,
    45,
    0,
    35,
    34,
    6,
    65,
    4,
    113,
    69,
    13,
    3,
    32,
    2,
    65,
    0,
    59,
    1,
    64,
    32,
    2,
    32,
    2,
    65,
    64,
    107,
    65,
    2,
    16,
    41,
    34,
    13,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    13,
    2,
    2,
    64,
    32,
    2,
    47,
    1,
    64,
    34,
    3,
    69,
    4,
    64,
    65,
    1,
    33,
    5,
    12,
    1,
    11,
    32,
    3,
    16,
    139,
    1,
    34,
    5,
    69,
    13,
    2,
    11,
    32,
    2,
    32,
    5,
    32,
    3,
    16,
    41,
    34,
    13,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    13,
    3,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    32,
    3,
    69,
    13,
    4,
    32,
    5,
    32,
    3,
    65,
    1,
    16,
    156,
    1,
    12,
    4,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    12,
    3,
    11,
    32,
    3,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    12,
    1,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    6,
    65,
    8,
    113,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    56,
    32,
    2,
    66,
    1,
    55,
    3,
    48,
    32,
    2,
    32,
    2,
    54,
    2,
    60,
    32,
    2,
    65,
    64,
    107,
    32,
    2,
    65,
    60,
    106,
    16,
    70,
    2,
    64,
    32,
    2,
    45,
    0,
    64,
    34,
    1,
    65,
    2,
    70,
    13,
    0,
    3,
    64,
    32,
    1,
    65,
    255,
    1,
    113,
    65,
    1,
    70,
    13,
    3,
    32,
    2,
    45,
    0,
    65,
    34,
    4,
    69,
    13,
    1,
    32,
    2,
    40,
    2,
    56,
    34,
    1,
    32,
    2,
    40,
    2,
    52,
    70,
    4,
    127,
    32,
    2,
    65,
    48,
    106,
    32,
    1,
    65,
    1,
    16,
    75,
    32,
    2,
    40,
    2,
    56,
    5,
    32,
    1,
    11,
    32,
    2,
    40,
    2,
    48,
    106,
    32,
    4,
    58,
    0,
    0,
    32,
    2,
    32,
    2,
    40,
    2,
    56,
    65,
    1,
    106,
    54,
    2,
    56,
    32,
    2,
    65,
    64,
    107,
    32,
    2,
    65,
    60,
    106,
    16,
    70,
    32,
    2,
    45,
    0,
    64,
    34,
    1,
    65,
    2,
    71,
    13,
    0,
    11,
    11,
    32,
    2,
    40,
    2,
    56,
    33,
    11,
    32,
    2,
    40,
    2,
    48,
    33,
    8,
    32,
    2,
    40,
    2,
    52,
    33,
    7,
    11,
    32,
    6,
    65,
    16,
    113,
    13,
    1,
    65,
    0,
    12,
    2,
    11,
    32,
    2,
    41,
    2,
    68,
    33,
    13,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    32,
    2,
    40,
    2,
    52,
    34,
    0,
    69,
    13,
    4,
    32,
    2,
    40,
    2,
    48,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    12,
    4,
    11,
    32,
    2,
    65,
    0,
    54,
    2,
    56,
    32,
    2,
    66,
    1,
    55,
    3,
    48,
    32,
    2,
    32,
    2,
    54,
    2,
    60,
    32,
    2,
    65,
    64,
    107,
    32,
    2,
    65,
    60,
    106,
    16,
    70,
    2,
    64,
    32,
    2,
    45,
    0,
    64,
    34,
    1,
    65,
    2,
    70,
    13,
    0,
    3,
    64,
    32,
    1,
    65,
    255,
    1,
    113,
    65,
    1,
    70,
    13,
    3,
    32,
    2,
    45,
    0,
    65,
    34,
    4,
    69,
    13,
    1,
    32,
    2,
    40,
    2,
    56,
    34,
    1,
    32,
    2,
    40,
    2,
    52,
    70,
    4,
    127,
    32,
    2,
    65,
    48,
    106,
    32,
    1,
    65,
    1,
    16,
    75,
    32,
    2,
    40,
    2,
    56,
    5,
    32,
    1,
    11,
    32,
    2,
    40,
    2,
    48,
    106,
    32,
    4,
    58,
    0,
    0,
    32,
    2,
    32,
    2,
    40,
    2,
    56,
    65,
    1,
    106,
    54,
    2,
    56,
    32,
    2,
    65,
    64,
    107,
    32,
    2,
    65,
    60,
    106,
    16,
    70,
    32,
    2,
    45,
    0,
    64,
    34,
    1,
    65,
    2,
    71,
    13,
    0,
    11,
    11,
    32,
    2,
    40,
    2,
    52,
    33,
    4,
    32,
    2,
    40,
    2,
    56,
    33,
    12,
    32,
    2,
    40,
    2,
    48,
    11,
    33,
    1,
    32,
    6,
    65,
    2,
    113,
    69,
    13,
    3,
    32,
    2,
    16,
    147,
    1,
    33,
    6,
    32,
    2,
    65,
    0,
    59,
    1,
    64,
    32,
    2,
    32,
    2,
    65,
    64,
    107,
    65,
    2,
    16,
    41,
    34,
    13,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    2,
    47,
    1,
    64,
    32,
    6,
    65,
    255,
    255,
    3,
    113,
    70,
    13,
    4,
    16,
    79,
    33,
    13,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    32,
    1,
    69,
    32,
    4,
    69,
    114,
    13,
    1,
    32,
    1,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    2,
    41,
    2,
    68,
    33,
    13,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    32,
    2,
    40,
    2,
    52,
    34,
    0,
    69,
    13,
    0,
    32,
    2,
    40,
    2,
    48,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    7,
    69,
    32,
    8,
    69,
    114,
    13,
    0,
    32,
    8,
    32,
    7,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    69,
    32,
    5,
    69,
    114,
    13,
    1,
    32,
    5,
    32,
    3,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    5,
    54,
    2,
    4,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    44,
    106,
    32,
    9,
    58,
    0,
    0,
    32,
    0,
    65,
    40,
    106,
    32,
    10,
    54,
    2,
    0,
    32,
    0,
    65,
    36,
    106,
    32,
    12,
    54,
    2,
    0,
    32,
    0,
    65,
    32,
    106,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    28,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    24,
    106,
    32,
    11,
    54,
    2,
    0,
    32,
    0,
    65,
    20,
    106,
    32,
    7,
    54,
    2,
    0,
    32,
    0,
    65,
    16,
    106,
    32,
    8,
    54,
    2,
    0,
    32,
    0,
    65,
    12,
    106,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    3,
    54,
    2,
    0,
    11,
    32,
    2,
    65,
    208,
    0,
    106,
    36,
    0,
    11,
    152,
    7,
    1,
    10,
    127,
    32,
    0,
    40,
    2,
    16,
    33,
    3,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    8,
    34,
    12,
    65,
    1,
    70,
    4,
    64,
    32,
    3,
    65,
    1,
    71,
    13,
    2,
    12,
    1,
    11,
    32,
    3,
    65,
    1,
    70,
    13,
    0,
    12,
    2,
    11,
    32,
    1,
    32,
    2,
    106,
    33,
    3,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    20,
    106,
    40,
    2,
    0,
    34,
    8,
    69,
    4,
    64,
    32,
    1,
    33,
    4,
    12,
    1,
    11,
    32,
    1,
    33,
    4,
    3,
    64,
    32,
    3,
    32,
    4,
    34,
    7,
    70,
    13,
    2,
    32,
    7,
    65,
    1,
    106,
    33,
    4,
    2,
    64,
    32,
    7,
    44,
    0,
    0,
    34,
    6,
    65,
    127,
    74,
    13,
    0,
    32,
    6,
    65,
    255,
    1,
    113,
    33,
    9,
    2,
    127,
    32,
    3,
    32,
    4,
    70,
    4,
    64,
    65,
    0,
    33,
    10,
    32,
    3,
    12,
    1,
    11,
    32,
    7,
    45,
    0,
    1,
    65,
    63,
    113,
    33,
    10,
    32,
    7,
    65,
    2,
    106,
    34,
    4,
    11,
    33,
    6,
    32,
    9,
    65,
    224,
    1,
    73,
    13,
    0,
    2,
    127,
    32,
    3,
    32,
    6,
    70,
    4,
    64,
    65,
    0,
    33,
    11,
    32,
    3,
    12,
    1,
    11,
    32,
    6,
    45,
    0,
    0,
    65,
    63,
    113,
    33,
    11,
    32,
    6,
    65,
    1,
    106,
    34,
    4,
    11,
    33,
    6,
    32,
    9,
    65,
    240,
    1,
    73,
    13,
    0,
    32,
    3,
    32,
    6,
    70,
    4,
    127,
    65,
    0,
    5,
    32,
    6,
    65,
    1,
    106,
    33,
    4,
    32,
    6,
    45,
    0,
    0,
    65,
    63,
    113,
    11,
    32,
    9,
    65,
    18,
    116,
    65,
    128,
    128,
    240,
    0,
    113,
    32,
    10,
    65,
    12,
    116,
    114,
    32,
    11,
    65,
    6,
    116,
    114,
    114,
    65,
    128,
    128,
    196,
    0,
    70,
    13,
    3,
    11,
    32,
    4,
    32,
    7,
    107,
    32,
    5,
    106,
    33,
    5,
    32,
    8,
    65,
    127,
    106,
    34,
    8,
    13,
    0,
    11,
    11,
    32,
    3,
    32,
    4,
    70,
    13,
    0,
    2,
    64,
    32,
    4,
    44,
    0,
    0,
    34,
    7,
    65,
    127,
    74,
    13,
    0,
    2,
    127,
    32,
    3,
    32,
    4,
    65,
    1,
    106,
    70,
    4,
    64,
    32,
    3,
    33,
    8,
    65,
    0,
    12,
    1,
    11,
    32,
    4,
    65,
    2,
    106,
    33,
    8,
    32,
    4,
    45,
    0,
    1,
    65,
    63,
    113,
    65,
    6,
    116,
    11,
    32,
    7,
    65,
    255,
    1,
    113,
    65,
    224,
    1,
    73,
    13,
    0,
    2,
    127,
    32,
    3,
    32,
    8,
    70,
    4,
    64,
    32,
    3,
    33,
    6,
    65,
    0,
    12,
    1,
    11,
    32,
    8,
    65,
    1,
    106,
    33,
    6,
    32,
    8,
    45,
    0,
    0,
    65,
    63,
    113,
    11,
    32,
    7,
    65,
    255,
    1,
    113,
    65,
    240,
    1,
    73,
    13,
    0,
    32,
    7,
    65,
    255,
    1,
    113,
    33,
    7,
    114,
    33,
    4,
    32,
    3,
    32,
    6,
    70,
    4,
    127,
    65,
    0,
    5,
    32,
    6,
    45,
    0,
    0,
    65,
    63,
    113,
    11,
    32,
    7,
    65,
    18,
    116,
    65,
    128,
    128,
    240,
    0,
    113,
    32,
    4,
    65,
    6,
    116,
    114,
    114,
    65,
    128,
    128,
    196,
    0,
    70,
    13,
    1,
    11,
    2,
    64,
    32,
    5,
    69,
    32,
    2,
    32,
    5,
    70,
    114,
    69,
    4,
    64,
    65,
    0,
    33,
    3,
    32,
    5,
    32,
    2,
    79,
    13,
    1,
    32,
    1,
    32,
    5,
    106,
    44,
    0,
    0,
    65,
    64,
    72,
    13,
    1,
    11,
    32,
    1,
    33,
    3,
    11,
    32,
    5,
    32,
    2,
    32,
    3,
    27,
    33,
    2,
    32,
    3,
    32,
    1,
    32,
    3,
    27,
    33,
    1,
    11,
    32,
    12,
    65,
    1,
    70,
    13,
    0,
    12,
    1,
    11,
    2,
    64,
    32,
    2,
    4,
    64,
    65,
    0,
    33,
    4,
    32,
    2,
    33,
    5,
    32,
    1,
    33,
    3,
    3,
    64,
    32,
    4,
    32,
    3,
    45,
    0,
    0,
    65,
    192,
    1,
    113,
    65,
    128,
    1,
    71,
    106,
    33,
    4,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    5,
    65,
    127,
    106,
    34,
    5,
    13,
    0,
    11,
    32,
    4,
    32,
    0,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    2,
    65,
    0,
    33,
    4,
    32,
    2,
    33,
    5,
    32,
    1,
    33,
    3,
    3,
    64,
    32,
    4,
    32,
    3,
    45,
    0,
    0,
    65,
    192,
    1,
    113,
    65,
    128,
    1,
    71,
    106,
    33,
    4,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    5,
    65,
    127,
    106,
    34,
    5,
    13,
    0,
    11,
    12,
    1,
    11,
    65,
    0,
    33,
    4,
    32,
    0,
    40,
    2,
    12,
    34,
    6,
    13,
    0,
    12,
    1,
    11,
    65,
    0,
    33,
    3,
    32,
    6,
    32,
    4,
    107,
    34,
    4,
    33,
    5,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    0,
    32,
    0,
    45,
    0,
    32,
    34,
    6,
    32,
    6,
    65,
    3,
    70,
    27,
    65,
    3,
    113,
    65,
    1,
    107,
    14,
    3,
    1,
    0,
    1,
    2,
    11,
    32,
    4,
    65,
    1,
    118,
    33,
    3,
    32,
    4,
    65,
    1,
    106,
    65,
    1,
    118,
    33,
    5,
    12,
    1,
    11,
    65,
    0,
    33,
    5,
    32,
    4,
    33,
    3,
    11,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    2,
    127,
    2,
    64,
    3,
    64,
    32,
    3,
    65,
    127,
    106,
    34,
    3,
    4,
    64,
    32,
    0,
    40,
    2,
    24,
    32,
    0,
    40,
    2,
    4,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    1,
    12,
    2,
    11,
    11,
    32,
    0,
    40,
    2,
    4,
    33,
    4,
    65,
    1,
    32,
    0,
    40,
    2,
    24,
    32,
    1,
    32,
    2,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    1,
    26,
    32,
    5,
    65,
    1,
    106,
    33,
    3,
    32,
    0,
    40,
    2,
    28,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    33,
    0,
    3,
    64,
    32,
    3,
    65,
    127,
    106,
    34,
    3,
    69,
    4,
    64,
    65,
    0,
    15,
    11,
    32,
    0,
    32,
    4,
    32,
    1,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    11,
    65,
    1,
    11,
    15,
    11,
    32,
    0,
    40,
    2,
    24,
    32,
    1,
    32,
    2,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    153,
    8,
    2,
    11,
    127,
    1,
    126,
    65,
    1,
    33,
    9,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    24,
    65,
    34,
    32,
    2,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    16,
    17,
    0,
    0,
    13,
    0,
    2,
    64,
    32,
    1,
    69,
    4,
    64,
    12,
    1,
    11,
    32,
    0,
    32,
    1,
    106,
    33,
    10,
    32,
    0,
    34,
    6,
    33,
    12,
    3,
    64,
    2,
    64,
    32,
    6,
    65,
    1,
    106,
    33,
    5,
    2,
    64,
    2,
    64,
    32,
    6,
    44,
    0,
    0,
    34,
    7,
    65,
    0,
    78,
    4,
    64,
    32,
    7,
    65,
    255,
    1,
    113,
    33,
    4,
    12,
    1,
    11,
    2,
    127,
    32,
    5,
    32,
    10,
    70,
    4,
    64,
    65,
    0,
    33,
    4,
    32,
    10,
    12,
    1,
    11,
    32,
    6,
    45,
    0,
    1,
    65,
    63,
    113,
    33,
    4,
    32,
    6,
    65,
    2,
    106,
    34,
    5,
    11,
    33,
    6,
    32,
    7,
    65,
    31,
    113,
    33,
    11,
    32,
    7,
    65,
    255,
    1,
    113,
    34,
    13,
    65,
    224,
    1,
    73,
    4,
    64,
    32,
    4,
    32,
    11,
    65,
    6,
    116,
    114,
    33,
    4,
    12,
    1,
    11,
    2,
    127,
    32,
    6,
    32,
    10,
    70,
    4,
    64,
    65,
    0,
    33,
    9,
    32,
    10,
    12,
    1,
    11,
    32,
    6,
    45,
    0,
    0,
    65,
    63,
    113,
    33,
    9,
    32,
    6,
    65,
    1,
    106,
    34,
    5,
    11,
    33,
    7,
    32,
    9,
    32,
    4,
    65,
    6,
    116,
    114,
    33,
    4,
    32,
    13,
    65,
    240,
    1,
    73,
    4,
    64,
    32,
    4,
    32,
    11,
    65,
    12,
    116,
    114,
    33,
    4,
    12,
    1,
    11,
    2,
    127,
    32,
    7,
    32,
    10,
    70,
    4,
    64,
    32,
    5,
    33,
    6,
    65,
    0,
    12,
    1,
    11,
    32,
    7,
    65,
    1,
    106,
    33,
    6,
    32,
    7,
    45,
    0,
    0,
    65,
    63,
    113,
    11,
    32,
    11,
    65,
    18,
    116,
    65,
    128,
    128,
    240,
    0,
    113,
    32,
    4,
    65,
    6,
    116,
    114,
    114,
    34,
    4,
    65,
    128,
    128,
    196,
    0,
    71,
    13,
    1,
    12,
    2,
    11,
    32,
    5,
    33,
    6,
    11,
    65,
    2,
    33,
    5,
    65,
    244,
    0,
    33,
    7,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    119,
    106,
    14,
    31,
    5,
    1,
    3,
    3,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    3,
    3,
    3,
    3,
    4,
    2,
    11,
    65,
    242,
    0,
    33,
    7,
    12,
    4,
    11,
    65,
    238,
    0,
    33,
    7,
    12,
    3,
    11,
    32,
    4,
    65,
    220,
    0,
    70,
    13,
    1,
    11,
    32,
    4,
    16,
    40,
    69,
    4,
    64,
    32,
    4,
    16,
    21,
    13,
    3,
    11,
    32,
    4,
    65,
    1,
    114,
    103,
    65,
    2,
    118,
    65,
    7,
    115,
    173,
    66,
    128,
    128,
    128,
    128,
    208,
    0,
    132,
    33,
    14,
    65,
    3,
    33,
    5,
    11,
    32,
    4,
    33,
    7,
    11,
    2,
    64,
    2,
    64,
    32,
    8,
    32,
    3,
    73,
    13,
    0,
    32,
    3,
    69,
    32,
    1,
    32,
    3,
    70,
    114,
    69,
    4,
    64,
    32,
    3,
    32,
    1,
    79,
    13,
    1,
    32,
    0,
    32,
    3,
    106,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    1,
    11,
    32,
    8,
    69,
    32,
    1,
    32,
    8,
    70,
    114,
    69,
    4,
    64,
    32,
    8,
    32,
    1,
    79,
    13,
    1,
    32,
    0,
    32,
    8,
    106,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    1,
    11,
    32,
    2,
    40,
    2,
    24,
    32,
    0,
    32,
    3,
    106,
    32,
    8,
    32,
    3,
    107,
    32,
    2,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    1,
    65,
    1,
    15,
    11,
    32,
    0,
    32,
    1,
    32,
    3,
    32,
    8,
    65,
    160,
    201,
    193,
    0,
    16,
    12,
    0,
    11,
    3,
    64,
    32,
    5,
    33,
    11,
    65,
    1,
    33,
    9,
    65,
    220,
    0,
    33,
    3,
    65,
    1,
    33,
    5,
    2,
    64,
    2,
    126,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    11,
    65,
    1,
    107,
    14,
    3,
    1,
    5,
    0,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    14,
    66,
    32,
    136,
    167,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    5,
    3,
    2,
    1,
    0,
    6,
    5,
    11,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    48,
    132,
    33,
    14,
    65,
    3,
    33,
    5,
    65,
    245,
    0,
    33,
    3,
    12,
    7,
    11,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    32,
    132,
    33,
    14,
    65,
    3,
    33,
    5,
    65,
    251,
    0,
    33,
    3,
    12,
    6,
    11,
    65,
    48,
    65,
    215,
    0,
    32,
    7,
    32,
    14,
    167,
    34,
    5,
    65,
    2,
    116,
    65,
    28,
    113,
    118,
    65,
    15,
    113,
    34,
    3,
    65,
    10,
    73,
    27,
    32,
    3,
    106,
    33,
    3,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    16,
    132,
    32,
    5,
    69,
    13,
    4,
    26,
    32,
    14,
    66,
    127,
    124,
    66,
    255,
    255,
    255,
    255,
    15,
    131,
    32,
    14,
    66,
    128,
    128,
    128,
    128,
    112,
    131,
    132,
    12,
    4,
    11,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    33,
    14,
    65,
    3,
    33,
    5,
    65,
    253,
    0,
    33,
    3,
    12,
    4,
    11,
    65,
    0,
    33,
    5,
    32,
    7,
    33,
    3,
    12,
    3,
    11,
    2,
    127,
    65,
    1,
    32,
    4,
    65,
    128,
    1,
    73,
    13,
    0,
    26,
    65,
    2,
    32,
    4,
    65,
    128,
    16,
    73,
    13,
    0,
    26,
    65,
    3,
    65,
    4,
    32,
    4,
    65,
    128,
    128,
    4,
    73,
    27,
    11,
    32,
    8,
    106,
    33,
    3,
    12,
    4,
    11,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    192,
    0,
    132,
    11,
    33,
    14,
    65,
    3,
    33,
    5,
    11,
    32,
    2,
    40,
    2,
    24,
    32,
    3,
    32,
    2,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    12,
    4,
    11,
    32,
    8,
    32,
    12,
    107,
    32,
    6,
    106,
    33,
    8,
    32,
    6,
    33,
    12,
    32,
    6,
    32,
    10,
    71,
    13,
    1,
    11,
    11,
    32,
    3,
    69,
    32,
    1,
    32,
    3,
    70,
    114,
    13,
    0,
    32,
    3,
    32,
    1,
    79,
    13,
    2,
    32,
    0,
    32,
    3,
    106,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    2,
    11,
    65,
    1,
    33,
    9,
    32,
    2,
    40,
    2,
    24,
    32,
    0,
    32,
    3,
    106,
    32,
    1,
    32,
    3,
    107,
    32,
    2,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    2,
    40,
    2,
    24,
    65,
    34,
    32,
    2,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    33,
    9,
    11,
    32,
    9,
    15,
    11,
    32,
    0,
    32,
    1,
    32,
    3,
    32,
    1,
    65,
    176,
    201,
    193,
    0,
    16,
    12,
    0,
    11,
    229,
    7,
    2,
    11,
    127,
    2,
    126,
    32,
    1,
    65,
    33,
    106,
    45,
    0,
    0,
    33,
    11,
    32,
    1,
    65,
    24,
    106,
    40,
    2,
    0,
    33,
    8,
    32,
    1,
    65,
    16,
    106,
    40,
    2,
    0,
    33,
    6,
    32,
    1,
    40,
    2,
    28,
    33,
    9,
    32,
    1,
    45,
    0,
    32,
    33,
    12,
    32,
    1,
    40,
    2,
    20,
    33,
    3,
    32,
    1,
    40,
    2,
    12,
    33,
    5,
    32,
    1,
    41,
    2,
    4,
    33,
    14,
    32,
    1,
    40,
    2,
    0,
    33,
    7,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    10,
    16,
    139,
    1,
    34,
    1,
    4,
    64,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    34,
    10,
    66,
    138,
    128,
    128,
    128,
    160,
    1,
    55,
    2,
    0,
    2,
    64,
    32,
    7,
    69,
    13,
    0,
    32,
    0,
    65,
    10,
    65,
    1,
    16,
    75,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    106,
    32,
    14,
    66,
    32,
    136,
    34,
    15,
    60,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    10,
    40,
    2,
    0,
    32,
    4,
    70,
    4,
    127,
    32,
    0,
    32,
    4,
    65,
    1,
    16,
    75,
    32,
    1,
    40,
    2,
    0,
    5,
    32,
    4,
    11,
    32,
    0,
    40,
    2,
    0,
    106,
    32,
    14,
    66,
    40,
    136,
    60,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    0,
    32,
    4,
    32,
    15,
    167,
    34,
    4,
    16,
    75,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    0,
    106,
    32,
    7,
    32,
    4,
    16,
    121,
    26,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    65,
    4,
    33,
    4,
    32,
    14,
    167,
    34,
    1,
    69,
    13,
    0,
    32,
    7,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    5,
    69,
    13,
    0,
    32,
    0,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    32,
    6,
    16,
    75,
    32,
    4,
    65,
    8,
    114,
    33,
    4,
    32,
    6,
    69,
    4,
    64,
    32,
    5,
    65,
    0,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    5,
    32,
    6,
    106,
    33,
    7,
    32,
    1,
    40,
    2,
    0,
    34,
    10,
    32,
    0,
    40,
    2,
    0,
    106,
    33,
    13,
    65,
    0,
    33,
    1,
    3,
    64,
    32,
    1,
    32,
    13,
    106,
    32,
    1,
    32,
    5,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    6,
    32,
    1,
    65,
    1,
    106,
    34,
    1,
    71,
    13,
    0,
    11,
    32,
    0,
    65,
    8,
    106,
    32,
    7,
    32,
    10,
    32,
    5,
    107,
    106,
    54,
    2,
    0,
    32,
    5,
    65,
    0,
    58,
    0,
    0,
    32,
    6,
    69,
    13,
    0,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    3,
    69,
    13,
    0,
    32,
    0,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    32,
    8,
    16,
    75,
    32,
    4,
    65,
    16,
    114,
    33,
    4,
    32,
    8,
    69,
    4,
    64,
    32,
    3,
    65,
    0,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    3,
    32,
    8,
    106,
    33,
    5,
    32,
    1,
    40,
    2,
    0,
    34,
    6,
    32,
    0,
    40,
    2,
    0,
    106,
    33,
    7,
    65,
    0,
    33,
    1,
    3,
    64,
    32,
    1,
    32,
    7,
    106,
    32,
    1,
    32,
    3,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    8,
    32,
    1,
    65,
    1,
    106,
    34,
    1,
    71,
    13,
    0,
    11,
    32,
    0,
    65,
    8,
    106,
    32,
    5,
    32,
    6,
    32,
    3,
    107,
    106,
    54,
    2,
    0,
    32,
    3,
    65,
    0,
    58,
    0,
    0,
    32,
    8,
    69,
    13,
    0,
    32,
    3,
    32,
    8,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    69,
    13,
    1,
    32,
    0,
    40,
    2,
    0,
    65,
    31,
    58,
    0,
    0,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    1,
    77,
    13,
    2,
    32,
    0,
    40,
    2,
    0,
    65,
    139,
    1,
    58,
    0,
    1,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    2,
    77,
    13,
    3,
    32,
    0,
    40,
    2,
    0,
    65,
    8,
    58,
    0,
    2,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    3,
    77,
    13,
    4,
    32,
    0,
    40,
    2,
    0,
    32,
    4,
    58,
    0,
    3,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    4,
    77,
    13,
    5,
    32,
    0,
    40,
    2,
    0,
    32,
    9,
    58,
    0,
    4,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    5,
    77,
    13,
    6,
    32,
    0,
    40,
    2,
    0,
    32,
    9,
    65,
    8,
    118,
    58,
    0,
    5,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    6,
    77,
    13,
    7,
    32,
    0,
    40,
    2,
    0,
    32,
    9,
    65,
    16,
    118,
    58,
    0,
    6,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    7,
    77,
    13,
    8,
    32,
    0,
    40,
    2,
    0,
    32,
    9,
    65,
    24,
    118,
    58,
    0,
    7,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    8,
    77,
    13,
    9,
    32,
    0,
    40,
    2,
    0,
    32,
    2,
    65,
    2,
    73,
    65,
    2,
    116,
    65,
    2,
    32,
    2,
    65,
    9,
    73,
    27,
    58,
    0,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    9,
    77,
    13,
    10,
    32,
    0,
    40,
    2,
    0,
    32,
    11,
    65,
    127,
    32,
    12,
    27,
    58,
    0,
    9,
    15,
    11,
    65,
    10,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    0,
    65,
    0,
    65,
    148,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    1,
    32,
    1,
    65,
    164,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    2,
    32,
    3,
    65,
    180,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    3,
    32,
    1,
    65,
    196,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    4,
    32,
    3,
    65,
    212,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    5,
    32,
    1,
    65,
    228,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    6,
    32,
    3,
    65,
    244,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    7,
    32,
    1,
    65,
    132,
    143,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    8,
    32,
    3,
    65,
    148,
    143,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    9,
    32,
    1,
    65,
    164,
    143,
    192,
    0,
    16,
    98,
    0,
    11,
    172,
    7,
    2,
    7,
    127,
    1,
    126,
    35,
    0,
    65,
    192,
    1,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    8,
    106,
    65,
    0,
    16,
    136,
    1,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    4,
    4,
    64,
    32,
    3,
    65,
    48,
    106,
    34,
    5,
    66,
    128,
    128,
    2,
    55,
    3,
    0,
    32,
    3,
    65,
    40,
    106,
    34,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    54,
    2,
    44,
    32,
    3,
    66,
    1,
    55,
    3,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    44,
    33,
    10,
    32,
    3,
    65,
    240,
    0,
    106,
    34,
    4,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    232,
    0,
    106,
    34,
    5,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    224,
    0,
    106,
    34,
    6,
    32,
    3,
    41,
    3,
    32,
    55,
    3,
    0,
    32,
    3,
    65,
    216,
    0,
    106,
    34,
    7,
    32,
    3,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    208,
    0,
    106,
    34,
    8,
    32,
    3,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    8,
    55,
    3,
    72,
    2,
    127,
    2,
    64,
    32,
    3,
    2,
    127,
    32,
    10,
    167,
    34,
    9,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    3,
    65,
    195,
    0,
    106,
    32,
    10,
    66,
    56,
    136,
    60,
    0,
    0,
    32,
    3,
    65,
    193,
    0,
    106,
    32,
    10,
    66,
    40,
    136,
    61,
    0,
    0,
    32,
    3,
    32,
    9,
    58,
    0,
    60,
    32,
    3,
    65,
    1,
    54,
    2,
    56,
    32,
    3,
    32,
    10,
    66,
    8,
    136,
    62,
    0,
    61,
    2,
    64,
    32,
    3,
    40,
    2,
    96,
    69,
    13,
    0,
    32,
    3,
    65,
    200,
    0,
    106,
    16,
    58,
    34,
    10,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    4,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    96,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    228,
    0,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    88,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    3,
    65,
    240,
    0,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    108,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    56,
    106,
    65,
    4,
    114,
    12,
    1,
    11,
    32,
    3,
    65,
    184,
    1,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    176,
    1,
    106,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    168,
    1,
    106,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    160,
    1,
    106,
    32,
    7,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    152,
    1,
    106,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    72,
    55,
    3,
    144,
    1,
    32,
    3,
    65,
    56,
    106,
    32,
    3,
    65,
    144,
    1,
    106,
    16,
    61,
    32,
    3,
    40,
    2,
    56,
    65,
    1,
    71,
    13,
    1,
    32,
    3,
    65,
    56,
    106,
    65,
    4,
    114,
    11,
    41,
    2,
    0,
    55,
    3,
    120,
    32,
    3,
    65,
    248,
    0,
    106,
    16,
    133,
    1,
    33,
    4,
    32,
    3,
    65,
    212,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    3,
    65,
    164,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    10,
    54,
    2,
    76,
    32,
    3,
    66,
    2,
    55,
    2,
    148,
    1,
    32,
    3,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    144,
    1,
    32,
    3,
    32,
    4,
    58,
    0,
    143,
    1,
    32,
    3,
    32,
    3,
    65,
    248,
    0,
    106,
    54,
    2,
    80,
    32,
    3,
    32,
    3,
    65,
    143,
    1,
    106,
    54,
    2,
    72,
    32,
    3,
    32,
    3,
    65,
    200,
    0,
    106,
    54,
    2,
    160,
    1,
    32,
    3,
    65,
    128,
    1,
    106,
    32,
    3,
    65,
    144,
    1,
    106,
    16,
    51,
    32,
    3,
    40,
    2,
    128,
    1,
    34,
    5,
    32,
    3,
    40,
    2,
    136,
    1,
    16,
    0,
    33,
    4,
    32,
    3,
    40,
    2,
    132,
    1,
    34,
    6,
    4,
    64,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    45,
    0,
    120,
    65,
    2,
    79,
    4,
    64,
    32,
    3,
    40,
    2,
    124,
    34,
    5,
    40,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    5,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    124,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    12,
    1,
    11,
    32,
    3,
    65,
    64,
    107,
    41,
    3,
    0,
    33,
    10,
    32,
    3,
    40,
    2,
    60,
    33,
    4,
    65,
    0,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    13,
    1,
    2,
    64,
    32,
    10,
    167,
    34,
    5,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    4,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    4,
    32,
    5,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    3,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    192,
    1,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    172,
    7,
    2,
    7,
    127,
    1,
    126,
    35,
    0,
    65,
    192,
    1,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    8,
    106,
    65,
    1,
    16,
    136,
    1,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    4,
    4,
    64,
    32,
    3,
    65,
    48,
    106,
    34,
    5,
    66,
    128,
    128,
    2,
    55,
    3,
    0,
    32,
    3,
    65,
    40,
    106,
    34,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    54,
    2,
    44,
    32,
    3,
    66,
    1,
    55,
    3,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    43,
    33,
    10,
    32,
    3,
    65,
    240,
    0,
    106,
    34,
    4,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    232,
    0,
    106,
    34,
    5,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    224,
    0,
    106,
    34,
    6,
    32,
    3,
    41,
    3,
    32,
    55,
    3,
    0,
    32,
    3,
    65,
    216,
    0,
    106,
    34,
    7,
    32,
    3,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    208,
    0,
    106,
    34,
    8,
    32,
    3,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    8,
    55,
    3,
    72,
    2,
    127,
    2,
    64,
    32,
    3,
    2,
    127,
    32,
    10,
    167,
    34,
    9,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    3,
    65,
    195,
    0,
    106,
    32,
    10,
    66,
    56,
    136,
    60,
    0,
    0,
    32,
    3,
    65,
    193,
    0,
    106,
    32,
    10,
    66,
    40,
    136,
    61,
    0,
    0,
    32,
    3,
    32,
    9,
    58,
    0,
    60,
    32,
    3,
    65,
    1,
    54,
    2,
    56,
    32,
    3,
    32,
    10,
    66,
    8,
    136,
    62,
    0,
    61,
    2,
    64,
    32,
    3,
    40,
    2,
    96,
    69,
    13,
    0,
    32,
    3,
    65,
    200,
    0,
    106,
    16,
    58,
    34,
    10,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    4,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    96,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    228,
    0,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    88,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    3,
    65,
    240,
    0,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    108,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    56,
    106,
    65,
    4,
    114,
    12,
    1,
    11,
    32,
    3,
    65,
    184,
    1,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    176,
    1,
    106,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    168,
    1,
    106,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    160,
    1,
    106,
    32,
    7,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    152,
    1,
    106,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    72,
    55,
    3,
    144,
    1,
    32,
    3,
    65,
    56,
    106,
    32,
    3,
    65,
    144,
    1,
    106,
    16,
    61,
    32,
    3,
    40,
    2,
    56,
    65,
    1,
    71,
    13,
    1,
    32,
    3,
    65,
    56,
    106,
    65,
    4,
    114,
    11,
    41,
    2,
    0,
    55,
    3,
    120,
    32,
    3,
    65,
    248,
    0,
    106,
    16,
    133,
    1,
    33,
    4,
    32,
    3,
    65,
    212,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    3,
    65,
    164,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    10,
    54,
    2,
    76,
    32,
    3,
    66,
    2,
    55,
    2,
    148,
    1,
    32,
    3,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    144,
    1,
    32,
    3,
    32,
    4,
    58,
    0,
    143,
    1,
    32,
    3,
    32,
    3,
    65,
    248,
    0,
    106,
    54,
    2,
    80,
    32,
    3,
    32,
    3,
    65,
    143,
    1,
    106,
    54,
    2,
    72,
    32,
    3,
    32,
    3,
    65,
    200,
    0,
    106,
    54,
    2,
    160,
    1,
    32,
    3,
    65,
    128,
    1,
    106,
    32,
    3,
    65,
    144,
    1,
    106,
    16,
    51,
    32,
    3,
    40,
    2,
    128,
    1,
    34,
    5,
    32,
    3,
    40,
    2,
    136,
    1,
    16,
    0,
    33,
    4,
    32,
    3,
    40,
    2,
    132,
    1,
    34,
    6,
    4,
    64,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    45,
    0,
    120,
    65,
    2,
    79,
    4,
    64,
    32,
    3,
    40,
    2,
    124,
    34,
    5,
    40,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    5,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    124,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    12,
    1,
    11,
    32,
    3,
    65,
    64,
    107,
    41,
    3,
    0,
    33,
    10,
    32,
    3,
    40,
    2,
    60,
    33,
    4,
    65,
    0,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    13,
    1,
    2,
    64,
    32,
    10,
    167,
    34,
    5,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    4,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    4,
    32,
    5,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    3,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    192,
    1,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    218,
    6,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    192,
    1,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    65,
    8,
    106,
    32,
    3,
    4,
    127,
    32,
    4,
    5,
    65,
    6,
    11,
    65,
    0,
    16,
    126,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    3,
    4,
    64,
    32,
    5,
    65,
    48,
    106,
    34,
    4,
    66,
    128,
    128,
    2,
    55,
    3,
    0,
    32,
    5,
    65,
    40,
    106,
    34,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    3,
    54,
    2,
    44,
    32,
    5,
    66,
    1,
    55,
    3,
    32,
    32,
    5,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    45,
    33,
    10,
    32,
    5,
    65,
    240,
    0,
    106,
    34,
    3,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    232,
    0,
    106,
    34,
    4,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    224,
    0,
    106,
    34,
    6,
    32,
    5,
    41,
    3,
    32,
    55,
    3,
    0,
    32,
    5,
    65,
    216,
    0,
    106,
    34,
    7,
    32,
    5,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    208,
    0,
    106,
    34,
    8,
    32,
    5,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    32,
    5,
    41,
    3,
    8,
    55,
    3,
    72,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    10,
    167,
    34,
    9,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    5,
    32,
    9,
    58,
    0,
    56,
    32,
    5,
    32,
    10,
    66,
    56,
    136,
    60,
    0,
    63,
    32,
    5,
    32,
    10,
    66,
    40,
    136,
    61,
    0,
    61,
    32,
    5,
    32,
    10,
    66,
    8,
    136,
    62,
    0,
    57,
    32,
    5,
    65,
    200,
    0,
    106,
    16,
    77,
    32,
    5,
    41,
    3,
    56,
    33,
    10,
    12,
    1,
    11,
    32,
    5,
    65,
    184,
    1,
    106,
    32,
    3,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    176,
    1,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    168,
    1,
    106,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    160,
    1,
    106,
    32,
    7,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    152,
    1,
    106,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    32,
    5,
    41,
    3,
    72,
    55,
    3,
    144,
    1,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    57,
    34,
    10,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    5,
    40,
    2,
    168,
    1,
    33,
    3,
    65,
    0,
    33,
    4,
    32,
    5,
    65,
    0,
    54,
    2,
    168,
    1,
    32,
    3,
    13,
    2,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    32,
    10,
    55,
    3,
    56,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    77,
    11,
    32,
    5,
    32,
    10,
    55,
    3,
    120,
    32,
    5,
    65,
    248,
    0,
    106,
    16,
    133,
    1,
    33,
    3,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    5,
    65,
    164,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    5,
    65,
    10,
    54,
    2,
    76,
    32,
    5,
    66,
    2,
    55,
    2,
    148,
    1,
    32,
    5,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    144,
    1,
    32,
    5,
    32,
    3,
    58,
    0,
    143,
    1,
    32,
    5,
    32,
    5,
    65,
    248,
    0,
    106,
    54,
    2,
    80,
    32,
    5,
    32,
    5,
    65,
    143,
    1,
    106,
    54,
    2,
    72,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    160,
    1,
    32,
    5,
    65,
    128,
    1,
    106,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    51,
    32,
    5,
    40,
    2,
    128,
    1,
    34,
    4,
    32,
    5,
    40,
    2,
    136,
    1,
    16,
    0,
    33,
    3,
    32,
    5,
    40,
    2,
    132,
    1,
    34,
    6,
    4,
    64,
    32,
    4,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    5,
    45,
    0,
    120,
    65,
    2,
    79,
    4,
    64,
    32,
    5,
    40,
    2,
    124,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    5,
    40,
    2,
    124,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    33,
    4,
    12,
    1,
    11,
    32,
    5,
    65,
    172,
    1,
    106,
    40,
    2,
    0,
    33,
    6,
    32,
    5,
    32,
    5,
    65,
    176,
    1,
    106,
    40,
    2,
    0,
    54,
    2,
    64,
    32,
    5,
    32,
    6,
    54,
    2,
    60,
    32,
    5,
    32,
    3,
    54,
    2,
    56,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    77,
    32,
    5,
    41,
    2,
    60,
    33,
    10,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    4,
    13,
    1,
    2,
    64,
    32,
    10,
    167,
    34,
    4,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    3,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    3,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    3,
    32,
    4,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    3,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    5,
    65,
    192,
    1,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    218,
    6,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    192,
    1,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    65,
    8,
    106,
    32,
    3,
    4,
    127,
    32,
    4,
    5,
    65,
    6,
    11,
    65,
    1,
    16,
    126,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    3,
    4,
    64,
    32,
    5,
    65,
    48,
    106,
    34,
    4,
    66,
    128,
    128,
    2,
    55,
    3,
    0,
    32,
    5,
    65,
    40,
    106,
    34,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    3,
    54,
    2,
    44,
    32,
    5,
    66,
    1,
    55,
    3,
    32,
    32,
    5,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    42,
    33,
    10,
    32,
    5,
    65,
    240,
    0,
    106,
    34,
    3,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    232,
    0,
    106,
    34,
    4,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    224,
    0,
    106,
    34,
    6,
    32,
    5,
    41,
    3,
    32,
    55,
    3,
    0,
    32,
    5,
    65,
    216,
    0,
    106,
    34,
    7,
    32,
    5,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    208,
    0,
    106,
    34,
    8,
    32,
    5,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    32,
    5,
    41,
    3,
    8,
    55,
    3,
    72,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    10,
    167,
    34,
    9,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    5,
    32,
    9,
    58,
    0,
    56,
    32,
    5,
    32,
    10,
    66,
    56,
    136,
    60,
    0,
    63,
    32,
    5,
    32,
    10,
    66,
    40,
    136,
    61,
    0,
    61,
    32,
    5,
    32,
    10,
    66,
    8,
    136,
    62,
    0,
    57,
    32,
    5,
    65,
    200,
    0,
    106,
    16,
    77,
    32,
    5,
    41,
    3,
    56,
    33,
    10,
    12,
    1,
    11,
    32,
    5,
    65,
    184,
    1,
    106,
    32,
    3,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    176,
    1,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    168,
    1,
    106,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    160,
    1,
    106,
    32,
    7,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    152,
    1,
    106,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    32,
    5,
    41,
    3,
    72,
    55,
    3,
    144,
    1,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    57,
    34,
    10,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    5,
    40,
    2,
    168,
    1,
    33,
    3,
    65,
    0,
    33,
    4,
    32,
    5,
    65,
    0,
    54,
    2,
    168,
    1,
    32,
    3,
    13,
    2,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    32,
    10,
    55,
    3,
    56,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    77,
    11,
    32,
    5,
    32,
    10,
    55,
    3,
    120,
    32,
    5,
    65,
    248,
    0,
    106,
    16,
    133,
    1,
    33,
    3,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    5,
    65,
    164,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    5,
    65,
    10,
    54,
    2,
    76,
    32,
    5,
    66,
    2,
    55,
    2,
    148,
    1,
    32,
    5,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    144,
    1,
    32,
    5,
    32,
    3,
    58,
    0,
    143,
    1,
    32,
    5,
    32,
    5,
    65,
    248,
    0,
    106,
    54,
    2,
    80,
    32,
    5,
    32,
    5,
    65,
    143,
    1,
    106,
    54,
    2,
    72,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    160,
    1,
    32,
    5,
    65,
    128,
    1,
    106,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    51,
    32,
    5,
    40,
    2,
    128,
    1,
    34,
    4,
    32,
    5,
    40,
    2,
    136,
    1,
    16,
    0,
    33,
    3,
    32,
    5,
    40,
    2,
    132,
    1,
    34,
    6,
    4,
    64,
    32,
    4,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    5,
    45,
    0,
    120,
    65,
    2,
    79,
    4,
    64,
    32,
    5,
    40,
    2,
    124,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    5,
    40,
    2,
    124,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    33,
    4,
    12,
    1,
    11,
    32,
    5,
    65,
    172,
    1,
    106,
    40,
    2,
    0,
    33,
    6,
    32,
    5,
    32,
    5,
    65,
    176,
    1,
    106,
    40,
    2,
    0,
    54,
    2,
    64,
    32,
    5,
    32,
    6,
    54,
    2,
    60,
    32,
    5,
    32,
    3,
    54,
    2,
    56,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    77,
    32,
    5,
    41,
    2,
    60,
    33,
    10,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    4,
    13,
    1,
    2,
    64,
    32,
    10,
    167,
    34,
    4,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    3,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    3,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    3,
    32,
    4,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    3,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    5,
    65,
    192,
    1,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    177,
    6,
    1,
    7,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    255,
    255,
    3,
    77,
    4,
    64,
    32,
    0,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    6,
    65,
    176,
    205,
    193,
    0,
    33,
    1,
    32,
    0,
    65,
    255,
    1,
    113,
    33,
    7,
    3,
    64,
    2,
    64,
    32,
    1,
    65,
    2,
    106,
    33,
    5,
    32,
    2,
    32,
    1,
    45,
    0,
    1,
    34,
    4,
    106,
    33,
    3,
    2,
    64,
    32,
    6,
    32,
    1,
    45,
    0,
    0,
    34,
    1,
    70,
    4,
    64,
    32,
    3,
    32,
    2,
    73,
    13,
    6,
    32,
    3,
    65,
    163,
    2,
    79,
    13,
    7,
    32,
    2,
    65,
    130,
    206,
    193,
    0,
    106,
    33,
    1,
    3,
    64,
    32,
    4,
    69,
    13,
    2,
    32,
    4,
    65,
    127,
    106,
    33,
    4,
    32,
    1,
    45,
    0,
    0,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    7,
    71,
    13,
    0,
    11,
    65,
    0,
    33,
    4,
    12,
    5,
    11,
    32,
    1,
    32,
    6,
    75,
    13,
    1,
    32,
    3,
    33,
    2,
    32,
    5,
    34,
    1,
    65,
    130,
    206,
    193,
    0,
    71,
    13,
    2,
    12,
    1,
    11,
    32,
    3,
    33,
    2,
    32,
    5,
    34,
    1,
    65,
    130,
    206,
    193,
    0,
    71,
    13,
    1,
    11,
    11,
    32,
    0,
    65,
    255,
    255,
    3,
    113,
    33,
    3,
    65,
    164,
    208,
    193,
    0,
    33,
    1,
    65,
    1,
    33,
    4,
    3,
    64,
    32,
    1,
    65,
    1,
    106,
    33,
    0,
    2,
    127,
    32,
    1,
    45,
    0,
    0,
    34,
    2,
    65,
    24,
    116,
    65,
    24,
    117,
    34,
    5,
    65,
    127,
    76,
    4,
    64,
    32,
    0,
    65,
    217,
    210,
    193,
    0,
    70,
    13,
    7,
    32,
    1,
    45,
    0,
    1,
    32,
    5,
    65,
    255,
    0,
    113,
    65,
    8,
    116,
    114,
    33,
    2,
    32,
    1,
    65,
    2,
    106,
    12,
    1,
    11,
    32,
    0,
    11,
    33,
    1,
    32,
    3,
    32,
    2,
    107,
    34,
    3,
    65,
    0,
    72,
    13,
    2,
    32,
    4,
    65,
    1,
    115,
    33,
    4,
    32,
    1,
    65,
    217,
    210,
    193,
    0,
    71,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    0,
    65,
    255,
    255,
    7,
    77,
    4,
    64,
    32,
    0,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    6,
    65,
    217,
    210,
    193,
    0,
    33,
    1,
    32,
    0,
    65,
    255,
    1,
    113,
    33,
    7,
    3,
    64,
    2,
    64,
    32,
    1,
    65,
    2,
    106,
    33,
    5,
    32,
    2,
    32,
    1,
    45,
    0,
    1,
    34,
    4,
    106,
    33,
    3,
    2,
    64,
    32,
    6,
    32,
    1,
    45,
    0,
    0,
    34,
    1,
    70,
    4,
    64,
    32,
    3,
    32,
    2,
    73,
    13,
    9,
    32,
    3,
    65,
    176,
    1,
    79,
    13,
    10,
    32,
    2,
    65,
    165,
    211,
    193,
    0,
    106,
    33,
    1,
    3,
    64,
    32,
    4,
    69,
    13,
    2,
    32,
    4,
    65,
    127,
    106,
    33,
    4,
    32,
    1,
    45,
    0,
    0,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    7,
    71,
    13,
    0,
    11,
    65,
    0,
    33,
    4,
    12,
    5,
    11,
    32,
    1,
    32,
    6,
    75,
    13,
    1,
    32,
    3,
    33,
    2,
    32,
    5,
    34,
    1,
    65,
    165,
    211,
    193,
    0,
    71,
    13,
    2,
    12,
    1,
    11,
    32,
    3,
    33,
    2,
    32,
    5,
    34,
    1,
    65,
    165,
    211,
    193,
    0,
    71,
    13,
    1,
    11,
    11,
    32,
    0,
    65,
    255,
    255,
    3,
    113,
    33,
    3,
    65,
    212,
    212,
    193,
    0,
    33,
    1,
    65,
    1,
    33,
    4,
    3,
    64,
    32,
    1,
    65,
    1,
    106,
    33,
    0,
    2,
    127,
    32,
    1,
    45,
    0,
    0,
    34,
    2,
    65,
    24,
    116,
    65,
    24,
    117,
    34,
    5,
    65,
    127,
    76,
    4,
    64,
    32,
    0,
    65,
    247,
    215,
    193,
    0,
    70,
    13,
    10,
    32,
    1,
    45,
    0,
    1,
    32,
    5,
    65,
    255,
    0,
    113,
    65,
    8,
    116,
    114,
    33,
    2,
    32,
    1,
    65,
    2,
    106,
    12,
    1,
    11,
    32,
    0,
    11,
    33,
    1,
    32,
    3,
    32,
    2,
    107,
    34,
    3,
    65,
    0,
    72,
    13,
    2,
    32,
    4,
    65,
    1,
    115,
    33,
    4,
    32,
    1,
    65,
    247,
    215,
    193,
    0,
    71,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    0,
    65,
    181,
    217,
    115,
    106,
    65,
    181,
    219,
    43,
    73,
    32,
    0,
    65,
    226,
    139,
    116,
    106,
    65,
    226,
    11,
    73,
    114,
    32,
    0,
    65,
    159,
    168,
    116,
    106,
    65,
    159,
    24,
    73,
    32,
    0,
    65,
    222,
    226,
    116,
    106,
    65,
    14,
    73,
    114,
    114,
    32,
    0,
    65,
    254,
    255,
    255,
    0,
    113,
    65,
    158,
    240,
    10,
    70,
    32,
    0,
    65,
    162,
    178,
    117,
    106,
    65,
    34,
    73,
    114,
    114,
    13,
    0,
    32,
    0,
    65,
    203,
    145,
    117,
    106,
    65,
    11,
    79,
    13,
    7,
    11,
    32,
    4,
    65,
    1,
    113,
    15,
    11,
    32,
    2,
    32,
    3,
    65,
    144,
    205,
    193,
    0,
    16,
    100,
    0,
    11,
    32,
    3,
    65,
    162,
    2,
    65,
    144,
    205,
    193,
    0,
    16,
    99,
    0,
    11,
    65,
    240,
    196,
    193,
    0,
    65,
    43,
    65,
    160,
    205,
    193,
    0,
    16,
    114,
    0,
    11,
    32,
    2,
    32,
    3,
    65,
    144,
    205,
    193,
    0,
    16,
    100,
    0,
    11,
    32,
    3,
    65,
    175,
    1,
    65,
    144,
    205,
    193,
    0,
    16,
    99,
    0,
    11,
    65,
    240,
    196,
    193,
    0,
    65,
    43,
    65,
    160,
    205,
    193,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    65,
    240,
    131,
    56,
    73,
    11,
    254,
    5,
    1,
    8,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    7,
    36,
    0,
    2,
    64,
    2,
    64,
    32,
    5,
    69,
    4,
    64,
    32,
    0,
    65,
    1,
    54,
    2,
    8,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    65,
    123,
    33,
    10,
    12,
    1,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    180,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    1,
    70,
    4,
    64,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    32,
    6,
    65,
    4,
    71,
    13,
    1,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    65,
    1,
    33,
    10,
    12,
    8,
    11,
    32,
    6,
    65,
    4,
    71,
    13,
    1,
    3,
    64,
    32,
    7,
    32,
    5,
    54,
    2,
    40,
    32,
    7,
    32,
    4,
    54,
    2,
    36,
    32,
    7,
    65,
    1,
    54,
    2,
    32,
    32,
    7,
    66,
    0,
    55,
    3,
    24,
    32,
    7,
    32,
    2,
    54,
    2,
    16,
    32,
    7,
    32,
    3,
    54,
    2,
    20,
    32,
    7,
    32,
    1,
    32,
    7,
    65,
    16,
    106,
    65,
    4,
    16,
    4,
    32,
    3,
    32,
    7,
    40,
    2,
    4,
    34,
    9,
    73,
    13,
    9,
    32,
    5,
    32,
    7,
    40,
    2,
    8,
    34,
    8,
    73,
    13,
    5,
    32,
    8,
    32,
    12,
    106,
    33,
    12,
    32,
    9,
    32,
    11,
    106,
    33,
    11,
    65,
    240,
    177,
    127,
    33,
    10,
    65,
    1,
    33,
    13,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    65,
    2,
    106,
    14,
    4,
    8,
    4,
    0,
    5,
    0,
    11,
    32,
    3,
    32,
    9,
    107,
    33,
    3,
    32,
    2,
    32,
    9,
    106,
    33,
    2,
    32,
    4,
    32,
    8,
    106,
    33,
    4,
    32,
    5,
    32,
    8,
    107,
    34,
    5,
    13,
    0,
    11,
    12,
    5,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    8,
    65,
    123,
    33,
    10,
    12,
    6,
    11,
    65,
    3,
    32,
    6,
    65,
    2,
    70,
    65,
    1,
    116,
    32,
    6,
    65,
    3,
    70,
    34,
    14,
    27,
    33,
    8,
    2,
    64,
    32,
    6,
    65,
    2,
    70,
    4,
    64,
    3,
    64,
    32,
    7,
    32,
    5,
    54,
    2,
    40,
    32,
    7,
    32,
    4,
    54,
    2,
    36,
    32,
    7,
    65,
    1,
    54,
    2,
    32,
    32,
    7,
    66,
    0,
    55,
    3,
    24,
    32,
    7,
    32,
    2,
    54,
    2,
    16,
    32,
    7,
    32,
    3,
    54,
    2,
    20,
    32,
    7,
    32,
    1,
    32,
    7,
    65,
    16,
    106,
    32,
    8,
    16,
    4,
    32,
    3,
    32,
    7,
    40,
    2,
    4,
    34,
    9,
    73,
    13,
    9,
    32,
    5,
    32,
    7,
    40,
    2,
    8,
    34,
    8,
    73,
    13,
    5,
    32,
    8,
    32,
    12,
    106,
    33,
    12,
    32,
    9,
    32,
    11,
    106,
    33,
    11,
    65,
    240,
    177,
    127,
    33,
    10,
    65,
    1,
    33,
    13,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    65,
    2,
    106,
    14,
    4,
    8,
    4,
    0,
    5,
    0,
    11,
    32,
    5,
    32,
    8,
    107,
    34,
    5,
    69,
    13,
    6,
    32,
    3,
    32,
    9,
    107,
    34,
    3,
    69,
    13,
    2,
    32,
    2,
    32,
    9,
    106,
    33,
    2,
    32,
    4,
    32,
    8,
    106,
    33,
    4,
    65,
    2,
    33,
    8,
    12,
    0,
    11,
    0,
    11,
    65,
    3,
    65,
    0,
    32,
    14,
    27,
    33,
    14,
    3,
    64,
    32,
    7,
    32,
    5,
    54,
    2,
    40,
    32,
    7,
    32,
    4,
    54,
    2,
    36,
    32,
    7,
    65,
    1,
    54,
    2,
    32,
    32,
    7,
    66,
    0,
    55,
    3,
    24,
    32,
    7,
    32,
    2,
    54,
    2,
    16,
    32,
    7,
    32,
    3,
    54,
    2,
    20,
    32,
    7,
    32,
    1,
    32,
    7,
    65,
    16,
    106,
    32,
    8,
    16,
    4,
    32,
    3,
    32,
    7,
    40,
    2,
    4,
    34,
    9,
    73,
    13,
    8,
    32,
    5,
    32,
    7,
    40,
    2,
    8,
    34,
    8,
    73,
    13,
    4,
    32,
    8,
    32,
    12,
    106,
    33,
    12,
    32,
    9,
    32,
    11,
    106,
    33,
    11,
    65,
    240,
    177,
    127,
    33,
    10,
    65,
    1,
    33,
    13,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    65,
    2,
    106,
    14,
    4,
    7,
    3,
    0,
    4,
    0,
    11,
    32,
    5,
    32,
    8,
    107,
    34,
    5,
    69,
    13,
    5,
    32,
    3,
    32,
    9,
    107,
    34,
    3,
    69,
    13,
    1,
    32,
    2,
    32,
    9,
    106,
    33,
    2,
    32,
    4,
    32,
    8,
    106,
    33,
    4,
    32,
    14,
    33,
    8,
    12,
    0,
    11,
    0,
    11,
    65,
    0,
    65,
    123,
    32,
    6,
    32,
    11,
    114,
    32,
    12,
    114,
    34,
    1,
    27,
    33,
    10,
    32,
    1,
    69,
    33,
    13,
    12,
    4,
    11,
    65,
    126,
    33,
    10,
    12,
    3,
    11,
    65,
    1,
    33,
    10,
    65,
    0,
    33,
    13,
    12,
    2,
    11,
    32,
    8,
    32,
    5,
    65,
    156,
    188,
    192,
    0,
    16,
    101,
    0,
    11,
    65,
    0,
    33,
    13,
    65,
    0,
    33,
    10,
    11,
    32,
    0,
    32,
    13,
    54,
    2,
    8,
    32,
    0,
    32,
    12,
    54,
    2,
    4,
    32,
    0,
    32,
    11,
    54,
    2,
    0,
    11,
    32,
    0,
    65,
    12,
    106,
    32,
    10,
    54,
    2,
    0,
    32,
    7,
    65,
    48,
    106,
    36,
    0,
    15,
    11,
    32,
    9,
    32,
    3,
    65,
    140,
    188,
    192,
    0,
    16,
    101,
    0,
    11,
    145,
    6,
    2,
    3,
    127,
    1,
    126,
    35,
    0,
    65,
    176,
    2,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    65,
    0,
    54,
    2,
    224,
    1,
    32,
    5,
    66,
    1,
    55,
    3,
    216,
    1,
    32,
    5,
    32,
    5,
    65,
    216,
    1,
    106,
    32,
    3,
    4,
    127,
    32,
    4,
    5,
    65,
    6,
    11,
    16,
    62,
    32,
    5,
    32,
    1,
    32,
    2,
    16,
    26,
    33,
    8,
    32,
    5,
    65,
    232,
    0,
    106,
    32,
    5,
    65,
    216,
    0,
    16,
    121,
    26,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    8,
    167,
    34,
    3,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    5,
    32,
    3,
    58,
    0,
    88,
    32,
    5,
    32,
    8,
    66,
    56,
    136,
    60,
    0,
    95,
    32,
    5,
    32,
    8,
    66,
    40,
    136,
    61,
    0,
    93,
    32,
    5,
    32,
    8,
    66,
    8,
    136,
    62,
    0,
    89,
    2,
    64,
    32,
    5,
    40,
    2,
    128,
    1,
    69,
    13,
    0,
    32,
    5,
    65,
    232,
    0,
    106,
    16,
    34,
    34,
    8,
    167,
    65,
    3,
    113,
    65,
    2,
    71,
    13,
    0,
    32,
    8,
    66,
    32,
    136,
    167,
    34,
    3,
    40,
    2,
    0,
    32,
    3,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    3,
    40,
    2,
    0,
    32,
    6,
    32,
    4,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    5,
    65,
    232,
    0,
    106,
    16,
    77,
    32,
    5,
    65,
    184,
    1,
    106,
    40,
    2,
    0,
    34,
    3,
    4,
    64,
    32,
    5,
    40,
    2,
    180,
    1,
    32,
    3,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    5,
    41,
    3,
    88,
    33,
    8,
    12,
    1,
    11,
    32,
    5,
    65,
    216,
    1,
    106,
    32,
    5,
    65,
    232,
    0,
    106,
    65,
    216,
    0,
    16,
    121,
    26,
    32,
    5,
    65,
    216,
    1,
    106,
    16,
    34,
    34,
    8,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    5,
    40,
    2,
    240,
    1,
    33,
    3,
    65,
    0,
    33,
    4,
    32,
    5,
    65,
    0,
    54,
    2,
    240,
    1,
    32,
    3,
    13,
    2,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    32,
    8,
    55,
    3,
    88,
    32,
    5,
    65,
    216,
    1,
    106,
    16,
    53,
    11,
    32,
    5,
    32,
    8,
    55,
    3,
    192,
    1,
    32,
    5,
    65,
    192,
    1,
    106,
    16,
    133,
    1,
    33,
    3,
    32,
    5,
    65,
    244,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    5,
    65,
    236,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    5,
    65,
    10,
    54,
    2,
    108,
    32,
    5,
    66,
    2,
    55,
    2,
    220,
    1,
    32,
    5,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    216,
    1,
    32,
    5,
    32,
    3,
    58,
    0,
    215,
    1,
    32,
    5,
    32,
    5,
    65,
    192,
    1,
    106,
    54,
    2,
    112,
    32,
    5,
    32,
    5,
    65,
    215,
    1,
    106,
    54,
    2,
    104,
    32,
    5,
    32,
    5,
    65,
    232,
    0,
    106,
    54,
    2,
    232,
    1,
    32,
    5,
    65,
    200,
    1,
    106,
    32,
    5,
    65,
    216,
    1,
    106,
    16,
    51,
    32,
    5,
    40,
    2,
    200,
    1,
    34,
    4,
    32,
    5,
    40,
    2,
    208,
    1,
    16,
    0,
    33,
    3,
    32,
    5,
    40,
    2,
    204,
    1,
    34,
    6,
    4,
    64,
    32,
    4,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    5,
    45,
    0,
    192,
    1,
    65,
    2,
    79,
    4,
    64,
    32,
    5,
    40,
    2,
    196,
    1,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    5,
    40,
    2,
    196,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    33,
    4,
    12,
    1,
    11,
    32,
    5,
    65,
    244,
    1,
    106,
    40,
    2,
    0,
    33,
    6,
    32,
    5,
    32,
    5,
    65,
    248,
    1,
    106,
    40,
    2,
    0,
    54,
    2,
    96,
    32,
    5,
    32,
    6,
    54,
    2,
    92,
    32,
    5,
    32,
    3,
    54,
    2,
    88,
    32,
    5,
    65,
    216,
    1,
    106,
    16,
    53,
    32,
    5,
    41,
    2,
    92,
    33,
    8,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    4,
    69,
    4,
    64,
    2,
    64,
    32,
    8,
    167,
    34,
    4,
    32,
    8,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    3,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    3,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    3,
    32,
    4,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    2,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    5,
    65,
    176,
    2,
    106,
    36,
    0,
    15,
    11,
    32,
    3,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    201,
    3,
    1,
    7,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    9,
    36,
    0,
    2,
    64,
    32,
    0,
    69,
    32,
    1,
    69,
    114,
    13,
    0,
    2,
    64,
    32,
    2,
    65,
    4,
    75,
    13,
    0,
    32,
    1,
    65,
    3,
    106,
    65,
    2,
    118,
    65,
    127,
    106,
    34,
    1,
    65,
    255,
    1,
    75,
    13,
    0,
    32,
    1,
    65,
    2,
    116,
    65,
    140,
    223,
    193,
    0,
    106,
    34,
    6,
    40,
    2,
    0,
    33,
    4,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    120,
    106,
    34,
    7,
    32,
    7,
    40,
    2,
    0,
    65,
    126,
    113,
    54,
    2,
    0,
    32,
    9,
    65,
    136,
    223,
    193,
    0,
    54,
    2,
    12,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    6,
    32,
    7,
    54,
    2,
    0,
    12,
    1,
    11,
    65,
    136,
    223,
    193,
    0,
    40,
    2,
    0,
    33,
    2,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    120,
    106,
    34,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    65,
    126,
    113,
    54,
    2,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    124,
    106,
    34,
    6,
    40,
    2,
    0,
    65,
    124,
    113,
    34,
    5,
    4,
    64,
    32,
    5,
    40,
    2,
    0,
    34,
    8,
    65,
    1,
    113,
    69,
    13,
    1,
    11,
    32,
    4,
    65,
    124,
    113,
    34,
    3,
    69,
    13,
    1,
    65,
    0,
    32,
    3,
    32,
    4,
    65,
    2,
    113,
    27,
    34,
    3,
    69,
    13,
    1,
    32,
    3,
    45,
    0,
    0,
    65,
    1,
    113,
    13,
    1,
    32,
    0,
    32,
    3,
    40,
    2,
    8,
    65,
    124,
    113,
    54,
    2,
    0,
    32,
    3,
    32,
    1,
    65,
    1,
    114,
    54,
    2,
    8,
    32,
    2,
    33,
    1,
    12,
    2,
    11,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    124,
    113,
    34,
    0,
    69,
    4,
    64,
    32,
    5,
    33,
    3,
    12,
    1,
    11,
    32,
    5,
    33,
    3,
    65,
    0,
    32,
    0,
    32,
    4,
    65,
    2,
    113,
    27,
    34,
    4,
    69,
    13,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    4,
    65,
    3,
    113,
    32,
    5,
    114,
    54,
    2,
    4,
    32,
    6,
    40,
    2,
    0,
    34,
    0,
    65,
    124,
    113,
    34,
    3,
    69,
    13,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    124,
    113,
    33,
    0,
    32,
    3,
    40,
    2,
    0,
    33,
    8,
    11,
    32,
    3,
    32,
    8,
    65,
    3,
    113,
    32,
    0,
    114,
    54,
    2,
    0,
    32,
    6,
    40,
    2,
    0,
    33,
    0,
    11,
    32,
    6,
    32,
    0,
    65,
    3,
    113,
    54,
    2,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    0,
    65,
    3,
    113,
    54,
    2,
    0,
    32,
    0,
    65,
    2,
    113,
    69,
    4,
    64,
    32,
    2,
    33,
    1,
    12,
    2,
    11,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    2,
    114,
    54,
    2,
    0,
    32,
    2,
    33,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    11,
    65,
    136,
    223,
    193,
    0,
    32,
    1,
    54,
    2,
    0,
    11,
    32,
    9,
    65,
    16,
    106,
    36,
    0,
    11,
    251,
    5,
    1,
    7,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    2,
    118,
    34,
    11,
    4,
    64,
    32,
    0,
    32,
    3,
    106,
    33,
    12,
    3,
    64,
    32,
    2,
    32,
    6,
    106,
    34,
    9,
    32,
    5,
    113,
    34,
    7,
    32,
    1,
    79,
    13,
    2,
    32,
    3,
    32,
    6,
    106,
    34,
    8,
    32,
    1,
    79,
    13,
    3,
    32,
    6,
    32,
    12,
    106,
    34,
    10,
    32,
    0,
    32,
    7,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    9,
    65,
    1,
    106,
    34,
    9,
    32,
    5,
    113,
    34,
    7,
    32,
    1,
    79,
    13,
    4,
    32,
    8,
    65,
    1,
    106,
    32,
    1,
    79,
    13,
    5,
    32,
    10,
    65,
    1,
    106,
    32,
    0,
    32,
    7,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    9,
    65,
    1,
    106,
    34,
    9,
    32,
    5,
    113,
    34,
    7,
    32,
    1,
    79,
    13,
    6,
    32,
    8,
    65,
    2,
    106,
    32,
    1,
    79,
    13,
    7,
    32,
    10,
    65,
    2,
    106,
    32,
    0,
    32,
    7,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    9,
    65,
    1,
    106,
    32,
    5,
    113,
    34,
    7,
    32,
    1,
    79,
    13,
    8,
    32,
    8,
    65,
    3,
    106,
    32,
    1,
    79,
    13,
    9,
    32,
    10,
    65,
    3,
    106,
    32,
    0,
    32,
    7,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    6,
    65,
    4,
    106,
    33,
    6,
    32,
    11,
    65,
    127,
    106,
    34,
    11,
    13,
    0,
    11,
    32,
    3,
    32,
    6,
    106,
    33,
    3,
    32,
    2,
    32,
    6,
    106,
    33,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    3,
    113,
    65,
    1,
    107,
    14,
    3,
    0,
    1,
    2,
    4,
    11,
    32,
    2,
    32,
    5,
    113,
    34,
    6,
    32,
    1,
    79,
    13,
    21,
    32,
    3,
    32,
    1,
    73,
    13,
    2,
    32,
    3,
    32,
    1,
    65,
    200,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    32,
    5,
    113,
    34,
    4,
    32,
    1,
    79,
    13,
    17,
    32,
    3,
    32,
    1,
    79,
    13,
    18,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    32,
    4,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    1,
    106,
    32,
    5,
    113,
    34,
    6,
    32,
    1,
    79,
    13,
    19,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    32,
    1,
    73,
    13,
    1,
    32,
    3,
    32,
    1,
    65,
    168,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    32,
    5,
    113,
    34,
    4,
    32,
    1,
    79,
    13,
    10,
    32,
    3,
    32,
    1,
    79,
    13,
    11,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    32,
    4,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    1,
    106,
    32,
    5,
    113,
    34,
    4,
    32,
    1,
    79,
    13,
    12,
    32,
    3,
    65,
    1,
    106,
    34,
    6,
    32,
    1,
    79,
    13,
    13,
    32,
    0,
    32,
    6,
    106,
    32,
    0,
    32,
    4,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    2,
    106,
    32,
    5,
    113,
    34,
    6,
    32,
    1,
    79,
    13,
    14,
    32,
    3,
    65,
    2,
    106,
    34,
    3,
    32,
    1,
    79,
    13,
    15,
    11,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    32,
    6,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    11,
    15,
    11,
    32,
    7,
    32,
    1,
    65,
    152,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    32,
    1,
    65,
    168,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    32,
    1,
    65,
    184,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    1,
    106,
    32,
    1,
    65,
    200,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    32,
    1,
    65,
    216,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    2,
    106,
    32,
    1,
    65,
    232,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    32,
    1,
    65,
    248,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    3,
    106,
    32,
    1,
    65,
    136,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    152,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    1,
    65,
    168,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    184,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    200,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    216,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    1,
    65,
    232,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    248,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    1,
    65,
    136,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    152,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    184,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    153,
    6,
    2,
    11,
    127,
    2,
    126,
    35,
    0,
    65,
    64,
    106,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    8,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    0,
    65,
    24,
    106,
    33,
    10,
    32,
    0,
    65,
    48,
    106,
    33,
    12,
    32,
    0,
    65,
    200,
    0,
    106,
    33,
    11,
    32,
    3,
    65,
    4,
    114,
    33,
    13,
    32,
    0,
    65,
    212,
    0,
    106,
    33,
    6,
    32,
    0,
    65,
    32,
    106,
    33,
    7,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    11,
    40,
    2,
    0,
    69,
    4,
    64,
    2,
    64,
    32,
    6,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    10,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    0,
    40,
    2,
    76,
    33,
    5,
    32,
    10,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    7,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    7,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    6,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    4,
    32,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    76,
    34,
    9,
    32,
    4,
    32,
    9,
    106,
    32,
    5,
    16,
    96,
    32,
    6,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    168,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    3,
    65,
    16,
    106,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    29,
    32,
    3,
    41,
    2,
    20,
    33,
    14,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    16,
    65,
    1,
    71,
    4,
    64,
    32,
    2,
    32,
    14,
    167,
    34,
    4,
    73,
    13,
    5,
    32,
    12,
    32,
    1,
    32,
    4,
    16,
    141,
    1,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    54,
    2,
    4,
    32,
    4,
    13,
    1,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    6,
    32,
    0,
    65,
    24,
    106,
    65,
    244,
    128,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    236,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    228,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    220,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    7,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    15,
    66,
    8,
    136,
    33,
    14,
    32,
    15,
    167,
    33,
    8,
    12,
    11,
    11,
    32,
    3,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    14,
    55,
    2,
    4,
    32,
    13,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    70,
    13,
    1,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    14,
    32,
    3,
    45,
    0,
    4,
    33,
    8,
    12,
    10,
    11,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    6,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    5,
    12,
    6,
    11,
    32,
    3,
    65,
    52,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    36,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    32,
    11,
    54,
    2,
    56,
    32,
    3,
    66,
    3,
    55,
    2,
    20,
    32,
    3,
    65,
    180,
    130,
    192,
    0,
    54,
    2,
    16,
    32,
    3,
    65,
    1,
    54,
    2,
    44,
    32,
    3,
    65,
    244,
    129,
    192,
    0,
    54,
    2,
    60,
    32,
    3,
    32,
    3,
    65,
    40,
    106,
    54,
    2,
    32,
    32,
    3,
    32,
    3,
    65,
    60,
    106,
    54,
    2,
    48,
    32,
    3,
    32,
    3,
    65,
    56,
    106,
    54,
    2,
    40,
    32,
    3,
    65,
    16,
    106,
    65,
    204,
    130,
    192,
    0,
    16,
    130,
    1,
    0,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    220,
    130,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    9,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    9,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    64,
    107,
    36,
    0,
    32,
    8,
    173,
    66,
    255,
    1,
    131,
    32,
    14,
    66,
    8,
    134,
    132,
    11,
    213,
    5,
    1,
    6,
    127,
    2,
    127,
    32,
    1,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    33,
    9,
    65,
    45,
    33,
    10,
    32,
    5,
    65,
    1,
    106,
    12,
    1,
    11,
    65,
    43,
    65,
    128,
    128,
    196,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    9,
    65,
    1,
    113,
    34,
    1,
    27,
    33,
    10,
    32,
    1,
    32,
    5,
    106,
    11,
    33,
    8,
    2,
    64,
    32,
    9,
    65,
    4,
    113,
    69,
    4,
    64,
    65,
    0,
    33,
    2,
    12,
    1,
    11,
    32,
    3,
    4,
    64,
    32,
    3,
    33,
    6,
    32,
    2,
    33,
    1,
    3,
    64,
    32,
    7,
    32,
    1,
    45,
    0,
    0,
    65,
    192,
    1,
    113,
    65,
    128,
    1,
    71,
    106,
    33,
    7,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    6,
    65,
    127,
    106,
    34,
    6,
    13,
    0,
    11,
    11,
    32,
    7,
    32,
    8,
    106,
    33,
    8,
    11,
    65,
    1,
    33,
    1,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    8,
    65,
    1,
    71,
    4,
    64,
    32,
    0,
    32,
    10,
    32,
    2,
    32,
    3,
    16,
    111,
    13,
    1,
    12,
    2,
    11,
    32,
    0,
    65,
    12,
    106,
    40,
    2,
    0,
    34,
    6,
    32,
    8,
    77,
    4,
    64,
    32,
    0,
    32,
    10,
    32,
    2,
    32,
    3,
    16,
    111,
    13,
    1,
    12,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    9,
    65,
    8,
    113,
    4,
    64,
    32,
    0,
    40,
    2,
    4,
    33,
    9,
    32,
    0,
    65,
    48,
    54,
    2,
    4,
    32,
    0,
    45,
    0,
    32,
    33,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    32,
    32,
    0,
    32,
    10,
    32,
    2,
    32,
    3,
    16,
    111,
    13,
    5,
    65,
    0,
    33,
    1,
    32,
    6,
    32,
    8,
    107,
    34,
    3,
    33,
    2,
    65,
    1,
    32,
    0,
    45,
    0,
    32,
    34,
    6,
    32,
    6,
    65,
    3,
    70,
    27,
    65,
    3,
    113,
    65,
    1,
    107,
    14,
    3,
    2,
    1,
    2,
    3,
    11,
    65,
    0,
    33,
    1,
    32,
    6,
    32,
    8,
    107,
    34,
    6,
    33,
    8,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    1,
    32,
    0,
    45,
    0,
    32,
    34,
    7,
    32,
    7,
    65,
    3,
    70,
    27,
    65,
    3,
    113,
    65,
    1,
    107,
    14,
    3,
    1,
    0,
    1,
    2,
    11,
    32,
    6,
    65,
    1,
    118,
    33,
    1,
    32,
    6,
    65,
    1,
    106,
    65,
    1,
    118,
    33,
    8,
    12,
    1,
    11,
    65,
    0,
    33,
    8,
    32,
    6,
    33,
    1,
    11,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    3,
    64,
    32,
    1,
    65,
    127,
    106,
    34,
    1,
    69,
    13,
    4,
    32,
    0,
    40,
    2,
    24,
    32,
    0,
    40,
    2,
    4,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    65,
    1,
    15,
    11,
    32,
    3,
    65,
    1,
    118,
    33,
    1,
    32,
    3,
    65,
    1,
    106,
    65,
    1,
    118,
    33,
    2,
    12,
    1,
    11,
    65,
    0,
    33,
    2,
    32,
    3,
    33,
    1,
    11,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    2,
    64,
    3,
    64,
    32,
    1,
    65,
    127,
    106,
    34,
    1,
    69,
    13,
    1,
    32,
    0,
    40,
    2,
    24,
    32,
    0,
    40,
    2,
    4,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    65,
    1,
    15,
    11,
    32,
    0,
    40,
    2,
    4,
    33,
    3,
    65,
    1,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    32,
    4,
    32,
    5,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    1,
    32,
    2,
    65,
    1,
    106,
    33,
    7,
    32,
    0,
    40,
    2,
    28,
    33,
    2,
    32,
    0,
    40,
    2,
    24,
    33,
    4,
    3,
    64,
    32,
    7,
    65,
    127,
    106,
    34,
    7,
    4,
    64,
    32,
    4,
    32,
    3,
    32,
    2,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    1,
    12,
    3,
    11,
    11,
    32,
    0,
    32,
    11,
    58,
    0,
    32,
    32,
    0,
    32,
    9,
    54,
    2,
    4,
    65,
    0,
    15,
    11,
    32,
    0,
    40,
    2,
    4,
    33,
    6,
    65,
    1,
    33,
    1,
    32,
    0,
    32,
    10,
    32,
    2,
    32,
    3,
    16,
    111,
    13,
    0,
    32,
    0,
    40,
    2,
    24,
    32,
    4,
    32,
    5,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    8,
    65,
    1,
    106,
    33,
    7,
    32,
    0,
    40,
    2,
    28,
    33,
    2,
    32,
    0,
    40,
    2,
    24,
    33,
    0,
    3,
    64,
    32,
    7,
    65,
    127,
    106,
    34,
    7,
    69,
    4,
    64,
    65,
    0,
    15,
    11,
    32,
    0,
    32,
    6,
    32,
    2,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    11,
    32,
    1,
    15,
    11,
    32,
    0,
    40,
    2,
    24,
    32,
    4,
    32,
    5,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    205,
    5,
    2,
    8,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    6,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    44,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    24,
    4,
    64,
    32,
    1,
    65,
    24,
    106,
    33,
    9,
    32,
    1,
    65,
    32,
    106,
    33,
    7,
    32,
    1,
    65,
    44,
    106,
    33,
    8,
    3,
    64,
    32,
    1,
    40,
    2,
    36,
    33,
    5,
    32,
    9,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    1,
    40,
    2,
    24,
    32,
    7,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    7,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    8,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    3,
    32,
    8,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    2,
    32,
    1,
    40,
    2,
    36,
    34,
    10,
    32,
    4,
    32,
    10,
    106,
    32,
    5,
    16,
    96,
    32,
    8,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    1,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    1,
    65,
    36,
    106,
    33,
    9,
    32,
    1,
    41,
    3,
    0,
    33,
    12,
    32,
    3,
    69,
    13,
    1,
    32,
    6,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    9,
    65,
    0,
    16,
    110,
    32,
    6,
    45,
    0,
    0,
    34,
    4,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    34,
    12,
    167,
    114,
    13,
    2,
    32,
    6,
    45,
    0,
    1,
    65,
    2,
    70,
    13,
    2,
    32,
    1,
    65,
    24,
    106,
    33,
    10,
    32,
    1,
    65,
    44,
    106,
    33,
    7,
    32,
    1,
    65,
    32,
    106,
    33,
    8,
    3,
    64,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    2,
    64,
    32,
    10,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    1,
    40,
    2,
    36,
    33,
    5,
    32,
    10,
    32,
    8,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    1,
    40,
    2,
    24,
    32,
    8,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    8,
    32,
    8,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    7,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    2,
    32,
    7,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    3,
    32,
    1,
    40,
    2,
    36,
    34,
    11,
    32,
    4,
    32,
    11,
    106,
    32,
    5,
    16,
    96,
    32,
    7,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    1,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    41,
    3,
    0,
    33,
    12,
    32,
    6,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    9,
    65,
    0,
    16,
    110,
    32,
    6,
    45,
    0,
    0,
    34,
    4,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    34,
    12,
    167,
    114,
    13,
    3,
    32,
    6,
    45,
    0,
    1,
    65,
    2,
    71,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    9,
    65,
    0,
    16,
    110,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    33,
    12,
    32,
    6,
    45,
    0,
    0,
    33,
    4,
    11,
    2,
    64,
    2,
    64,
    32,
    0,
    2,
    127,
    32,
    4,
    65,
    255,
    1,
    113,
    65,
    1,
    70,
    4,
    64,
    65,
    22,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    2,
    32,
    1,
    65,
    14,
    106,
    65,
    142,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    136,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    128,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    13,
    3,
    32,
    2,
    66,
    150,
    128,
    128,
    128,
    224,
    2,
    55,
    2,
    4,
    32,
    2,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    11,
    32,
    2,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    55,
    2,
    4,
    65,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    12,
    62,
    2,
    4,
    65,
    0,
    11,
    54,
    2,
    0,
    32,
    6,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    65,
    22,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    205,
    5,
    2,
    8,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    6,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    44,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    24,
    4,
    64,
    32,
    1,
    65,
    24,
    106,
    33,
    9,
    32,
    1,
    65,
    32,
    106,
    33,
    7,
    32,
    1,
    65,
    44,
    106,
    33,
    8,
    3,
    64,
    32,
    1,
    40,
    2,
    36,
    33,
    5,
    32,
    9,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    1,
    40,
    2,
    24,
    32,
    7,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    7,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    8,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    3,
    32,
    8,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    2,
    32,
    1,
    40,
    2,
    36,
    34,
    10,
    32,
    4,
    32,
    10,
    106,
    32,
    5,
    16,
    96,
    32,
    8,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    1,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    1,
    65,
    36,
    106,
    33,
    9,
    32,
    1,
    41,
    3,
    0,
    33,
    12,
    32,
    3,
    69,
    13,
    1,
    32,
    6,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    9,
    65,
    0,
    16,
    65,
    32,
    6,
    45,
    0,
    0,
    34,
    4,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    34,
    12,
    167,
    114,
    13,
    2,
    32,
    6,
    45,
    0,
    1,
    65,
    2,
    70,
    13,
    2,
    32,
    1,
    65,
    24,
    106,
    33,
    10,
    32,
    1,
    65,
    44,
    106,
    33,
    7,
    32,
    1,
    65,
    32,
    106,
    33,
    8,
    3,
    64,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    2,
    64,
    32,
    10,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    1,
    40,
    2,
    36,
    33,
    5,
    32,
    10,
    32,
    8,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    1,
    40,
    2,
    24,
    32,
    8,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    8,
    32,
    8,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    7,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    2,
    32,
    7,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    3,
    32,
    1,
    40,
    2,
    36,
    34,
    11,
    32,
    4,
    32,
    11,
    106,
    32,
    5,
    16,
    96,
    32,
    7,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    1,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    41,
    3,
    0,
    33,
    12,
    32,
    6,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    9,
    65,
    0,
    16,
    65,
    32,
    6,
    45,
    0,
    0,
    34,
    4,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    34,
    12,
    167,
    114,
    13,
    3,
    32,
    6,
    45,
    0,
    1,
    65,
    2,
    71,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    9,
    65,
    0,
    16,
    65,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    33,
    12,
    32,
    6,
    45,
    0,
    0,
    33,
    4,
    11,
    2,
    64,
    2,
    64,
    32,
    0,
    2,
    127,
    32,
    4,
    65,
    255,
    1,
    113,
    65,
    1,
    70,
    4,
    64,
    65,
    22,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    2,
    32,
    1,
    65,
    14,
    106,
    65,
    142,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    136,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    128,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    13,
    3,
    32,
    2,
    66,
    150,
    128,
    128,
    128,
    224,
    2,
    55,
    2,
    4,
    32,
    2,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    11,
    32,
    2,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    55,
    2,
    4,
    65,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    12,
    62,
    2,
    4,
    65,
    0,
    11,
    54,
    2,
    0,
    32,
    6,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    65,
    22,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    201,
    4,
    1,
    18,
    127,
    32,
    0,
    47,
    1,
    2,
    33,
    14,
    32,
    0,
    47,
    1,
    0,
    33,
    15,
    2,
    64,
    32,
    2,
    65,
    124,
    113,
    34,
    17,
    32,
    17,
    65,
    192,
    173,
    1,
    112,
    34,
    18,
    107,
    34,
    19,
    65,
    192,
    173,
    1,
    73,
    4,
    64,
    12,
    1,
    11,
    32,
    15,
    65,
    192,
    173,
    1,
    108,
    33,
    20,
    32,
    1,
    33,
    12,
    32,
    19,
    33,
    16,
    3,
    64,
    65,
    192,
    210,
    126,
    33,
    13,
    32,
    16,
    65,
    192,
    210,
    126,
    106,
    33,
    16,
    32,
    12,
    33,
    3,
    3,
    64,
    32,
    4,
    32,
    8,
    32,
    3,
    45,
    0,
    3,
    106,
    34,
    8,
    106,
    33,
    4,
    32,
    5,
    32,
    9,
    32,
    3,
    45,
    0,
    2,
    106,
    34,
    9,
    106,
    33,
    5,
    32,
    6,
    32,
    10,
    32,
    3,
    45,
    0,
    1,
    106,
    34,
    10,
    106,
    33,
    6,
    32,
    7,
    32,
    11,
    32,
    3,
    45,
    0,
    0,
    106,
    34,
    11,
    106,
    33,
    7,
    32,
    3,
    65,
    4,
    106,
    33,
    3,
    32,
    13,
    65,
    4,
    106,
    34,
    13,
    13,
    0,
    11,
    32,
    4,
    65,
    241,
    255,
    3,
    112,
    33,
    4,
    32,
    5,
    65,
    241,
    255,
    3,
    112,
    33,
    5,
    32,
    6,
    65,
    241,
    255,
    3,
    112,
    33,
    6,
    32,
    7,
    65,
    241,
    255,
    3,
    112,
    33,
    7,
    32,
    8,
    65,
    241,
    255,
    3,
    112,
    33,
    8,
    32,
    9,
    65,
    241,
    255,
    3,
    112,
    33,
    9,
    32,
    10,
    65,
    241,
    255,
    3,
    112,
    33,
    10,
    32,
    11,
    65,
    241,
    255,
    3,
    112,
    33,
    11,
    32,
    12,
    65,
    192,
    173,
    1,
    106,
    33,
    12,
    32,
    14,
    32,
    20,
    106,
    65,
    241,
    255,
    3,
    112,
    33,
    14,
    32,
    16,
    65,
    192,
    173,
    1,
    79,
    13,
    0,
    11,
    11,
    32,
    2,
    65,
    3,
    113,
    33,
    13,
    32,
    18,
    65,
    252,
    255,
    1,
    113,
    34,
    2,
    4,
    64,
    32,
    1,
    32,
    19,
    106,
    33,
    3,
    65,
    0,
    32,
    2,
    107,
    33,
    12,
    3,
    64,
    32,
    7,
    32,
    11,
    32,
    3,
    45,
    0,
    0,
    106,
    34,
    11,
    106,
    33,
    7,
    32,
    4,
    32,
    8,
    32,
    3,
    65,
    3,
    106,
    45,
    0,
    0,
    106,
    34,
    8,
    106,
    33,
    4,
    32,
    5,
    32,
    9,
    32,
    3,
    65,
    2,
    106,
    45,
    0,
    0,
    106,
    34,
    9,
    106,
    33,
    5,
    32,
    6,
    32,
    10,
    32,
    3,
    65,
    1,
    106,
    45,
    0,
    0,
    106,
    34,
    10,
    106,
    33,
    6,
    32,
    3,
    65,
    4,
    106,
    33,
    3,
    32,
    12,
    65,
    4,
    106,
    34,
    12,
    13,
    0,
    11,
    11,
    32,
    14,
    32,
    15,
    32,
    18,
    108,
    106,
    65,
    241,
    255,
    3,
    112,
    32,
    7,
    65,
    241,
    255,
    3,
    112,
    65,
    2,
    116,
    106,
    32,
    6,
    65,
    241,
    255,
    3,
    112,
    65,
    2,
    116,
    32,
    10,
    65,
    241,
    255,
    3,
    112,
    34,
    2,
    107,
    106,
    32,
    5,
    65,
    241,
    255,
    3,
    112,
    65,
    2,
    116,
    32,
    9,
    65,
    241,
    255,
    3,
    112,
    34,
    12,
    65,
    1,
    116,
    107,
    106,
    65,
    0,
    32,
    8,
    65,
    241,
    255,
    3,
    112,
    34,
    3,
    107,
    65,
    3,
    108,
    32,
    4,
    65,
    241,
    255,
    3,
    112,
    65,
    2,
    116,
    106,
    106,
    65,
    166,
    255,
    23,
    106,
    33,
    4,
    32,
    3,
    32,
    12,
    32,
    2,
    32,
    11,
    65,
    241,
    255,
    3,
    112,
    32,
    15,
    106,
    106,
    106,
    106,
    33,
    5,
    32,
    13,
    4,
    64,
    32,
    1,
    32,
    17,
    106,
    33,
    3,
    3,
    64,
    32,
    5,
    32,
    3,
    45,
    0,
    0,
    106,
    34,
    5,
    32,
    4,
    106,
    33,
    4,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    13,
    65,
    127,
    106,
    34,
    13,
    13,
    0,
    11,
    11,
    32,
    0,
    32,
    4,
    65,
    241,
    255,
    3,
    112,
    59,
    1,
    2,
    32,
    0,
    32,
    5,
    65,
    241,
    255,
    3,
    112,
    59,
    1,
    0,
    11,
    177,
    5,
    1,
    9,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    36,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    3,
    58,
    0,
    40,
    32,
    3,
    66,
    128,
    128,
    128,
    128,
    128,
    4,
    55,
    3,
    8,
    32,
    3,
    32,
    0,
    54,
    2,
    32,
    32,
    3,
    65,
    0,
    54,
    2,
    24,
    32,
    3,
    65,
    0,
    54,
    2,
    16,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    8,
    34,
    4,
    4,
    64,
    32,
    2,
    40,
    2,
    0,
    33,
    6,
    32,
    2,
    40,
    2,
    4,
    34,
    7,
    32,
    2,
    65,
    12,
    106,
    40,
    2,
    0,
    34,
    5,
    32,
    5,
    32,
    7,
    75,
    27,
    34,
    5,
    69,
    13,
    1,
    32,
    0,
    32,
    6,
    40,
    2,
    0,
    32,
    6,
    40,
    2,
    4,
    32,
    1,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    3,
    32,
    6,
    65,
    12,
    106,
    33,
    0,
    32,
    2,
    40,
    2,
    16,
    33,
    9,
    32,
    5,
    33,
    8,
    3,
    64,
    32,
    3,
    32,
    4,
    65,
    28,
    106,
    45,
    0,
    0,
    58,
    0,
    40,
    32,
    3,
    32,
    4,
    65,
    4,
    106,
    41,
    2,
    0,
    66,
    32,
    137,
    55,
    3,
    8,
    32,
    4,
    65,
    24,
    106,
    40,
    2,
    0,
    33,
    1,
    65,
    0,
    33,
    10,
    65,
    0,
    33,
    2,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    20,
    106,
    40,
    2,
    0,
    65,
    1,
    107,
    14,
    2,
    0,
    2,
    1,
    11,
    32,
    1,
    65,
    3,
    116,
    32,
    9,
    106,
    34,
    11,
    40,
    2,
    4,
    65,
    193,
    0,
    71,
    13,
    1,
    32,
    11,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    1,
    11,
    65,
    1,
    33,
    2,
    11,
    32,
    3,
    32,
    1,
    54,
    2,
    20,
    32,
    3,
    32,
    2,
    54,
    2,
    16,
    32,
    4,
    65,
    16,
    106,
    40,
    2,
    0,
    33,
    2,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    12,
    106,
    40,
    2,
    0,
    65,
    1,
    107,
    14,
    2,
    0,
    2,
    1,
    11,
    32,
    2,
    65,
    3,
    116,
    32,
    9,
    106,
    34,
    1,
    40,
    2,
    4,
    65,
    193,
    0,
    71,
    13,
    1,
    32,
    1,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    2,
    11,
    65,
    1,
    33,
    10,
    11,
    32,
    3,
    32,
    2,
    54,
    2,
    28,
    32,
    3,
    32,
    10,
    54,
    2,
    24,
    32,
    9,
    32,
    4,
    40,
    2,
    0,
    65,
    3,
    116,
    106,
    34,
    1,
    40,
    2,
    0,
    32,
    3,
    65,
    8,
    106,
    32,
    1,
    40,
    2,
    4,
    17,
    0,
    0,
    13,
    4,
    32,
    8,
    65,
    127,
    106,
    34,
    8,
    69,
    13,
    3,
    32,
    4,
    65,
    32,
    106,
    33,
    4,
    32,
    0,
    65,
    124,
    106,
    33,
    1,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    32,
    0,
    65,
    8,
    106,
    33,
    0,
    32,
    3,
    40,
    2,
    32,
    32,
    1,
    40,
    2,
    0,
    32,
    2,
    32,
    3,
    40,
    2,
    36,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    0,
    11,
    12,
    3,
    11,
    32,
    2,
    40,
    2,
    0,
    33,
    6,
    32,
    2,
    40,
    2,
    4,
    34,
    7,
    32,
    2,
    65,
    20,
    106,
    40,
    2,
    0,
    34,
    5,
    32,
    5,
    32,
    7,
    75,
    27,
    34,
    5,
    69,
    13,
    0,
    32,
    2,
    40,
    2,
    16,
    33,
    4,
    32,
    0,
    32,
    6,
    40,
    2,
    0,
    32,
    6,
    40,
    2,
    4,
    32,
    1,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    2,
    32,
    6,
    65,
    12,
    106,
    33,
    0,
    32,
    5,
    33,
    2,
    3,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    3,
    65,
    8,
    106,
    32,
    4,
    65,
    4,
    106,
    40,
    2,
    0,
    17,
    0,
    0,
    13,
    3,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    69,
    13,
    2,
    32,
    4,
    65,
    8,
    106,
    33,
    4,
    32,
    0,
    65,
    124,
    106,
    33,
    1,
    32,
    0,
    40,
    2,
    0,
    33,
    8,
    32,
    0,
    65,
    8,
    106,
    33,
    0,
    32,
    3,
    40,
    2,
    32,
    32,
    1,
    40,
    2,
    0,
    32,
    8,
    32,
    3,
    40,
    2,
    36,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    0,
    11,
    12,
    2,
    11,
    65,
    0,
    33,
    5,
    11,
    32,
    7,
    32,
    5,
    75,
    4,
    64,
    32,
    3,
    40,
    2,
    32,
    32,
    6,
    32,
    5,
    65,
    3,
    116,
    106,
    34,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    32,
    3,
    40,
    2,
    36,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    1,
    11,
    65,
    0,
    12,
    1,
    11,
    65,
    1,
    11,
    32,
    3,
    65,
    48,
    106,
    36,
    0,
    11,
    177,
    4,
    1,
    8,
    127,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    0,
    34,
    5,
    4,
    64,
    32,
    1,
    65,
    127,
    106,
    33,
    10,
    32,
    0,
    65,
    2,
    116,
    33,
    9,
    65,
    0,
    32,
    1,
    107,
    33,
    11,
    3,
    64,
    32,
    5,
    65,
    8,
    106,
    33,
    6,
    32,
    5,
    40,
    2,
    8,
    34,
    7,
    65,
    1,
    113,
    4,
    64,
    3,
    64,
    32,
    6,
    32,
    7,
    65,
    126,
    113,
    54,
    2,
    0,
    2,
    127,
    65,
    0,
    32,
    5,
    40,
    2,
    4,
    34,
    7,
    65,
    124,
    113,
    34,
    6,
    69,
    13,
    0,
    26,
    65,
    0,
    32,
    6,
    32,
    6,
    45,
    0,
    0,
    65,
    1,
    113,
    27,
    11,
    33,
    1,
    2,
    64,
    32,
    5,
    40,
    2,
    0,
    34,
    8,
    65,
    124,
    113,
    34,
    12,
    69,
    13,
    0,
    65,
    0,
    32,
    12,
    32,
    8,
    65,
    2,
    113,
    27,
    34,
    8,
    69,
    13,
    0,
    32,
    8,
    32,
    8,
    40,
    2,
    4,
    65,
    3,
    113,
    32,
    6,
    114,
    54,
    2,
    4,
    32,
    5,
    40,
    2,
    4,
    34,
    7,
    65,
    124,
    113,
    33,
    6,
    11,
    32,
    5,
    32,
    6,
    4,
    127,
    32,
    6,
    32,
    6,
    40,
    2,
    0,
    65,
    3,
    113,
    32,
    5,
    40,
    2,
    0,
    65,
    124,
    113,
    114,
    54,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    5,
    32,
    7,
    11,
    65,
    3,
    113,
    54,
    2,
    4,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    34,
    5,
    65,
    3,
    113,
    54,
    2,
    0,
    32,
    5,
    65,
    2,
    113,
    4,
    64,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    2,
    114,
    54,
    2,
    0,
    11,
    32,
    2,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    65,
    8,
    106,
    33,
    6,
    32,
    1,
    34,
    5,
    40,
    2,
    8,
    34,
    7,
    65,
    1,
    113,
    13,
    0,
    11,
    11,
    32,
    5,
    40,
    2,
    0,
    65,
    124,
    113,
    34,
    1,
    32,
    6,
    107,
    32,
    9,
    79,
    4,
    64,
    32,
    6,
    32,
    3,
    32,
    0,
    32,
    4,
    40,
    2,
    16,
    17,
    0,
    0,
    65,
    2,
    116,
    106,
    65,
    8,
    106,
    32,
    1,
    32,
    9,
    107,
    32,
    11,
    113,
    34,
    1,
    77,
    4,
    64,
    32,
    1,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    65,
    120,
    106,
    34,
    1,
    66,
    0,
    55,
    2,
    0,
    32,
    1,
    32,
    5,
    40,
    2,
    0,
    65,
    124,
    113,
    54,
    2,
    0,
    2,
    64,
    32,
    5,
    40,
    2,
    0,
    34,
    0,
    65,
    124,
    113,
    34,
    2,
    69,
    13,
    0,
    65,
    0,
    32,
    2,
    32,
    0,
    65,
    2,
    113,
    27,
    34,
    0,
    69,
    13,
    0,
    32,
    0,
    32,
    0,
    40,
    2,
    4,
    65,
    3,
    113,
    32,
    1,
    114,
    54,
    2,
    4,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    4,
    65,
    3,
    113,
    32,
    5,
    114,
    54,
    2,
    4,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    3,
    113,
    32,
    1,
    114,
    54,
    2,
    0,
    32,
    6,
    32,
    6,
    40,
    2,
    0,
    65,
    126,
    113,
    54,
    2,
    0,
    32,
    5,
    40,
    2,
    0,
    34,
    0,
    65,
    2,
    113,
    69,
    13,
    5,
    32,
    5,
    32,
    0,
    65,
    125,
    113,
    54,
    2,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    2,
    114,
    54,
    2,
    0,
    12,
    5,
    11,
    32,
    6,
    32,
    10,
    113,
    69,
    13,
    3,
    11,
    32,
    2,
    32,
    5,
    40,
    2,
    8,
    34,
    5,
    54,
    2,
    0,
    32,
    5,
    13,
    0,
    11,
    11,
    65,
    0,
    15,
    11,
    32,
    2,
    32,
    6,
    40,
    2,
    0,
    65,
    124,
    113,
    54,
    2,
    0,
    32,
    5,
    33,
    1,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    114,
    54,
    2,
    0,
    32,
    1,
    65,
    8,
    106,
    11,
    170,
    5,
    1,
    3,
    127,
    35,
    0,
    65,
    64,
    106,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    45,
    0,
    0,
    65,
    1,
    107,
    14,
    2,
    0,
    2,
    1,
    11,
    65,
    136,
    189,
    193,
    0,
    33,
    3,
    65,
    22,
    33,
    4,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    45,
    0,
    1,
    65,
    1,
    107,
    14,
    17,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    18,
    0,
    11,
    65,
    161,
    191,
    193,
    0,
    33,
    3,
    65,
    16,
    33,
    4,
    12,
    17,
    11,
    65,
    144,
    191,
    193,
    0,
    33,
    3,
    65,
    17,
    33,
    4,
    12,
    16,
    11,
    65,
    254,
    190,
    193,
    0,
    33,
    3,
    65,
    18,
    33,
    4,
    12,
    15,
    11,
    65,
    238,
    190,
    193,
    0,
    33,
    3,
    65,
    16,
    33,
    4,
    12,
    14,
    11,
    65,
    220,
    190,
    193,
    0,
    33,
    3,
    65,
    18,
    33,
    4,
    12,
    13,
    11,
    65,
    207,
    190,
    193,
    0,
    33,
    3,
    65,
    13,
    33,
    4,
    12,
    12,
    11,
    65,
    193,
    190,
    193,
    0,
    12,
    10,
    11,
    65,
    172,
    190,
    193,
    0,
    33,
    3,
    65,
    21,
    33,
    4,
    12,
    10,
    11,
    65,
    161,
    190,
    193,
    0,
    33,
    3,
    65,
    11,
    33,
    4,
    12,
    9,
    11,
    65,
    140,
    190,
    193,
    0,
    33,
    3,
    65,
    21,
    33,
    4,
    12,
    8,
    11,
    65,
    247,
    189,
    193,
    0,
    33,
    3,
    65,
    21,
    33,
    4,
    12,
    7,
    11,
    65,
    224,
    189,
    193,
    0,
    33,
    3,
    65,
    23,
    33,
    4,
    12,
    6,
    11,
    65,
    212,
    189,
    193,
    0,
    33,
    3,
    65,
    12,
    33,
    4,
    12,
    5,
    11,
    65,
    203,
    189,
    193,
    0,
    33,
    3,
    65,
    9,
    33,
    4,
    12,
    4,
    11,
    65,
    193,
    189,
    193,
    0,
    33,
    3,
    65,
    10,
    33,
    4,
    12,
    3,
    11,
    65,
    172,
    189,
    193,
    0,
    33,
    3,
    65,
    21,
    33,
    4,
    12,
    2,
    11,
    65,
    158,
    189,
    193,
    0,
    11,
    33,
    3,
    65,
    14,
    33,
    4,
    11,
    32,
    2,
    65,
    60,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    2,
    32,
    4,
    54,
    2,
    28,
    32,
    2,
    32,
    3,
    54,
    2,
    24,
    32,
    2,
    65,
    39,
    54,
    2,
    12,
    32,
    2,
    66,
    1,
    55,
    2,
    44,
    32,
    2,
    65,
    128,
    189,
    193,
    0,
    54,
    2,
    40,
    32,
    2,
    32,
    2,
    65,
    24,
    106,
    54,
    2,
    8,
    32,
    2,
    32,
    2,
    65,
    8,
    106,
    54,
    2,
    56,
    32,
    1,
    32,
    2,
    65,
    40,
    106,
    16,
    102,
    33,
    0,
    12,
    2,
    11,
    32,
    2,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    54,
    2,
    4,
    65,
    20,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    16,
    106,
    65,
    192,
    194,
    193,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    184,
    194,
    193,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    176,
    194,
    193,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    2,
    66,
    148,
    128,
    128,
    128,
    192,
    2,
    55,
    2,
    12,
    32,
    2,
    32,
    0,
    54,
    2,
    8,
    32,
    2,
    65,
    60,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    2,
    65,
    36,
    106,
    65,
    40,
    54,
    2,
    0,
    32,
    2,
    66,
    3,
    55,
    2,
    44,
    32,
    2,
    65,
    192,
    191,
    193,
    0,
    54,
    2,
    40,
    32,
    2,
    65,
    41,
    54,
    2,
    28,
    32,
    2,
    32,
    2,
    65,
    24,
    106,
    54,
    2,
    56,
    32,
    2,
    32,
    2,
    65,
    4,
    106,
    54,
    2,
    32,
    32,
    2,
    32,
    2,
    65,
    8,
    106,
    54,
    2,
    24,
    32,
    1,
    32,
    2,
    65,
    40,
    106,
    16,
    102,
    33,
    0,
    32,
    2,
    40,
    2,
    8,
    34,
    1,
    69,
    13,
    1,
    32,
    2,
    40,
    2,
    12,
    34,
    3,
    69,
    13,
    1,
    32,
    1,
    32,
    3,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    0,
    40,
    2,
    0,
    32,
    1,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    32,
    17,
    0,
    0,
    33,
    0,
    11,
    32,
    2,
    65,
    64,
    107,
    36,
    0,
    32,
    0,
    15,
    11,
    65,
    20,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    133,
    4,
    2,
    7,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    4,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    212,
    0,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    0,
    40,
    2,
    24,
    4,
    64,
    32,
    0,
    65,
    24,
    106,
    33,
    6,
    32,
    0,
    65,
    32,
    106,
    33,
    3,
    32,
    0,
    65,
    212,
    0,
    106,
    33,
    5,
    3,
    64,
    32,
    0,
    40,
    2,
    76,
    33,
    1,
    32,
    6,
    32,
    3,
    40,
    2,
    0,
    32,
    2,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    3,
    40,
    2,
    0,
    106,
    32,
    1,
    32,
    2,
    16,
    121,
    26,
    32,
    3,
    32,
    3,
    40,
    2,
    0,
    32,
    2,
    106,
    54,
    2,
    0,
    32,
    5,
    40,
    2,
    0,
    34,
    1,
    32,
    2,
    73,
    13,
    3,
    32,
    5,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    2,
    107,
    34,
    1,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    76,
    34,
    7,
    32,
    2,
    32,
    7,
    106,
    32,
    1,
    16,
    96,
    32,
    5,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    33,
    2,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    168,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    16,
    57,
    34,
    8,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    13,
    1,
    66,
    3,
    33,
    9,
    66,
    0,
    33,
    8,
    32,
    0,
    40,
    2,
    72,
    65,
    7,
    75,
    13,
    4,
    32,
    0,
    65,
    24,
    106,
    33,
    5,
    32,
    0,
    65,
    48,
    106,
    33,
    6,
    32,
    0,
    65,
    32,
    106,
    33,
    2,
    3,
    64,
    32,
    6,
    16,
    147,
    1,
    33,
    1,
    32,
    4,
    32,
    6,
    40,
    2,
    16,
    34,
    3,
    65,
    24,
    118,
    58,
    0,
    15,
    32,
    4,
    32,
    3,
    65,
    16,
    118,
    58,
    0,
    14,
    32,
    4,
    32,
    3,
    65,
    8,
    118,
    58,
    0,
    13,
    32,
    4,
    32,
    3,
    58,
    0,
    12,
    32,
    4,
    32,
    1,
    65,
    24,
    118,
    58,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    16,
    118,
    58,
    0,
    10,
    32,
    4,
    32,
    1,
    65,
    8,
    118,
    58,
    0,
    9,
    32,
    4,
    32,
    1,
    58,
    0,
    8,
    32,
    5,
    40,
    2,
    0,
    69,
    13,
    3,
    32,
    0,
    40,
    2,
    72,
    34,
    1,
    65,
    9,
    79,
    13,
    4,
    32,
    5,
    32,
    2,
    40,
    2,
    0,
    65,
    8,
    32,
    1,
    107,
    34,
    3,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    2,
    40,
    2,
    0,
    106,
    32,
    4,
    65,
    8,
    106,
    32,
    1,
    106,
    32,
    3,
    16,
    121,
    26,
    32,
    2,
    32,
    2,
    40,
    2,
    0,
    32,
    3,
    106,
    54,
    2,
    0,
    32,
    0,
    32,
    0,
    40,
    2,
    72,
    32,
    3,
    106,
    34,
    1,
    54,
    2,
    72,
    32,
    1,
    65,
    8,
    73,
    13,
    0,
    11,
    12,
    4,
    11,
    32,
    2,
    32,
    1,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    66,
    255,
    1,
    131,
    33,
    9,
    32,
    8,
    66,
    128,
    126,
    131,
    33,
    8,
    12,
    2,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    168,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    1,
    65,
    8,
    65,
    212,
    129,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    4,
    65,
    16,
    106,
    36,
    0,
    32,
    8,
    32,
    9,
    132,
    11,
    138,
    4,
    1,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    65,
    2,
    75,
    4,
    64,
    32,
    3,
    69,
    13,
    1,
    32,
    3,
    65,
    129,
    128,
    2,
    79,
    13,
    2,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    32,
    2,
    106,
    54,
    2,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    5,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    2,
    65,
    125,
    106,
    34,
    2,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    5,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    3,
    65,
    127,
    106,
    34,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    5,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    3,
    65,
    8,
    118,
    34,
    5,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    34,
    4,
    32,
    4,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    4,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    34,
    4,
    32,
    4,
    45,
    0,
    0,
    65,
    128,
    1,
    114,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    4,
    54,
    2,
    12,
    32,
    4,
    69,
    4,
    64,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    54,
    2,
    4,
    32,
    1,
    32,
    4,
    65,
    1,
    106,
    54,
    2,
    0,
    11,
    32,
    0,
    32,
    3,
    65,
    136,
    161,
    192,
    0,
    106,
    32,
    5,
    65,
    136,
    169,
    192,
    0,
    106,
    32,
    3,
    65,
    128,
    4,
    73,
    27,
    45,
    0,
    0,
    65,
    1,
    116,
    106,
    65,
    192,
    4,
    106,
    34,
    1,
    32,
    1,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    2,
    64,
    32,
    2,
    65,
    255,
    1,
    77,
    4,
    64,
    32,
    2,
    65,
    1,
    116,
    65,
    164,
    154,
    192,
    0,
    106,
    47,
    1,
    0,
    34,
    1,
    65,
    159,
    2,
    75,
    13,
    1,
    32,
    0,
    32,
    1,
    65,
    1,
    116,
    106,
    34,
    0,
    32,
    0,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    15,
    11,
    32,
    2,
    65,
    128,
    2,
    65,
    184,
    173,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    65,
    160,
    2,
    65,
    200,
    173,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    248,
    171,
    192,
    0,
    65,
    51,
    65,
    172,
    172,
    192,
    0,
    16,
    114,
    0,
    11,
    65,
    188,
    172,
    192,
    0,
    65,
    33,
    65,
    224,
    172,
    192,
    0,
    16,
    114,
    0,
    11,
    65,
    240,
    172,
    192,
    0,
    65,
    53,
    65,
    168,
    173,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    219,
    3,
    1,
    4,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    4,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    128,
    1,
    79,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    16,
    32,
    1,
    65,
    128,
    16,
    73,
    13,
    1,
    32,
    2,
    65,
    16,
    106,
    33,
    0,
    32,
    1,
    65,
    128,
    128,
    4,
    73,
    4,
    64,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    18,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    224,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    65,
    3,
    33,
    1,
    12,
    5,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    19,
    32,
    2,
    32,
    1,
    65,
    18,
    118,
    65,
    240,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    18,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    65,
    4,
    33,
    1,
    12,
    4,
    11,
    32,
    4,
    40,
    2,
    8,
    34,
    0,
    32,
    4,
    65,
    4,
    106,
    40,
    2,
    0,
    71,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    33,
    3,
    12,
    3,
    11,
    32,
    0,
    65,
    1,
    106,
    34,
    3,
    32,
    0,
    73,
    13,
    1,
    32,
    0,
    65,
    1,
    116,
    34,
    5,
    32,
    3,
    32,
    5,
    32,
    3,
    75,
    27,
    34,
    3,
    65,
    8,
    32,
    3,
    65,
    8,
    75,
    27,
    33,
    3,
    2,
    64,
    32,
    0,
    69,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    16,
    12,
    1,
    11,
    32,
    2,
    65,
    24,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    2,
    32,
    0,
    54,
    2,
    20,
    32,
    2,
    32,
    4,
    40,
    2,
    0,
    54,
    2,
    16,
    11,
    32,
    2,
    32,
    3,
    32,
    2,
    65,
    16,
    106,
    16,
    80,
    32,
    2,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    0,
    32,
    2,
    40,
    2,
    4,
    33,
    3,
    32,
    2,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    4,
    32,
    3,
    54,
    2,
    0,
    32,
    4,
    65,
    4,
    106,
    32,
    0,
    54,
    2,
    0,
    32,
    4,
    40,
    2,
    8,
    33,
    0,
    12,
    3,
    11,
    32,
    0,
    69,
    13,
    1,
    32,
    3,
    32,
    0,
    16,
    165,
    1,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    192,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    65,
    16,
    106,
    33,
    0,
    65,
    2,
    33,
    1,
    12,
    2,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    0,
    32,
    3,
    106,
    32,
    1,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    12,
    1,
    11,
    32,
    4,
    32,
    0,
    32,
    0,
    32,
    1,
    106,
    16,
    66,
    11,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    65,
    0,
    11,
    202,
    3,
    1,
    4,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    128,
    1,
    79,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    16,
    32,
    1,
    65,
    128,
    16,
    73,
    13,
    1,
    32,
    1,
    65,
    128,
    128,
    4,
    73,
    4,
    64,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    18,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    224,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    65,
    3,
    33,
    1,
    12,
    5,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    19,
    32,
    2,
    32,
    1,
    65,
    18,
    118,
    65,
    240,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    18,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    65,
    4,
    33,
    1,
    12,
    4,
    11,
    32,
    0,
    40,
    2,
    8,
    34,
    3,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    71,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    33,
    4,
    12,
    3,
    11,
    32,
    3,
    65,
    1,
    106,
    34,
    4,
    32,
    3,
    73,
    13,
    1,
    32,
    3,
    65,
    1,
    116,
    34,
    5,
    32,
    4,
    32,
    5,
    32,
    4,
    75,
    27,
    34,
    4,
    65,
    8,
    32,
    4,
    65,
    8,
    75,
    27,
    33,
    4,
    2,
    64,
    32,
    3,
    69,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    16,
    12,
    1,
    11,
    32,
    2,
    65,
    24,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    2,
    32,
    3,
    54,
    2,
    20,
    32,
    2,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    16,
    11,
    32,
    2,
    32,
    4,
    32,
    2,
    65,
    16,
    106,
    16,
    80,
    32,
    2,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    3,
    32,
    2,
    40,
    2,
    4,
    33,
    4,
    32,
    2,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    40,
    2,
    8,
    33,
    3,
    12,
    3,
    11,
    32,
    3,
    69,
    13,
    1,
    32,
    4,
    32,
    3,
    16,
    165,
    1,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    192,
    1,
    114,
    58,
    0,
    16,
    65,
    2,
    33,
    1,
    12,
    2,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    3,
    32,
    4,
    106,
    32,
    1,
    58,
    0,
    0,
    32,
    0,
    32,
    0,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    12,
    1,
    11,
    32,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    106,
    16,
    66,
    11,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    255,
    3,
    2,
    4,
    127,
    1,
    126,
    65,
    1,
    32,
    1,
    40,
    2,
    24,
    65,
    39,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    4,
    64,
    65,
    244,
    0,
    33,
    3,
    65,
    2,
    33,
    2,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    0,
    34,
    0,
    65,
    119,
    106,
    14,
    31,
    5,
    1,
    3,
    3,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    3,
    3,
    3,
    3,
    4,
    2,
    11,
    65,
    242,
    0,
    33,
    3,
    12,
    4,
    11,
    65,
    238,
    0,
    33,
    3,
    12,
    3,
    11,
    32,
    0,
    65,
    220,
    0,
    70,
    13,
    1,
    11,
    2,
    127,
    2,
    126,
    2,
    64,
    32,
    0,
    16,
    40,
    69,
    4,
    64,
    32,
    0,
    16,
    21,
    69,
    13,
    1,
    65,
    1,
    12,
    3,
    11,
    32,
    0,
    65,
    1,
    114,
    103,
    65,
    2,
    118,
    65,
    7,
    115,
    173,
    66,
    128,
    128,
    128,
    128,
    208,
    0,
    132,
    12,
    1,
    11,
    32,
    0,
    65,
    1,
    114,
    103,
    65,
    2,
    118,
    65,
    7,
    115,
    173,
    66,
    128,
    128,
    128,
    128,
    208,
    0,
    132,
    11,
    33,
    6,
    65,
    3,
    11,
    33,
    2,
    32,
    0,
    33,
    3,
    12,
    1,
    11,
    32,
    0,
    33,
    3,
    11,
    3,
    64,
    32,
    2,
    33,
    4,
    65,
    220,
    0,
    33,
    0,
    65,
    1,
    33,
    2,
    2,
    64,
    2,
    126,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    1,
    107,
    14,
    3,
    1,
    5,
    0,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    6,
    66,
    32,
    136,
    167,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    5,
    3,
    2,
    1,
    0,
    6,
    5,
    11,
    65,
    245,
    0,
    33,
    0,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    48,
    132,
    12,
    6,
    11,
    65,
    251,
    0,
    33,
    0,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    32,
    132,
    12,
    5,
    11,
    65,
    48,
    65,
    215,
    0,
    32,
    3,
    32,
    6,
    167,
    34,
    4,
    65,
    2,
    116,
    65,
    28,
    113,
    118,
    65,
    15,
    113,
    34,
    0,
    65,
    10,
    73,
    27,
    32,
    0,
    106,
    33,
    0,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    16,
    132,
    32,
    4,
    69,
    13,
    4,
    26,
    32,
    6,
    66,
    127,
    124,
    66,
    255,
    255,
    255,
    255,
    15,
    131,
    32,
    6,
    66,
    128,
    128,
    128,
    128,
    112,
    131,
    132,
    12,
    4,
    11,
    65,
    253,
    0,
    33,
    0,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    12,
    3,
    11,
    65,
    0,
    33,
    2,
    32,
    3,
    33,
    0,
    12,
    3,
    11,
    32,
    1,
    40,
    2,
    24,
    65,
    39,
    32,
    1,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    15,
    11,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    192,
    0,
    132,
    11,
    33,
    6,
    65,
    3,
    33,
    2,
    11,
    32,
    1,
    40,
    2,
    24,
    32,
    0,
    32,
    1,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    11,
    11,
    156,
    3,
    1,
    5,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    6,
    36,
    0,
    2,
    64,
    2,
    127,
    32,
    2,
    4,
    64,
    3,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    8,
    45,
    0,
    0,
    69,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    65,
    188,
    198,
    193,
    0,
    65,
    4,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    0,
    65,
    1,
    12,
    3,
    11,
    65,
    0,
    33,
    4,
    32,
    2,
    33,
    3,
    2,
    127,
    3,
    64,
    2,
    64,
    32,
    1,
    32,
    4,
    106,
    33,
    5,
    2,
    64,
    32,
    3,
    65,
    7,
    77,
    4,
    64,
    32,
    3,
    69,
    13,
    2,
    32,
    2,
    32,
    4,
    107,
    33,
    7,
    65,
    0,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    5,
    106,
    45,
    0,
    0,
    65,
    10,
    70,
    13,
    2,
    32,
    7,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    71,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    6,
    65,
    8,
    106,
    32,
    5,
    32,
    3,
    16,
    49,
    32,
    6,
    40,
    2,
    8,
    65,
    1,
    71,
    13,
    1,
    32,
    6,
    40,
    2,
    12,
    33,
    3,
    11,
    32,
    3,
    32,
    4,
    106,
    34,
    3,
    65,
    1,
    106,
    33,
    4,
    2,
    64,
    32,
    3,
    32,
    2,
    79,
    13,
    0,
    32,
    1,
    32,
    3,
    106,
    45,
    0,
    0,
    65,
    10,
    71,
    13,
    0,
    65,
    1,
    12,
    3,
    11,
    32,
    2,
    32,
    4,
    107,
    33,
    3,
    32,
    2,
    32,
    4,
    79,
    13,
    1,
    11,
    11,
    32,
    2,
    33,
    4,
    65,
    0,
    11,
    33,
    3,
    32,
    0,
    40,
    2,
    8,
    32,
    3,
    58,
    0,
    0,
    32,
    0,
    40,
    2,
    4,
    33,
    3,
    32,
    0,
    40,
    2,
    0,
    33,
    5,
    2,
    64,
    2,
    64,
    32,
    2,
    32,
    4,
    71,
    4,
    64,
    32,
    2,
    32,
    4,
    75,
    4,
    64,
    32,
    1,
    32,
    4,
    106,
    34,
    7,
    44,
    0,
    0,
    65,
    191,
    127,
    74,
    13,
    2,
    11,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    4,
    65,
    192,
    198,
    193,
    0,
    16,
    12,
    0,
    11,
    32,
    5,
    32,
    1,
    32,
    4,
    32,
    3,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    1,
    65,
    1,
    12,
    4,
    11,
    65,
    1,
    32,
    5,
    32,
    1,
    32,
    4,
    32,
    3,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    3,
    26,
    32,
    7,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    4,
    11,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    34,
    2,
    13,
    0,
    11,
    11,
    65,
    0,
    11,
    32,
    6,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    32,
    1,
    32,
    2,
    32,
    4,
    32,
    2,
    65,
    208,
    198,
    193,
    0,
    16,
    12,
    0,
    11,
    160,
    3,
    1,
    5,
    127,
    2,
    64,
    2,
    64,
    65,
    0,
    65,
    15,
    32,
    0,
    65,
    164,
    154,
    4,
    73,
    27,
    34,
    1,
    32,
    1,
    65,
    8,
    106,
    34,
    1,
    32,
    1,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    32,
    0,
    65,
    11,
    116,
    34,
    2,
    75,
    27,
    34,
    1,
    32,
    1,
    65,
    4,
    106,
    34,
    1,
    32,
    1,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    32,
    2,
    75,
    27,
    34,
    1,
    32,
    1,
    65,
    2,
    106,
    34,
    1,
    32,
    1,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    32,
    2,
    75,
    27,
    34,
    1,
    32,
    1,
    65,
    1,
    106,
    34,
    1,
    32,
    1,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    32,
    2,
    75,
    27,
    34,
    3,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    34,
    1,
    32,
    2,
    70,
    32,
    1,
    32,
    2,
    73,
    106,
    32,
    3,
    106,
    34,
    2,
    65,
    30,
    77,
    4,
    64,
    65,
    177,
    5,
    33,
    4,
    32,
    2,
    65,
    30,
    71,
    4,
    64,
    32,
    2,
    65,
    2,
    116,
    65,
    220,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    21,
    118,
    33,
    4,
    11,
    65,
    0,
    33,
    1,
    32,
    2,
    65,
    127,
    106,
    34,
    3,
    32,
    2,
    77,
    4,
    64,
    32,
    3,
    65,
    31,
    79,
    13,
    3,
    32,
    3,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    255,
    255,
    255,
    0,
    113,
    33,
    1,
    11,
    2,
    64,
    32,
    4,
    32,
    2,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    21,
    118,
    34,
    3,
    65,
    1,
    106,
    70,
    13,
    0,
    32,
    0,
    32,
    1,
    107,
    33,
    2,
    32,
    3,
    65,
    177,
    5,
    32,
    3,
    65,
    177,
    5,
    75,
    27,
    33,
    5,
    32,
    4,
    65,
    127,
    106,
    33,
    1,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    3,
    32,
    5,
    70,
    13,
    3,
    32,
    0,
    32,
    3,
    65,
    212,
    217,
    193,
    0,
    106,
    45,
    0,
    0,
    106,
    34,
    0,
    32,
    2,
    75,
    13,
    1,
    32,
    1,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    71,
    13,
    0,
    11,
    32,
    1,
    33,
    3,
    11,
    32,
    3,
    65,
    1,
    113,
    15,
    11,
    32,
    2,
    65,
    31,
    65,
    160,
    216,
    193,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    177,
    5,
    65,
    176,
    216,
    193,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    65,
    31,
    65,
    192,
    216,
    193,
    0,
    16,
    98,
    0,
    11,
    182,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    16,
    106,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    65,
    16,
    106,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    89,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    16,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    20,
    34,
    4,
    69,
    13,
    1,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    6,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    70,
    13,
    1,
    32,
    3,
    53,
    0,
    21,
    32,
    3,
    65,
    25,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    27,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    20,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    65,
    8,
    106,
    65,
    27,
    16,
    103,
    32,
    3,
    40,
    2,
    12,
    33,
    2,
    32,
    3,
    40,
    2,
    8,
    34,
    0,
    65,
    172,
    136,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    23,
    106,
    65,
    195,
    136,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    188,
    136,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    180,
    136,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    2,
    32,
    1,
    65,
    27,
    54,
    2,
    8,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    2,
    54,
    2,
    4,
    65,
    17,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    6,
    11,
    32,
    3,
    40,
    2,
    16,
    65,
    1,
    71,
    13,
    3,
    32,
    3,
    45,
    0,
    20,
    65,
    2,
    79,
    13,
    2,
    12,
    3,
    11,
    32,
    4,
    32,
    2,
    65,
    156,
    136,
    192,
    0,
    16,
    101,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    40,
    2,
    24,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    24,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    32,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    172,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    29,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    24,
    106,
    65,
    212,
    134,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    204,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    196,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    188,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    8,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    5,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    4,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    4,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    3,
    12,
    4,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    172,
    134,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    172,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    28,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    24,
    106,
    65,
    212,
    134,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    204,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    196,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    188,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    8,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    5,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    4,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    4,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    3,
    12,
    4,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    172,
    134,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    172,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    28,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    24,
    106,
    65,
    204,
    135,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    196,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    188,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    180,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    8,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    5,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    4,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    4,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    3,
    12,
    4,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    164,
    135,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    172,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    29,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    24,
    106,
    65,
    204,
    135,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    196,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    188,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    180,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    8,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    5,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    4,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    4,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    3,
    12,
    4,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    164,
    135,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    162,
    3,
    2,
    4,
    127,
    2,
    126,
    35,
    0,
    65,
    64,
    106,
    34,
    2,
    36,
    0,
    65,
    1,
    33,
    4,
    2,
    64,
    32,
    0,
    45,
    0,
    4,
    13,
    0,
    32,
    0,
    45,
    0,
    5,
    33,
    5,
    32,
    0,
    40,
    2,
    0,
    34,
    3,
    45,
    0,
    0,
    65,
    4,
    113,
    4,
    64,
    32,
    5,
    69,
    4,
    64,
    32,
    3,
    40,
    2,
    24,
    65,
    224,
    198,
    193,
    0,
    65,
    3,
    32,
    3,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    2,
    32,
    0,
    40,
    2,
    0,
    33,
    3,
    11,
    32,
    2,
    65,
    1,
    58,
    0,
    23,
    32,
    2,
    65,
    52,
    106,
    65,
    164,
    198,
    193,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    3,
    41,
    2,
    24,
    55,
    3,
    8,
    32,
    2,
    32,
    2,
    65,
    23,
    106,
    54,
    2,
    16,
    32,
    3,
    41,
    2,
    8,
    33,
    6,
    32,
    3,
    41,
    2,
    16,
    33,
    7,
    32,
    2,
    32,
    3,
    45,
    0,
    32,
    58,
    0,
    56,
    32,
    2,
    32,
    7,
    55,
    3,
    40,
    32,
    2,
    32,
    6,
    55,
    3,
    32,
    32,
    2,
    32,
    3,
    41,
    2,
    0,
    55,
    3,
    24,
    32,
    2,
    32,
    2,
    65,
    8,
    106,
    54,
    2,
    48,
    32,
    2,
    65,
    8,
    106,
    65,
    216,
    140,
    192,
    0,
    65,
    16,
    16,
    39,
    13,
    1,
    32,
    2,
    65,
    8,
    106,
    65,
    155,
    197,
    193,
    0,
    65,
    2,
    16,
    39,
    13,
    1,
    32,
    1,
    32,
    2,
    65,
    24,
    106,
    65,
    244,
    140,
    192,
    0,
    40,
    2,
    0,
    17,
    0,
    0,
    13,
    1,
    32,
    2,
    40,
    2,
    48,
    65,
    227,
    198,
    193,
    0,
    65,
    2,
    32,
    2,
    40,
    2,
    52,
    40,
    2,
    12,
    17,
    1,
    0,
    33,
    4,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    24,
    65,
    229,
    198,
    193,
    0,
    65,
    231,
    198,
    193,
    0,
    32,
    5,
    27,
    65,
    2,
    65,
    3,
    32,
    5,
    27,
    32,
    3,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    3,
    40,
    2,
    24,
    65,
    216,
    140,
    192,
    0,
    65,
    16,
    32,
    3,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    3,
    40,
    2,
    24,
    65,
    155,
    197,
    193,
    0,
    65,
    2,
    32,
    3,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    1,
    32,
    0,
    40,
    2,
    0,
    65,
    244,
    140,
    192,
    0,
    40,
    2,
    0,
    17,
    0,
    0,
    33,
    4,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    5,
    32,
    0,
    32,
    4,
    58,
    0,
    4,
    32,
    2,
    65,
    64,
    107,
    36,
    0,
    11,
    238,
    2,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    4,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    16,
    78,
    34,
    9,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    1,
    65,
    64,
    107,
    33,
    6,
    32,
    1,
    65,
    40,
    106,
    33,
    5,
    32,
    3,
    69,
    13,
    1,
    3,
    64,
    32,
    5,
    41,
    3,
    0,
    33,
    9,
    32,
    4,
    32,
    5,
    32,
    2,
    32,
    3,
    32,
    6,
    65,
    0,
    16,
    110,
    32,
    4,
    45,
    0,
    0,
    34,
    7,
    32,
    5,
    41,
    3,
    0,
    32,
    9,
    125,
    34,
    9,
    167,
    114,
    32,
    4,
    45,
    0,
    1,
    34,
    8,
    65,
    2,
    70,
    114,
    13,
    3,
    32,
    1,
    16,
    78,
    34,
    9,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    13,
    0,
    11,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    9,
    55,
    2,
    4,
    12,
    2,
    11,
    32,
    5,
    41,
    3,
    0,
    33,
    9,
    32,
    4,
    32,
    5,
    32,
    2,
    65,
    0,
    32,
    6,
    65,
    0,
    16,
    110,
    32,
    5,
    41,
    3,
    0,
    32,
    9,
    125,
    33,
    9,
    32,
    4,
    45,
    0,
    1,
    33,
    8,
    32,
    4,
    45,
    0,
    0,
    33,
    7,
    11,
    32,
    0,
    2,
    127,
    32,
    7,
    65,
    1,
    70,
    4,
    64,
    65,
    22,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    65,
    14,
    106,
    65,
    142,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    136,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    128,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    13,
    4,
    32,
    2,
    66,
    150,
    128,
    128,
    128,
    224,
    2,
    55,
    2,
    4,
    32,
    2,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    11,
    32,
    2,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    55,
    2,
    4,
    65,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    9,
    62,
    2,
    4,
    32,
    0,
    65,
    8,
    106,
    32,
    8,
    58,
    0,
    0,
    65,
    0,
    11,
    54,
    2,
    0,
    11,
    32,
    4,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    65,
    22,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    131,
    3,
    1,
    3,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    32,
    0,
    69,
    4,
    64,
    32,
    1,
    33,
    0,
    12,
    1,
    11,
    32,
    0,
    65,
    3,
    106,
    34,
    3,
    65,
    2,
    118,
    33,
    4,
    2,
    64,
    32,
    1,
    65,
    4,
    75,
    13,
    0,
    32,
    4,
    65,
    127,
    106,
    34,
    0,
    65,
    255,
    1,
    75,
    13,
    0,
    32,
    2,
    65,
    136,
    223,
    193,
    0,
    54,
    2,
    8,
    32,
    2,
    32,
    0,
    65,
    2,
    116,
    65,
    140,
    223,
    193,
    0,
    106,
    34,
    3,
    40,
    2,
    0,
    54,
    2,
    12,
    2,
    64,
    32,
    4,
    32,
    1,
    32,
    2,
    65,
    12,
    106,
    32,
    2,
    65,
    8,
    106,
    65,
    164,
    138,
    192,
    0,
    16,
    32,
    34,
    0,
    13,
    0,
    32,
    2,
    32,
    2,
    65,
    8,
    106,
    32,
    4,
    32,
    1,
    16,
    74,
    65,
    0,
    33,
    0,
    32,
    2,
    40,
    2,
    0,
    13,
    0,
    32,
    2,
    40,
    2,
    4,
    34,
    0,
    32,
    2,
    40,
    2,
    12,
    54,
    2,
    8,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    4,
    32,
    1,
    32,
    2,
    65,
    12,
    106,
    32,
    2,
    65,
    8,
    106,
    65,
    164,
    138,
    192,
    0,
    16,
    32,
    33,
    0,
    11,
    32,
    3,
    32,
    2,
    40,
    2,
    12,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    2,
    65,
    136,
    223,
    193,
    0,
    40,
    2,
    0,
    54,
    2,
    12,
    2,
    64,
    32,
    4,
    32,
    1,
    32,
    2,
    65,
    12,
    106,
    65,
    140,
    138,
    192,
    0,
    65,
    140,
    138,
    192,
    0,
    16,
    32,
    34,
    0,
    13,
    0,
    32,
    3,
    65,
    124,
    113,
    34,
    0,
    32,
    1,
    65,
    3,
    116,
    65,
    128,
    128,
    1,
    106,
    34,
    3,
    32,
    0,
    32,
    3,
    75,
    27,
    65,
    135,
    128,
    4,
    106,
    34,
    3,
    65,
    16,
    118,
    64,
    0,
    34,
    0,
    65,
    127,
    70,
    4,
    64,
    65,
    0,
    33,
    0,
    12,
    1,
    11,
    32,
    0,
    65,
    16,
    116,
    34,
    0,
    32,
    0,
    32,
    3,
    65,
    128,
    128,
    124,
    113,
    106,
    65,
    2,
    114,
    54,
    2,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    2,
    40,
    2,
    12,
    54,
    2,
    8,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    4,
    32,
    1,
    32,
    2,
    65,
    12,
    106,
    65,
    140,
    138,
    192,
    0,
    65,
    140,
    138,
    192,
    0,
    16,
    32,
    33,
    0,
    11,
    65,
    136,
    223,
    193,
    0,
    32,
    2,
    40,
    2,
    12,
    54,
    2,
    0,
    11,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    32,
    0,
    11,
    186,
    2,
    1,
    4,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    3,
    106,
    65,
    124,
    113,
    32,
    1,
    107,
    34,
    3,
    69,
    13,
    0,
    32,
    2,
    32,
    3,
    32,
    3,
    32,
    2,
    75,
    27,
    34,
    4,
    69,
    13,
    0,
    65,
    0,
    33,
    3,
    2,
    64,
    3,
    64,
    32,
    1,
    32,
    3,
    106,
    45,
    0,
    0,
    65,
    10,
    70,
    13,
    1,
    32,
    4,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    71,
    13,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    120,
    106,
    34,
    3,
    77,
    13,
    2,
    12,
    3,
    11,
    65,
    1,
    33,
    1,
    12,
    3,
    11,
    32,
    2,
    65,
    120,
    106,
    33,
    3,
    65,
    0,
    33,
    4,
    11,
    3,
    64,
    32,
    1,
    32,
    4,
    106,
    34,
    5,
    65,
    4,
    106,
    40,
    2,
    0,
    65,
    138,
    148,
    168,
    208,
    0,
    115,
    34,
    6,
    65,
    127,
    115,
    32,
    6,
    65,
    255,
    253,
    251,
    119,
    106,
    113,
    32,
    5,
    40,
    2,
    0,
    65,
    138,
    148,
    168,
    208,
    0,
    115,
    34,
    5,
    65,
    127,
    115,
    32,
    5,
    65,
    255,
    253,
    251,
    119,
    106,
    113,
    114,
    65,
    128,
    129,
    130,
    132,
    120,
    113,
    69,
    4,
    64,
    32,
    4,
    65,
    8,
    106,
    34,
    4,
    32,
    3,
    77,
    13,
    1,
    11,
    11,
    32,
    4,
    32,
    2,
    75,
    13,
    2,
    11,
    65,
    0,
    33,
    3,
    2,
    127,
    65,
    0,
    32,
    2,
    32,
    4,
    70,
    13,
    0,
    26,
    32,
    1,
    32,
    4,
    106,
    33,
    5,
    32,
    2,
    32,
    4,
    107,
    33,
    1,
    3,
    64,
    65,
    1,
    32,
    3,
    32,
    5,
    106,
    45,
    0,
    0,
    65,
    10,
    70,
    13,
    1,
    26,
    32,
    1,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    71,
    13,
    0,
    11,
    32,
    1,
    33,
    3,
    65,
    0,
    11,
    33,
    1,
    32,
    3,
    32,
    4,
    106,
    33,
    3,
    11,
    32,
    0,
    32,
    3,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    15,
    11,
    32,
    4,
    32,
    2,
    65,
    224,
    201,
    193,
    0,
    16,
    101,
    0,
    11,
    228,
    2,
    2,
    3,
    127,
    1,
    126,
    2,
    64,
    32,
    0,
    65,
    24,
    106,
    40,
    2,
    0,
    69,
    13,
    0,
    32,
    0,
    16,
    82,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    1,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    24,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    56,
    106,
    40,
    2,
    0,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    0,
    65,
    196,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    64,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    212,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    80,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    0,
    40,
    2,
    92,
    69,
    13,
    0,
    2,
    64,
    32,
    0,
    65,
    224,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    228,
    0,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    0,
    65,
    236,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    240,
    0,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    248,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    252,
    0,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    144,
    1,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    140,
    1,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    206,
    2,
    1,
    6,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    32,
    1,
    40,
    2,
    0,
    33,
    7,
    2,
    64,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    65,
    3,
    116,
    34,
    5,
    69,
    4,
    64,
    12,
    1,
    11,
    32,
    7,
    65,
    4,
    106,
    33,
    2,
    3,
    64,
    32,
    2,
    40,
    2,
    0,
    32,
    4,
    106,
    33,
    4,
    32,
    2,
    65,
    8,
    106,
    33,
    2,
    32,
    5,
    65,
    120,
    106,
    34,
    5,
    13,
    0,
    11,
    11,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    20,
    106,
    40,
    2,
    0,
    69,
    4,
    64,
    32,
    4,
    33,
    2,
    12,
    1,
    11,
    32,
    6,
    4,
    64,
    65,
    0,
    33,
    5,
    65,
    1,
    33,
    6,
    32,
    4,
    65,
    15,
    77,
    4,
    64,
    32,
    7,
    65,
    4,
    106,
    40,
    2,
    0,
    69,
    13,
    3,
    11,
    32,
    4,
    32,
    4,
    106,
    34,
    2,
    32,
    4,
    79,
    13,
    1,
    12,
    2,
    11,
    65,
    0,
    65,
    0,
    65,
    168,
    195,
    193,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    65,
    127,
    74,
    4,
    64,
    32,
    2,
    69,
    4,
    64,
    65,
    0,
    33,
    5,
    65,
    1,
    33,
    6,
    12,
    2,
    11,
    32,
    2,
    33,
    5,
    32,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    6,
    13,
    1,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    32,
    6,
    54,
    2,
    0,
    32,
    0,
    32,
    5,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    4,
    32,
    3,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    3,
    65,
    4,
    106,
    65,
    196,
    194,
    193,
    0,
    32,
    3,
    65,
    8,
    106,
    16,
    31,
    69,
    4,
    64,
    32,
    3,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    65,
    200,
    195,
    193,
    0,
    65,
    51,
    32,
    3,
    65,
    8,
    106,
    65,
    184,
    195,
    193,
    0,
    65,
    148,
    196,
    193,
    0,
    16,
    93,
    0,
    11,
    192,
    2,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    48,
    107,
    34,
    5,
    36,
    0,
    65,
    39,
    33,
    3,
    2,
    64,
    32,
    0,
    66,
    144,
    206,
    0,
    84,
    4,
    64,
    32,
    0,
    33,
    8,
    12,
    1,
    11,
    3,
    64,
    32,
    5,
    65,
    9,
    106,
    32,
    3,
    106,
    34,
    4,
    65,
    124,
    106,
    32,
    0,
    32,
    0,
    66,
    144,
    206,
    0,
    128,
    34,
    8,
    66,
    144,
    206,
    0,
    126,
    125,
    167,
    34,
    6,
    65,
    255,
    255,
    3,
    113,
    65,
    228,
    0,
    110,
    34,
    7,
    65,
    1,
    116,
    65,
    162,
    199,
    193,
    0,
    106,
    47,
    0,
    0,
    59,
    0,
    0,
    32,
    4,
    65,
    126,
    106,
    32,
    6,
    32,
    7,
    65,
    228,
    0,
    108,
    107,
    65,
    255,
    255,
    3,
    113,
    65,
    1,
    116,
    65,
    162,
    199,
    193,
    0,
    106,
    47,
    0,
    0,
    59,
    0,
    0,
    32,
    3,
    65,
    124,
    106,
    33,
    3,
    32,
    0,
    66,
    255,
    193,
    215,
    47,
    86,
    32,
    8,
    33,
    0,
    13,
    0,
    11,
    11,
    32,
    8,
    167,
    34,
    4,
    65,
    227,
    0,
    74,
    4,
    64,
    32,
    3,
    65,
    126,
    106,
    34,
    3,
    32,
    5,
    65,
    9,
    106,
    106,
    32,
    8,
    167,
    34,
    4,
    32,
    4,
    65,
    255,
    255,
    3,
    113,
    65,
    228,
    0,
    110,
    34,
    4,
    65,
    228,
    0,
    108,
    107,
    65,
    255,
    255,
    3,
    113,
    65,
    1,
    116,
    65,
    162,
    199,
    193,
    0,
    106,
    47,
    0,
    0,
    59,
    0,
    0,
    11,
    2,
    64,
    32,
    4,
    65,
    9,
    76,
    4,
    64,
    32,
    3,
    65,
    127,
    106,
    34,
    3,
    32,
    5,
    65,
    9,
    106,
    106,
    32,
    4,
    65,
    48,
    106,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    3,
    65,
    126,
    106,
    34,
    3,
    32,
    5,
    65,
    9,
    106,
    106,
    32,
    4,
    65,
    1,
    116,
    65,
    162,
    199,
    193,
    0,
    106,
    47,
    0,
    0,
    59,
    0,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    228,
    196,
    193,
    0,
    65,
    0,
    32,
    5,
    65,
    9,
    106,
    32,
    3,
    106,
    65,
    39,
    32,
    3,
    107,
    16,
    27,
    32,
    5,
    65,
    48,
    106,
    36,
    0,
    11,
    206,
    2,
    2,
    3,
    127,
    1,
    126,
    2,
    64,
    32,
    0,
    40,
    2,
    24,
    69,
    13,
    0,
    32,
    0,
    16,
    34,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    1,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    24,
    69,
    13,
    0,
    32,
    0,
    16,
    57,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    1,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    24,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    16,
    34,
    1,
    65,
    192,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    204,
    153,
    5,
    65,
    1,
    16,
    156,
    1,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    65,
    224,
    33,
    65,
    2,
    16,
    156,
    1,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    130,
    130,
    10,
    65,
    2,
    16,
    156,
    1,
    32,
    0,
    40,
    2,
    16,
    65,
    232,
    128,
    4,
    65,
    4,
    16,
    156,
    1,
    32,
    0,
    65,
    40,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    36,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    208,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    76,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    220,
    2,
    2,
    7,
    127,
    1,
    126,
    35,
    0,
    34,
    2,
    33,
    5,
    32,
    2,
    65,
    32,
    107,
    65,
    96,
    113,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    16,
    82,
    34,
    9,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    2,
    64,
    32,
    1,
    65,
    216,
    0,
    106,
    40,
    2,
    0,
    65,
    8,
    71,
    13,
    0,
    32,
    1,
    40,
    2,
    24,
    69,
    13,
    5,
    32,
    1,
    40,
    2,
    80,
    34,
    3,
    45,
    0,
    7,
    33,
    4,
    32,
    3,
    45,
    0,
    6,
    33,
    6,
    32,
    3,
    45,
    0,
    5,
    33,
    7,
    32,
    3,
    45,
    0,
    4,
    33,
    8,
    32,
    3,
    40,
    0,
    0,
    32,
    1,
    16,
    147,
    1,
    71,
    13,
    0,
    32,
    1,
    40,
    2,
    24,
    69,
    13,
    6,
    32,
    1,
    40,
    2,
    16,
    32,
    7,
    65,
    8,
    116,
    32,
    8,
    114,
    32,
    6,
    65,
    16,
    116,
    114,
    32,
    4,
    65,
    24,
    116,
    114,
    70,
    13,
    2,
    11,
    16,
    79,
    33,
    9,
    11,
    32,
    9,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    13,
    1,
    11,
    32,
    1,
    32,
    2,
    41,
    3,
    16,
    55,
    3,
    16,
    32,
    1,
    32,
    2,
    41,
    3,
    8,
    55,
    3,
    8,
    32,
    1,
    32,
    2,
    41,
    3,
    0,
    55,
    3,
    0,
    65,
    0,
    33,
    3,
    32,
    2,
    65,
    0,
    54,
    2,
    24,
    32,
    1,
    65,
    24,
    106,
    34,
    4,
    41,
    3,
    0,
    33,
    9,
    32,
    4,
    32,
    2,
    41,
    3,
    24,
    55,
    3,
    0,
    32,
    9,
    167,
    69,
    13,
    4,
    32,
    0,
    65,
    12,
    106,
    32,
    1,
    65,
    32,
    106,
    41,
    2,
    0,
    62,
    2,
    0,
    32,
    0,
    32,
    9,
    55,
    2,
    4,
    12,
    1,
    11,
    32,
    0,
    32,
    9,
    55,
    2,
    4,
    65,
    1,
    33,
    3,
    11,
    32,
    1,
    16,
    50,
    32,
    0,
    32,
    3,
    54,
    2,
    0,
    32,
    5,
    36,
    0,
    15,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    184,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    184,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    202,
    2,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    7,
    36,
    0,
    32,
    7,
    65,
    8,
    106,
    32,
    6,
    65,
    255,
    1,
    113,
    16,
    119,
    32,
    7,
    40,
    2,
    12,
    33,
    6,
    32,
    7,
    40,
    2,
    8,
    69,
    4,
    64,
    32,
    7,
    65,
    16,
    106,
    32,
    1,
    40,
    2,
    16,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    32,
    6,
    16,
    7,
    32,
    1,
    32,
    1,
    41,
    3,
    0,
    32,
    7,
    53,
    2,
    16,
    124,
    55,
    3,
    0,
    32,
    1,
    32,
    1,
    41,
    3,
    8,
    32,
    7,
    53,
    2,
    20,
    124,
    55,
    3,
    8,
    32,
    7,
    65,
    28,
    106,
    40,
    2,
    0,
    33,
    2,
    32,
    0,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    7,
    40,
    2,
    24,
    65,
    1,
    70,
    4,
    64,
    32,
    2,
    65,
    123,
    70,
    13,
    1,
    32,
    0,
    65,
    4,
    106,
    65,
    0,
    54,
    2,
    0,
    65,
    1,
    12,
    3,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    65,
    1,
    107,
    14,
    2,
    2,
    0,
    1,
    11,
    2,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    16,
    34,
    2,
    65,
    152,
    210,
    0,
    106,
    45,
    0,
    0,
    34,
    3,
    69,
    13,
    0,
    32,
    2,
    65,
    24,
    106,
    40,
    2,
    0,
    33,
    1,
    32,
    3,
    65,
    103,
    106,
    65,
    255,
    1,
    113,
    65,
    9,
    73,
    32,
    2,
    65,
    4,
    106,
    40,
    2,
    0,
    69,
    13,
    0,
    69,
    13,
    1,
    11,
    65,
    0,
    33,
    1,
    11,
    32,
    0,
    65,
    8,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    65,
    1,
    54,
    2,
    0,
    65,
    1,
    12,
    4,
    11,
    32,
    0,
    65,
    0,
    58,
    0,
    1,
    65,
    0,
    12,
    3,
    11,
    32,
    0,
    65,
    2,
    58,
    0,
    1,
    12,
    1,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    1,
    11,
    65,
    0,
    11,
    58,
    0,
    0,
    32,
    7,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    7,
    32,
    6,
    54,
    2,
    16,
    65,
    244,
    143,
    192,
    0,
    65,
    43,
    32,
    7,
    65,
    16,
    106,
    65,
    160,
    144,
    192,
    0,
    65,
    140,
    145,
    192,
    0,
    16,
    93,
    0,
    11,
    173,
    2,
    1,
    3,
    127,
    35,
    0,
    65,
    128,
    1,
    107,
    34,
    4,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    127,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    16,
    113,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    4,
    106,
    65,
    255,
    0,
    106,
    32,
    2,
    65,
    15,
    113,
    34,
    3,
    65,
    48,
    114,
    32,
    3,
    65,
    215,
    0,
    106,
    32,
    3,
    65,
    10,
    73,
    27,
    58,
    0,
    0,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    32,
    2,
    65,
    4,
    118,
    34,
    2,
    13,
    0,
    11,
    32,
    0,
    65,
    128,
    1,
    106,
    34,
    2,
    65,
    129,
    1,
    79,
    13,
    2,
    32,
    1,
    65,
    1,
    65,
    160,
    199,
    193,
    0,
    65,
    2,
    32,
    0,
    32,
    4,
    106,
    65,
    128,
    1,
    106,
    65,
    0,
    32,
    0,
    107,
    16,
    27,
    12,
    1,
    11,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    32,
    3,
    65,
    32,
    113,
    4,
    64,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    4,
    106,
    65,
    255,
    0,
    106,
    32,
    2,
    65,
    15,
    113,
    34,
    3,
    65,
    48,
    114,
    32,
    3,
    65,
    55,
    106,
    32,
    3,
    65,
    10,
    73,
    27,
    58,
    0,
    0,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    32,
    2,
    65,
    4,
    118,
    34,
    2,
    13,
    0,
    11,
    32,
    0,
    65,
    128,
    1,
    106,
    34,
    2,
    65,
    129,
    1,
    79,
    13,
    3,
    32,
    1,
    65,
    1,
    65,
    160,
    199,
    193,
    0,
    65,
    2,
    32,
    0,
    32,
    4,
    106,
    65,
    128,
    1,
    106,
    65,
    0,
    32,
    0,
    107,
    16,
    27,
    12,
    1,
    11,
    32,
    2,
    173,
    65,
    1,
    32,
    1,
    16,
    52,
    11,
    32,
    4,
    65,
    128,
    1,
    106,
    36,
    0,
    15,
    11,
    32,
    2,
    65,
    128,
    1,
    65,
    144,
    199,
    193,
    0,
    16,
    101,
    0,
    11,
    32,
    2,
    65,
    128,
    1,
    65,
    144,
    199,
    193,
    0,
    16,
    101,
    0,
    11,
    180,
    2,
    2,
    8,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    32,
    0,
    65,
    24,
    106,
    33,
    6,
    32,
    0,
    65,
    36,
    106,
    33,
    7,
    32,
    0,
    65,
    44,
    106,
    33,
    4,
    32,
    0,
    65,
    32,
    106,
    33,
    5,
    2,
    64,
    2,
    126,
    2,
    64,
    3,
    64,
    2,
    64,
    32,
    4,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    6,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    0,
    40,
    2,
    36,
    33,
    2,
    32,
    6,
    32,
    5,
    40,
    2,
    0,
    32,
    1,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    5,
    40,
    2,
    0,
    106,
    32,
    2,
    32,
    1,
    16,
    121,
    26,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    32,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    40,
    2,
    0,
    34,
    2,
    32,
    1,
    73,
    13,
    6,
    32,
    4,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    1,
    107,
    34,
    2,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    36,
    34,
    8,
    32,
    1,
    32,
    8,
    106,
    32,
    2,
    16,
    96,
    32,
    4,
    32,
    2,
    54,
    2,
    0,
    32,
    2,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    16,
    163,
    1,
    33,
    9,
    32,
    3,
    32,
    0,
    65,
    168,
    132,
    192,
    0,
    65,
    0,
    32,
    7,
    65,
    4,
    16,
    65,
    32,
    3,
    45,
    0,
    0,
    65,
    1,
    70,
    13,
    1,
    32,
    0,
    16,
    163,
    1,
    32,
    9,
    82,
    13,
    0,
    11,
    66,
    3,
    33,
    10,
    66,
    0,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    4,
    32,
    3,
    40,
    2,
    8,
    16,
    128,
    1,
    34,
    9,
    66,
    255,
    1,
    131,
    33,
    10,
    32,
    9,
    66,
    128,
    126,
    131,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    10,
    132,
    15,
    11,
    32,
    1,
    32,
    2,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    180,
    2,
    2,
    8,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    32,
    0,
    65,
    24,
    106,
    33,
    6,
    32,
    0,
    65,
    36,
    106,
    33,
    7,
    32,
    0,
    65,
    44,
    106,
    33,
    4,
    32,
    0,
    65,
    32,
    106,
    33,
    5,
    2,
    64,
    2,
    126,
    2,
    64,
    3,
    64,
    2,
    64,
    32,
    4,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    6,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    0,
    40,
    2,
    36,
    33,
    2,
    32,
    6,
    32,
    5,
    40,
    2,
    0,
    32,
    1,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    5,
    40,
    2,
    0,
    106,
    32,
    2,
    32,
    1,
    16,
    121,
    26,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    32,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    40,
    2,
    0,
    34,
    2,
    32,
    1,
    73,
    13,
    6,
    32,
    4,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    1,
    107,
    34,
    2,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    36,
    34,
    8,
    32,
    1,
    32,
    8,
    106,
    32,
    2,
    16,
    96,
    32,
    4,
    32,
    2,
    54,
    2,
    0,
    32,
    2,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    16,
    163,
    1,
    33,
    9,
    32,
    3,
    32,
    0,
    65,
    168,
    132,
    192,
    0,
    65,
    0,
    32,
    7,
    65,
    4,
    16,
    110,
    32,
    3,
    45,
    0,
    0,
    65,
    1,
    70,
    13,
    1,
    32,
    0,
    16,
    163,
    1,
    32,
    9,
    82,
    13,
    0,
    11,
    66,
    3,
    33,
    10,
    66,
    0,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    4,
    32,
    3,
    40,
    2,
    8,
    16,
    128,
    1,
    34,
    9,
    66,
    255,
    1,
    131,
    33,
    10,
    32,
    9,
    66,
    128,
    126,
    131,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    10,
    132,
    15,
    11,
    32,
    1,
    32,
    2,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    246,
    2,
    1,
    3,
    127,
    35,
    0,
    65,
    240,
    128,
    4,
    107,
    34,
    0,
    36,
    0,
    2,
    64,
    65,
    232,
    128,
    4,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    4,
    64,
    32,
    0,
    65,
    8,
    106,
    34,
    2,
    65,
    16,
    106,
    65,
    0,
    65,
    128,
    128,
    4,
    16,
    131,
    1,
    26,
    32,
    2,
    66,
    128,
    128,
    128,
    128,
    128,
    1,
    55,
    2,
    8,
    32,
    2,
    66,
    1,
    55,
    2,
    0,
    32,
    0,
    65,
    152,
    128,
    4,
    106,
    16,
    91,
    65,
    224,
    33,
    65,
    2,
    16,
    149,
    1,
    34,
    2,
    69,
    13,
    1,
    32,
    2,
    65,
    0,
    65,
    224,
    33,
    16,
    131,
    1,
    26,
    32,
    0,
    65,
    208,
    128,
    4,
    106,
    16,
    97,
    32,
    1,
    32,
    0,
    65,
    8,
    106,
    65,
    144,
    128,
    4,
    16,
    121,
    34,
    1,
    32,
    2,
    54,
    2,
    200,
    128,
    4,
    32,
    1,
    65,
    192,
    128,
    4,
    106,
    32,
    0,
    65,
    200,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    184,
    128,
    4,
    106,
    32,
    0,
    65,
    192,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    176,
    128,
    4,
    106,
    32,
    0,
    65,
    184,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    168,
    128,
    4,
    106,
    32,
    0,
    65,
    176,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    160,
    128,
    4,
    106,
    32,
    0,
    65,
    168,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    152,
    128,
    4,
    106,
    32,
    0,
    65,
    160,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    32,
    0,
    41,
    3,
    152,
    128,
    4,
    55,
    2,
    144,
    128,
    4,
    32,
    1,
    32,
    0,
    41,
    3,
    208,
    128,
    4,
    55,
    2,
    204,
    128,
    4,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    32,
    0,
    65,
    216,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    220,
    128,
    4,
    106,
    32,
    0,
    65,
    224,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    228,
    128,
    4,
    106,
    32,
    0,
    65,
    232,
    128,
    4,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    240,
    128,
    4,
    106,
    36,
    0,
    32,
    1,
    15,
    11,
    65,
    232,
    128,
    4,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    65,
    224,
    33,
    65,
    2,
    16,
    165,
    1,
    0,
    11,
    186,
    2,
    1,
    5,
    127,
    35,
    0,
    65,
    64,
    106,
    34,
    2,
    36,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    3,
    69,
    4,
    64,
    32,
    1,
    65,
    4,
    106,
    33,
    3,
    32,
    1,
    40,
    2,
    0,
    33,
    4,
    32,
    2,
    65,
    0,
    54,
    2,
    32,
    32,
    2,
    66,
    1,
    55,
    3,
    24,
    32,
    2,
    32,
    2,
    65,
    24,
    106,
    54,
    2,
    36,
    32,
    2,
    65,
    56,
    106,
    32,
    4,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    48,
    106,
    32,
    4,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    4,
    41,
    2,
    0,
    55,
    3,
    40,
    32,
    2,
    65,
    36,
    106,
    65,
    172,
    188,
    193,
    0,
    32,
    2,
    65,
    40,
    106,
    16,
    31,
    26,
    32,
    2,
    65,
    16,
    106,
    34,
    4,
    32,
    2,
    40,
    2,
    32,
    54,
    2,
    0,
    32,
    2,
    32,
    2,
    41,
    3,
    24,
    55,
    3,
    8,
    2,
    64,
    32,
    1,
    40,
    2,
    4,
    34,
    5,
    69,
    13,
    0,
    32,
    1,
    65,
    8,
    106,
    40,
    2,
    0,
    34,
    6,
    69,
    13,
    0,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    32,
    2,
    41,
    3,
    8,
    55,
    2,
    0,
    32,
    3,
    65,
    8,
    106,
    32,
    4,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    40,
    2,
    0,
    33,
    3,
    11,
    32,
    1,
    65,
    1,
    54,
    2,
    4,
    32,
    1,
    65,
    12,
    106,
    40,
    2,
    0,
    33,
    4,
    32,
    1,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    33,
    5,
    32,
    1,
    66,
    0,
    55,
    2,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    32,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    5,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    65,
    188,
    192,
    193,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    2,
    65,
    64,
    107,
    36,
    0,
    11,
    183,
    2,
    2,
    2,
    127,
    1,
    126,
    2,
    64,
    2,
    64,
    32,
    1,
    16,
    58,
    34,
    4,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    1,
    40,
    2,
    24,
    33,
    2,
    32,
    1,
    65,
    0,
    54,
    2,
    24,
    32,
    2,
    69,
    13,
    2,
    32,
    1,
    65,
    28,
    106,
    41,
    2,
    0,
    33,
    4,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    4,
    55,
    2,
    0,
    32,
    1,
    40,
    2,
    16,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    1,
    65,
    40,
    106,
    40,
    2,
    0,
    34,
    0,
    69,
    13,
    1,
    32,
    1,
    40,
    2,
    36,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    15,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    4,
    55,
    2,
    4,
    2,
    64,
    32,
    1,
    40,
    2,
    24,
    69,
    13,
    0,
    32,
    1,
    16,
    58,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    1,
    40,
    2,
    24,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    0,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    1,
    40,
    2,
    16,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    1,
    65,
    40,
    106,
    40,
    2,
    0,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    36,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    11,
    15,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    169,
    2,
    1,
    3,
    127,
    35,
    0,
    65,
    224,
    0,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    16,
    138,
    1,
    32,
    3,
    65,
    216,
    0,
    106,
    32,
    3,
    65,
    32,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    208,
    0,
    106,
    32,
    3,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    200,
    0,
    106,
    34,
    5,
    32,
    3,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    64,
    107,
    34,
    4,
    32,
    3,
    65,
    8,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    0,
    55,
    3,
    56,
    32,
    3,
    65,
    40,
    106,
    32,
    3,
    65,
    56,
    106,
    32,
    2,
    16,
    16,
    32,
    4,
    32,
    1,
    65,
    8,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    56,
    32,
    0,
    32,
    2,
    65,
    0,
    16,
    126,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    0,
    32,
    3,
    41,
    3,
    56,
    55,
    2,
    24,
    32,
    0,
    32,
    1,
    54,
    2,
    36,
    32,
    0,
    65,
    40,
    106,
    66,
    128,
    128,
    2,
    55,
    2,
    0,
    32,
    0,
    65,
    32,
    106,
    32,
    4,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    56,
    106,
    16,
    124,
    32,
    0,
    65,
    0,
    54,
    2,
    72,
    32,
    0,
    65,
    64,
    107,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    0,
    65,
    56,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    0,
    32,
    3,
    41,
    3,
    56,
    55,
    3,
    48,
    32,
    0,
    32,
    3,
    41,
    3,
    40,
    55,
    2,
    76,
    32,
    0,
    65,
    212,
    0,
    106,
    32,
    3,
    65,
    48,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    224,
    0,
    106,
    36,
    0,
    11,
    194,
    2,
    2,
    3,
    127,
    2,
    126,
    35,
    0,
    65,
    64,
    106,
    34,
    3,
    36,
    0,
    32,
    0,
    2,
    127,
    65,
    1,
    32,
    0,
    45,
    0,
    8,
    13,
    0,
    26,
    32,
    0,
    40,
    2,
    4,
    33,
    5,
    32,
    0,
    40,
    2,
    0,
    34,
    4,
    45,
    0,
    0,
    65,
    4,
    113,
    4,
    64,
    32,
    5,
    69,
    4,
    64,
    65,
    1,
    32,
    4,
    40,
    2,
    24,
    65,
    237,
    198,
    193,
    0,
    65,
    2,
    32,
    4,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    2,
    26,
    32,
    0,
    40,
    2,
    0,
    33,
    4,
    11,
    32,
    3,
    65,
    1,
    58,
    0,
    23,
    32,
    3,
    65,
    52,
    106,
    65,
    164,
    198,
    193,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    41,
    2,
    24,
    55,
    3,
    8,
    32,
    3,
    32,
    3,
    65,
    23,
    106,
    54,
    2,
    16,
    32,
    4,
    41,
    2,
    8,
    33,
    6,
    32,
    4,
    41,
    2,
    16,
    33,
    7,
    32,
    3,
    32,
    4,
    45,
    0,
    32,
    58,
    0,
    56,
    32,
    3,
    32,
    7,
    55,
    3,
    40,
    32,
    3,
    32,
    6,
    55,
    3,
    32,
    32,
    3,
    32,
    4,
    41,
    2,
    0,
    55,
    3,
    24,
    32,
    3,
    32,
    3,
    65,
    8,
    106,
    54,
    2,
    48,
    65,
    1,
    32,
    1,
    32,
    3,
    65,
    24,
    106,
    32,
    2,
    40,
    2,
    12,
    17,
    0,
    0,
    13,
    1,
    26,
    32,
    3,
    40,
    2,
    48,
    65,
    227,
    198,
    193,
    0,
    65,
    2,
    32,
    3,
    40,
    2,
    52,
    40,
    2,
    12,
    17,
    1,
    0,
    12,
    1,
    11,
    65,
    1,
    32,
    4,
    40,
    2,
    24,
    65,
    229,
    198,
    193,
    0,
    65,
    239,
    198,
    193,
    0,
    32,
    5,
    27,
    65,
    2,
    65,
    1,
    32,
    5,
    27,
    32,
    4,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    26,
    32,
    1,
    32,
    0,
    40,
    2,
    0,
    32,
    2,
    40,
    2,
    12,
    17,
    0,
    0,
    11,
    58,
    0,
    8,
    32,
    0,
    32,
    0,
    40,
    2,
    4,
    65,
    1,
    106,
    54,
    2,
    4,
    32,
    3,
    65,
    64,
    107,
    36,
    0,
    11,
    249,
    2,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    45,
    0,
    0,
    65,
    1,
    107,
    14,
    17,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    0,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    220,
    192,
    193,
    0,
    65,
    13,
    16,
    127,
    12,
    17,
    11,
    32,
    2,
    32,
    1,
    65,
    168,
    194,
    193,
    0,
    65,
    8,
    16,
    127,
    12,
    16,
    11,
    32,
    2,
    32,
    1,
    65,
    152,
    194,
    193,
    0,
    65,
    16,
    16,
    127,
    12,
    15,
    11,
    32,
    2,
    32,
    1,
    65,
    135,
    194,
    193,
    0,
    65,
    17,
    16,
    127,
    12,
    14,
    11,
    32,
    2,
    32,
    1,
    65,
    248,
    193,
    193,
    0,
    65,
    15,
    16,
    127,
    12,
    13,
    11,
    32,
    2,
    32,
    1,
    65,
    231,
    193,
    193,
    0,
    65,
    17,
    16,
    127,
    12,
    12,
    11,
    32,
    2,
    32,
    1,
    65,
    219,
    193,
    193,
    0,
    65,
    12,
    16,
    127,
    12,
    11,
    11,
    32,
    2,
    32,
    1,
    65,
    210,
    193,
    193,
    0,
    65,
    9,
    16,
    127,
    12,
    10,
    11,
    32,
    2,
    32,
    1,
    65,
    194,
    193,
    193,
    0,
    65,
    16,
    16,
    127,
    12,
    9,
    11,
    32,
    2,
    32,
    1,
    65,
    184,
    193,
    193,
    0,
    65,
    10,
    16,
    127,
    12,
    8,
    11,
    32,
    2,
    32,
    1,
    65,
    171,
    193,
    193,
    0,
    65,
    13,
    16,
    127,
    12,
    7,
    11,
    32,
    2,
    32,
    1,
    65,
    161,
    193,
    193,
    0,
    65,
    10,
    16,
    127,
    12,
    6,
    11,
    32,
    2,
    32,
    1,
    65,
    149,
    193,
    193,
    0,
    65,
    12,
    16,
    127,
    12,
    5,
    11,
    32,
    2,
    32,
    1,
    65,
    138,
    193,
    193,
    0,
    65,
    11,
    16,
    127,
    12,
    4,
    11,
    32,
    2,
    32,
    1,
    65,
    130,
    193,
    193,
    0,
    65,
    8,
    16,
    127,
    12,
    3,
    11,
    32,
    2,
    32,
    1,
    65,
    249,
    192,
    193,
    0,
    65,
    9,
    16,
    127,
    12,
    2,
    11,
    32,
    2,
    32,
    1,
    65,
    238,
    192,
    193,
    0,
    65,
    11,
    16,
    127,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    233,
    192,
    193,
    0,
    65,
    5,
    16,
    127,
    11,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    175,
    2,
    2,
    5,
    127,
    2,
    126,
    35,
    0,
    65,
    32,
    107,
    34,
    6,
    36,
    0,
    32,
    1,
    65,
    8,
    106,
    34,
    8,
    41,
    3,
    0,
    33,
    11,
    32,
    4,
    65,
    8,
    106,
    34,
    9,
    40,
    2,
    0,
    33,
    7,
    32,
    4,
    65,
    4,
    106,
    40,
    2,
    0,
    33,
    10,
    32,
    4,
    40,
    2,
    0,
    33,
    4,
    32,
    6,
    65,
    8,
    106,
    32,
    5,
    65,
    255,
    1,
    113,
    16,
    119,
    32,
    6,
    40,
    2,
    12,
    33,
    5,
    2,
    64,
    32,
    6,
    40,
    2,
    8,
    69,
    4,
    64,
    32,
    6,
    65,
    16,
    106,
    32,
    1,
    40,
    2,
    16,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    7,
    106,
    32,
    10,
    32,
    7,
    107,
    32,
    5,
    16,
    22,
    32,
    1,
    32,
    1,
    41,
    3,
    0,
    32,
    6,
    53,
    2,
    16,
    124,
    55,
    3,
    0,
    32,
    8,
    32,
    8,
    41,
    3,
    0,
    32,
    6,
    53,
    2,
    20,
    124,
    34,
    12,
    55,
    3,
    0,
    32,
    6,
    65,
    28,
    106,
    40,
    2,
    0,
    33,
    2,
    32,
    6,
    40,
    2,
    24,
    33,
    1,
    32,
    9,
    32,
    7,
    32,
    12,
    32,
    11,
    125,
    167,
    106,
    54,
    2,
    0,
    65,
    1,
    65,
    3,
    32,
    2,
    65,
    123,
    70,
    27,
    65,
    128,
    132,
    12,
    32,
    2,
    65,
    3,
    116,
    65,
    248,
    255,
    255,
    7,
    113,
    118,
    32,
    1,
    65,
    1,
    70,
    27,
    34,
    1,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    13,
    1,
    32,
    0,
    65,
    0,
    58,
    0,
    0,
    32,
    0,
    32,
    1,
    58,
    0,
    1,
    32,
    6,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    6,
    32,
    5,
    54,
    2,
    16,
    65,
    244,
    143,
    192,
    0,
    65,
    43,
    32,
    6,
    65,
    16,
    106,
    65,
    160,
    144,
    192,
    0,
    65,
    156,
    145,
    192,
    0,
    16,
    93,
    0,
    11,
    65,
    252,
    138,
    192,
    0,
    65,
    43,
    32,
    6,
    65,
    16,
    106,
    65,
    168,
    139,
    192,
    0,
    65,
    180,
    140,
    192,
    0,
    16,
    93,
    0,
    11,
    138,
    2,
    1,
    4,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    2,
    64,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    5,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    34,
    4,
    107,
    32,
    2,
    32,
    1,
    107,
    34,
    6,
    79,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    12,
    1,
    11,
    2,
    64,
    32,
    4,
    32,
    6,
    106,
    34,
    2,
    32,
    4,
    73,
    13,
    0,
    32,
    5,
    65,
    1,
    116,
    34,
    4,
    32,
    2,
    32,
    4,
    32,
    2,
    75,
    27,
    34,
    2,
    65,
    8,
    32,
    2,
    65,
    8,
    75,
    27,
    33,
    2,
    2,
    64,
    32,
    5,
    69,
    4,
    64,
    32,
    3,
    65,
    0,
    54,
    2,
    16,
    12,
    1,
    11,
    32,
    3,
    65,
    24,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    5,
    54,
    2,
    20,
    32,
    3,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    16,
    11,
    32,
    3,
    32,
    2,
    32,
    3,
    65,
    16,
    106,
    16,
    80,
    32,
    3,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    4,
    32,
    3,
    40,
    2,
    4,
    33,
    2,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    4,
    12,
    2,
    11,
    32,
    4,
    69,
    13,
    0,
    32,
    2,
    32,
    4,
    16,
    165,
    1,
    0,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    2,
    32,
    4,
    106,
    32,
    1,
    32,
    6,
    16,
    121,
    26,
    32,
    0,
    65,
    8,
    106,
    34,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    6,
    106,
    54,
    2,
    0,
    32,
    3,
    65,
    32,
    106,
    36,
    0,
    11,
    161,
    2,
    1,
    4,
    127,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    32,
    2,
    40,
    2,
    28,
    54,
    2,
    4,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    16,
    65,
    1,
    70,
    4,
    64,
    32,
    2,
    32,
    2,
    40,
    2,
    20,
    34,
    3,
    32,
    1,
    65,
    24,
    106,
    40,
    2,
    0,
    34,
    5,
    32,
    2,
    40,
    2,
    32,
    34,
    6,
    107,
    34,
    4,
    32,
    4,
    32,
    3,
    75,
    27,
    34,
    4,
    4,
    127,
    32,
    4,
    32,
    6,
    106,
    34,
    3,
    32,
    4,
    73,
    13,
    2,
    32,
    5,
    32,
    3,
    73,
    13,
    3,
    32,
    2,
    40,
    2,
    16,
    34,
    3,
    32,
    4,
    106,
    34,
    5,
    32,
    3,
    73,
    13,
    4,
    32,
    5,
    65,
    205,
    153,
    5,
    79,
    13,
    5,
    32,
    1,
    65,
    20,
    106,
    40,
    2,
    0,
    32,
    6,
    106,
    32,
    2,
    40,
    2,
    48,
    32,
    3,
    106,
    32,
    4,
    16,
    121,
    26,
    32,
    2,
    40,
    2,
    20,
    33,
    3,
    32,
    2,
    40,
    2,
    32,
    5,
    32,
    6,
    11,
    32,
    4,
    106,
    34,
    1,
    54,
    2,
    32,
    32,
    2,
    32,
    3,
    32,
    4,
    107,
    54,
    2,
    20,
    32,
    0,
    32,
    1,
    54,
    2,
    8,
    32,
    2,
    32,
    2,
    40,
    2,
    16,
    32,
    4,
    106,
    54,
    2,
    16,
    11,
    2,
    64,
    32,
    2,
    45,
    0,
    55,
    69,
    13,
    0,
    32,
    2,
    40,
    2,
    20,
    13,
    0,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    11,
    15,
    11,
    32,
    6,
    32,
    3,
    65,
    184,
    175,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    3,
    32,
    5,
    65,
    184,
    175,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    3,
    32,
    5,
    65,
    200,
    175,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    65,
    204,
    153,
    5,
    65,
    200,
    175,
    192,
    0,
    16,
    99,
    0,
    11,
    252,
    1,
    1,
    2,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    2,
    65,
    0,
    54,
    2,
    12,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    128,
    1,
    79,
    4,
    64,
    32,
    1,
    65,
    128,
    16,
    73,
    13,
    1,
    32,
    2,
    65,
    12,
    106,
    33,
    0,
    32,
    1,
    65,
    128,
    128,
    4,
    79,
    13,
    2,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    14,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    224,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    65,
    3,
    12,
    3,
    11,
    32,
    2,
    32,
    1,
    58,
    0,
    12,
    32,
    2,
    65,
    12,
    106,
    33,
    0,
    65,
    1,
    12,
    2,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    192,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    65,
    12,
    106,
    33,
    0,
    65,
    2,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    15,
    32,
    2,
    32,
    1,
    65,
    18,
    118,
    65,
    240,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    14,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    65,
    4,
    11,
    33,
    1,
    32,
    0,
    32,
    1,
    16,
    39,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    249,
    1,
    1,
    2,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    65,
    0,
    54,
    2,
    12,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    128,
    1,
    79,
    4,
    64,
    32,
    1,
    65,
    128,
    16,
    73,
    13,
    1,
    32,
    2,
    65,
    12,
    106,
    33,
    3,
    32,
    1,
    65,
    128,
    128,
    4,
    79,
    13,
    2,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    14,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    224,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    65,
    3,
    12,
    3,
    11,
    32,
    2,
    32,
    1,
    58,
    0,
    12,
    32,
    2,
    65,
    12,
    106,
    33,
    3,
    65,
    1,
    12,
    2,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    192,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    65,
    12,
    106,
    33,
    3,
    65,
    2,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    15,
    32,
    2,
    32,
    1,
    65,
    18,
    118,
    65,
    240,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    14,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    65,
    4,
    11,
    33,
    1,
    32,
    0,
    32,
    3,
    32,
    1,
    16,
    39,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    132,
    2,
    1,
    5,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    65,
    0,
    58,
    0,
    15,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    40,
    2,
    0,
    32,
    2,
    65,
    15,
    106,
    65,
    1,
    16,
    89,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    16,
    65,
    1,
    70,
    4,
    64,
    32,
    2,
    65,
    16,
    106,
    65,
    4,
    114,
    33,
    4,
    3,
    64,
    32,
    4,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    13,
    2,
    2,
    64,
    32,
    2,
    40,
    2,
    16,
    69,
    13,
    0,
    32,
    2,
    45,
    0,
    20,
    65,
    2,
    73,
    13,
    0,
    32,
    2,
    40,
    2,
    24,
    34,
    3,
    40,
    2,
    0,
    32,
    3,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    3,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    3,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    2,
    40,
    2,
    24,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    40,
    2,
    0,
    32,
    2,
    65,
    15,
    106,
    65,
    1,
    16,
    89,
    32,
    2,
    40,
    2,
    16,
    65,
    1,
    70,
    13,
    0,
    11,
    11,
    32,
    2,
    40,
    2,
    20,
    69,
    4,
    64,
    32,
    0,
    65,
    2,
    58,
    0,
    0,
    12,
    2,
    11,
    32,
    0,
    32,
    2,
    45,
    0,
    15,
    58,
    0,
    1,
    32,
    0,
    65,
    0,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    2,
    41,
    2,
    20,
    55,
    0,
    0,
    11,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    241,
    1,
    1,
    1,
    127,
    32,
    2,
    32,
    3,
    107,
    32,
    5,
    113,
    33,
    3,
    32,
    4,
    65,
    3,
    70,
    4,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    32,
    1,
    73,
    4,
    64,
    32,
    2,
    32,
    1,
    79,
    13,
    1,
    32,
    0,
    32,
    2,
    106,
    32,
    0,
    32,
    3,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    3,
    65,
    1,
    106,
    32,
    5,
    113,
    34,
    4,
    32,
    1,
    79,
    13,
    2,
    32,
    2,
    65,
    1,
    106,
    34,
    6,
    32,
    1,
    79,
    13,
    3,
    32,
    0,
    32,
    6,
    106,
    32,
    0,
    32,
    4,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    3,
    65,
    2,
    106,
    32,
    5,
    113,
    34,
    3,
    32,
    1,
    79,
    13,
    4,
    32,
    2,
    65,
    2,
    106,
    34,
    2,
    32,
    1,
    79,
    13,
    5,
    32,
    0,
    32,
    2,
    106,
    32,
    0,
    32,
    3,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    15,
    11,
    32,
    3,
    32,
    1,
    65,
    216,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    232,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    248,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    136,
    181,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    1,
    65,
    152,
    181,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    168,
    181,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    0,
    32,
    1,
    32,
    3,
    32,
    2,
    32,
    4,
    32,
    5,
    16,
    25,
    11,
    237,
    1,
    1,
    3,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    45,
    0,
    16,
    69,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    33,
    5,
    2,
    64,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    32,
    3,
    32,
    6,
    32,
    3,
    73,
    27,
    34,
    4,
    65,
    1,
    71,
    4,
    64,
    32,
    2,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    12,
    1,
    11,
    32,
    3,
    69,
    13,
    3,
    32,
    2,
    32,
    5,
    45,
    0,
    0,
    58,
    0,
    0,
    11,
    32,
    1,
    32,
    6,
    32,
    4,
    107,
    54,
    2,
    4,
    32,
    1,
    32,
    4,
    32,
    5,
    106,
    54,
    2,
    0,
    32,
    3,
    69,
    32,
    4,
    114,
    13,
    1,
    32,
    1,
    65,
    1,
    58,
    0,
    16,
    11,
    32,
    1,
    40,
    2,
    8,
    33,
    5,
    2,
    64,
    32,
    1,
    65,
    12,
    106,
    40,
    2,
    0,
    34,
    6,
    32,
    3,
    32,
    6,
    32,
    3,
    73,
    27,
    34,
    4,
    65,
    1,
    71,
    4,
    64,
    32,
    2,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    12,
    1,
    11,
    32,
    3,
    69,
    13,
    3,
    32,
    2,
    32,
    5,
    45,
    0,
    0,
    58,
    0,
    0,
    11,
    32,
    1,
    32,
    6,
    32,
    4,
    107,
    54,
    2,
    12,
    32,
    1,
    32,
    4,
    32,
    5,
    106,
    54,
    2,
    8,
    11,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    32,
    4,
    54,
    2,
    4,
    15,
    11,
    65,
    0,
    65,
    0,
    65,
    148,
    137,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    0,
    65,
    0,
    65,
    148,
    137,
    192,
    0,
    16,
    98,
    0,
    11,
    227,
    1,
    1,
    4,
    127,
    35,
    0,
    65,
    64,
    106,
    34,
    2,
    36,
    0,
    32,
    1,
    65,
    4,
    106,
    33,
    4,
    32,
    1,
    40,
    2,
    4,
    69,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    33,
    3,
    32,
    2,
    65,
    0,
    54,
    2,
    32,
    32,
    2,
    66,
    1,
    55,
    3,
    24,
    32,
    2,
    32,
    2,
    65,
    24,
    106,
    54,
    2,
    36,
    32,
    2,
    65,
    56,
    106,
    32,
    3,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    48,
    106,
    32,
    3,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    3,
    41,
    2,
    0,
    55,
    3,
    40,
    32,
    2,
    65,
    36,
    106,
    65,
    172,
    188,
    193,
    0,
    32,
    2,
    65,
    40,
    106,
    16,
    31,
    26,
    32,
    2,
    65,
    16,
    106,
    34,
    3,
    32,
    2,
    40,
    2,
    32,
    54,
    2,
    0,
    32,
    2,
    32,
    2,
    41,
    3,
    24,
    55,
    3,
    8,
    2,
    64,
    32,
    1,
    40,
    2,
    4,
    34,
    5,
    69,
    13,
    0,
    32,
    1,
    65,
    8,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    5,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    4,
    32,
    2,
    41,
    3,
    8,
    55,
    2,
    0,
    32,
    4,
    65,
    8,
    106,
    32,
    3,
    40,
    2,
    0,
    54,
    2,
    0,
    11,
    32,
    0,
    65,
    188,
    192,
    193,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    2,
    65,
    64,
    107,
    36,
    0,
    11,
    241,
    1,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    40,
    2,
    0,
    54,
    2,
    12,
    2,
    127,
    2,
    64,
    32,
    2,
    65,
    2,
    106,
    34,
    2,
    32,
    2,
    108,
    34,
    2,
    65,
    128,
    16,
    32,
    2,
    65,
    128,
    16,
    75,
    27,
    34,
    4,
    65,
    4,
    32,
    3,
    65,
    12,
    106,
    65,
    188,
    138,
    192,
    0,
    65,
    188,
    138,
    192,
    0,
    16,
    32,
    34,
    2,
    4,
    64,
    32,
    1,
    32,
    3,
    40,
    2,
    12,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    3,
    65,
    188,
    138,
    192,
    0,
    32,
    4,
    65,
    4,
    16,
    92,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    4,
    64,
    32,
    1,
    32,
    3,
    40,
    2,
    12,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    4,
    34,
    2,
    32,
    3,
    40,
    2,
    12,
    54,
    2,
    8,
    32,
    3,
    32,
    2,
    54,
    2,
    12,
    32,
    4,
    65,
    4,
    32,
    3,
    65,
    12,
    106,
    65,
    188,
    138,
    192,
    0,
    65,
    188,
    138,
    192,
    0,
    16,
    32,
    33,
    2,
    32,
    1,
    32,
    3,
    40,
    2,
    12,
    54,
    2,
    0,
    32,
    2,
    13,
    1,
    11,
    65,
    1,
    12,
    1,
    11,
    32,
    2,
    66,
    0,
    55,
    2,
    4,
    32,
    2,
    32,
    2,
    32,
    4,
    65,
    2,
    116,
    106,
    65,
    2,
    114,
    54,
    2,
    0,
    65,
    0,
    11,
    33,
    1,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    11,
    202,
    1,
    1,
    2,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    4,
    32,
    1,
    107,
    32,
    2,
    73,
    4,
    64,
    32,
    1,
    32,
    2,
    106,
    34,
    2,
    32,
    1,
    73,
    13,
    2,
    32,
    4,
    65,
    1,
    116,
    34,
    1,
    32,
    2,
    32,
    1,
    32,
    2,
    75,
    27,
    34,
    1,
    65,
    8,
    32,
    1,
    65,
    8,
    75,
    27,
    33,
    1,
    2,
    64,
    32,
    4,
    69,
    4,
    64,
    32,
    3,
    65,
    0,
    54,
    2,
    16,
    12,
    1,
    11,
    32,
    3,
    65,
    24,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    54,
    2,
    20,
    32,
    3,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    16,
    11,
    32,
    3,
    32,
    1,
    32,
    3,
    65,
    16,
    106,
    16,
    81,
    32,
    3,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    1,
    32,
    3,
    40,
    2,
    4,
    33,
    2,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    70,
    13,
    1,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    1,
    54,
    2,
    0,
    11,
    32,
    3,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    1,
    69,
    13,
    0,
    32,
    2,
    32,
    1,
    16,
    165,
    1,
    0,
    11,
    16,
    158,
    1,
    0,
    11,
    149,
    2,
    1,
    2,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    4,
    36,
    0,
    65,
    1,
    33,
    5,
    65,
    188,
    231,
    193,
    0,
    65,
    188,
    231,
    193,
    0,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    2,
    64,
    2,
    64,
    65,
    192,
    231,
    193,
    0,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    65,
    192,
    231,
    193,
    0,
    66,
    129,
    128,
    128,
    128,
    16,
    55,
    3,
    0,
    12,
    1,
    11,
    65,
    196,
    231,
    193,
    0,
    65,
    196,
    231,
    193,
    0,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    0,
    32,
    5,
    65,
    3,
    79,
    13,
    1,
    11,
    32,
    4,
    32,
    3,
    54,
    2,
    28,
    32,
    4,
    32,
    2,
    54,
    2,
    24,
    32,
    4,
    65,
    196,
    188,
    193,
    0,
    54,
    2,
    20,
    32,
    4,
    65,
    196,
    188,
    193,
    0,
    54,
    2,
    16,
    65,
    176,
    231,
    193,
    0,
    40,
    2,
    0,
    34,
    2,
    65,
    127,
    76,
    13,
    0,
    65,
    176,
    231,
    193,
    0,
    32,
    2,
    65,
    1,
    106,
    34,
    2,
    54,
    2,
    0,
    65,
    176,
    231,
    193,
    0,
    65,
    184,
    231,
    193,
    0,
    40,
    2,
    0,
    34,
    3,
    4,
    127,
    65,
    180,
    231,
    193,
    0,
    40,
    2,
    0,
    32,
    4,
    65,
    8,
    106,
    32,
    0,
    32,
    1,
    40,
    2,
    16,
    17,
    4,
    0,
    32,
    4,
    32,
    4,
    41,
    3,
    8,
    55,
    3,
    16,
    32,
    4,
    65,
    16,
    106,
    32,
    3,
    40,
    2,
    12,
    17,
    4,
    0,
    65,
    176,
    231,
    193,
    0,
    40,
    2,
    0,
    5,
    32,
    2,
    11,
    65,
    127,
    106,
    54,
    2,
    0,
    32,
    5,
    65,
    2,
    79,
    13,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    1,
    54,
    2,
    12,
    32,
    2,
    32,
    0,
    54,
    2,
    8,
    0,
    11,
    0,
    11,
    223,
    1,
    2,
    3,
    127,
    1,
    126,
    2,
    64,
    32,
    0,
    40,
    2,
    24,
    69,
    13,
    0,
    32,
    0,
    16,
    57,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    1,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    24,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    16,
    34,
    1,
    65,
    192,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    204,
    153,
    5,
    65,
    1,
    16,
    156,
    1,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    65,
    224,
    33,
    65,
    2,
    16,
    156,
    1,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    130,
    130,
    10,
    65,
    2,
    16,
    156,
    1,
    32,
    0,
    40,
    2,
    16,
    65,
    232,
    128,
    4,
    65,
    4,
    16,
    156,
    1,
    32,
    0,
    65,
    40,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    36,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    208,
    1,
    1,
    6,
    127,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    200,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    40,
    2,
    24,
    4,
    64,
    32,
    0,
    65,
    24,
    106,
    33,
    5,
    32,
    0,
    65,
    32,
    106,
    33,
    3,
    32,
    0,
    65,
    200,
    0,
    106,
    33,
    4,
    3,
    64,
    32,
    0,
    40,
    2,
    64,
    33,
    2,
    32,
    5,
    32,
    3,
    40,
    2,
    0,
    32,
    1,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    3,
    40,
    2,
    0,
    106,
    32,
    2,
    32,
    1,
    16,
    121,
    26,
    32,
    3,
    32,
    3,
    40,
    2,
    0,
    32,
    1,
    106,
    54,
    2,
    0,
    32,
    0,
    32,
    2,
    32,
    1,
    16,
    141,
    1,
    32,
    4,
    40,
    2,
    0,
    34,
    2,
    32,
    1,
    73,
    13,
    3,
    32,
    4,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    1,
    107,
    34,
    2,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    64,
    34,
    6,
    32,
    1,
    32,
    6,
    106,
    32,
    2,
    16,
    96,
    32,
    4,
    32,
    2,
    54,
    2,
    0,
    32,
    2,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    66,
    3,
    15,
    11,
    32,
    1,
    32,
    2,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    205,
    1,
    2,
    4,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    53,
    16,
    103,
    32,
    1,
    40,
    2,
    12,
    33,
    3,
    32,
    1,
    40,
    2,
    8,
    34,
    0,
    65,
    172,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    45,
    106,
    65,
    217,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    40,
    106,
    65,
    212,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    32,
    106,
    65,
    204,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    24,
    106,
    65,
    196,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    188,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    180,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    4,
    64,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    2,
    65,
    53,
    54,
    2,
    8,
    32,
    2,
    32,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    3,
    54,
    2,
    4,
    65,
    11,
    32,
    2,
    65,
    248,
    145,
    192,
    0,
    16,
    107,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    144,
    1,
    1,
    3,
    127,
    65,
    1,
    33,
    3,
    65,
    1,
    33,
    4,
    2,
    64,
    32,
    1,
    65,
    0,
    72,
    4,
    64,
    65,
    0,
    33,
    3,
    12,
    1,
    11,
    2,
    127,
    32,
    2,
    40,
    2,
    0,
    34,
    5,
    69,
    4,
    64,
    65,
    1,
    32,
    1,
    69,
    13,
    1,
    26,
    32,
    1,
    65,
    1,
    16,
    149,
    1,
    12,
    1,
    11,
    32,
    2,
    40,
    2,
    4,
    34,
    2,
    69,
    4,
    64,
    65,
    1,
    32,
    1,
    69,
    13,
    1,
    26,
    32,
    1,
    65,
    1,
    16,
    149,
    1,
    12,
    1,
    11,
    32,
    5,
    32,
    2,
    32,
    1,
    16,
    143,
    1,
    11,
    34,
    2,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    54,
    2,
    4,
    12,
    1,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    65,
    0,
    33,
    4,
    32,
    1,
    33,
    3,
    11,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    3,
    54,
    2,
    0,
    11,
    145,
    1,
    1,
    2,
    127,
    65,
    1,
    33,
    3,
    2,
    64,
    32,
    1,
    65,
    0,
    72,
    4,
    64,
    65,
    0,
    33,
    1,
    12,
    1,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    0,
    34,
    4,
    69,
    4,
    64,
    32,
    1,
    69,
    13,
    1,
    12,
    3,
    11,
    32,
    2,
    40,
    2,
    4,
    34,
    2,
    13,
    1,
    32,
    1,
    13,
    2,
    11,
    65,
    1,
    33,
    2,
    12,
    3,
    11,
    32,
    4,
    32,
    2,
    32,
    1,
    16,
    143,
    1,
    34,
    2,
    69,
    13,
    1,
    12,
    2,
    11,
    32,
    1,
    65,
    1,
    16,
    149,
    1,
    34,
    2,
    13,
    1,
    11,
    32,
    0,
    32,
    1,
    54,
    2,
    4,
    65,
    1,
    33,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    65,
    0,
    33,
    3,
    11,
    32,
    0,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    1,
    54,
    2,
    0,
    11,
    154,
    1,
    2,
    3,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    0,
    65,
    64,
    107,
    33,
    3,
    32,
    0,
    65,
    40,
    106,
    33,
    2,
    2,
    126,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    0,
    16,
    78,
    34,
    4,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    13,
    2,
    32,
    2,
    16,
    163,
    1,
    33,
    4,
    32,
    1,
    32,
    2,
    65,
    168,
    132,
    192,
    0,
    65,
    0,
    32,
    3,
    65,
    4,
    16,
    110,
    32,
    1,
    45,
    0,
    0,
    65,
    1,
    70,
    13,
    1,
    32,
    2,
    16,
    163,
    1,
    32,
    4,
    82,
    13,
    0,
    11,
    66,
    3,
    33,
    4,
    66,
    0,
    12,
    2,
    11,
    32,
    1,
    40,
    2,
    4,
    32,
    1,
    40,
    2,
    8,
    16,
    128,
    1,
    34,
    4,
    66,
    128,
    126,
    131,
    12,
    1,
    11,
    32,
    4,
    66,
    128,
    126,
    131,
    11,
    33,
    5,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    32,
    4,
    66,
    255,
    1,
    131,
    32,
    5,
    132,
    11,
    141,
    1,
    1,
    3,
    127,
    35,
    0,
    65,
    128,
    1,
    107,
    34,
    3,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    3,
    106,
    65,
    255,
    0,
    106,
    32,
    2,
    65,
    15,
    113,
    34,
    4,
    65,
    48,
    114,
    32,
    4,
    65,
    215,
    0,
    106,
    32,
    4,
    65,
    10,
    73,
    27,
    58,
    0,
    0,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    32,
    2,
    65,
    4,
    118,
    34,
    2,
    13,
    0,
    11,
    32,
    0,
    65,
    128,
    1,
    106,
    34,
    2,
    65,
    129,
    1,
    79,
    4,
    64,
    32,
    2,
    65,
    128,
    1,
    65,
    144,
    199,
    193,
    0,
    16,
    101,
    0,
    11,
    32,
    1,
    65,
    1,
    65,
    160,
    199,
    193,
    0,
    65,
    2,
    32,
    0,
    32,
    3,
    106,
    65,
    128,
    1,
    106,
    65,
    0,
    32,
    0,
    107,
    16,
    27,
    32,
    3,
    65,
    128,
    1,
    106,
    36,
    0,
    11,
    140,
    1,
    1,
    3,
    127,
    35,
    0,
    65,
    128,
    1,
    107,
    34,
    3,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    3,
    106,
    65,
    255,
    0,
    106,
    32,
    2,
    65,
    15,
    113,
    34,
    4,
    65,
    48,
    114,
    32,
    4,
    65,
    55,
    106,
    32,
    4,
    65,
    10,
    73,
    27,
    58,
    0,
    0,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    32,
    2,
    65,
    4,
    118,
    34,
    2,
    13,
    0,
    11,
    32,
    0,
    65,
    128,
    1,
    106,
    34,
    2,
    65,
    129,
    1,
    79,
    4,
    64,
    32,
    2,
    65,
    128,
    1,
    65,
    144,
    199,
    193,
    0,
    16,
    101,
    0,
    11,
    32,
    1,
    65,
    1,
    65,
    160,
    199,
    193,
    0,
    65,
    2,
    32,
    0,
    32,
    3,
    106,
    65,
    128,
    1,
    106,
    65,
    0,
    32,
    0,
    107,
    16,
    27,
    32,
    3,
    65,
    128,
    1,
    106,
    36,
    0,
    11,
    135,
    1,
    1,
    1,
    127,
    32,
    0,
    32,
    2,
    65,
    255,
    1,
    113,
    34,
    2,
    65,
    10,
    32,
    2,
    65,
    10,
    73,
    27,
    65,
    2,
    116,
    65,
    232,
    175,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    2,
    65,
    4,
    73,
    65,
    14,
    116,
    114,
    34,
    3,
    32,
    3,
    65,
    128,
    32,
    114,
    32,
    1,
    27,
    34,
    1,
    32,
    1,
    65,
    128,
    128,
    32,
    114,
    32,
    2,
    27,
    34,
    1,
    54,
    2,
    144,
    128,
    4,
    32,
    0,
    65,
    196,
    128,
    4,
    106,
    32,
    1,
    65,
    14,
    118,
    65,
    1,
    113,
    58,
    0,
    0,
    32,
    0,
    32,
    1,
    65,
    255,
    31,
    113,
    34,
    0,
    65,
    2,
    118,
    65,
    2,
    106,
    65,
    3,
    110,
    65,
    1,
    106,
    173,
    66,
    32,
    134,
    32,
    0,
    65,
    2,
    106,
    65,
    3,
    110,
    65,
    1,
    106,
    173,
    132,
    55,
    2,
    204,
    128,
    4,
    11,
    150,
    1,
    1,
    2,
    127,
    32,
    0,
    45,
    0,
    8,
    33,
    1,
    32,
    0,
    40,
    2,
    4,
    34,
    2,
    4,
    64,
    32,
    1,
    65,
    255,
    1,
    113,
    33,
    1,
    32,
    0,
    2,
    127,
    65,
    1,
    32,
    1,
    13,
    0,
    26,
    2,
    64,
    32,
    2,
    65,
    1,
    71,
    13,
    0,
    32,
    0,
    45,
    0,
    9,
    69,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    2,
    45,
    0,
    0,
    65,
    4,
    113,
    13,
    0,
    65,
    1,
    32,
    2,
    40,
    2,
    24,
    65,
    240,
    198,
    193,
    0,
    65,
    1,
    32,
    2,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    1,
    26,
    11,
    32,
    0,
    40,
    2,
    0,
    34,
    1,
    40,
    2,
    24,
    65,
    241,
    198,
    193,
    0,
    65,
    1,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    34,
    1,
    58,
    0,
    8,
    11,
    32,
    1,
    65,
    255,
    1,
    113,
    65,
    0,
    71,
    11,
    168,
    1,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    0,
    65,
    6,
    106,
    14,
    6,
    6,
    5,
    4,
    3,
    2,
    1,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    236,
    186,
    192,
    0,
    65,
    5,
    16,
    127,
    12,
    6,
    11,
    32,
    2,
    32,
    1,
    65,
    136,
    187,
    192,
    0,
    65,
    5,
    16,
    127,
    12,
    5,
    11,
    32,
    2,
    32,
    1,
    65,
    130,
    187,
    192,
    0,
    65,
    6,
    16,
    127,
    12,
    4,
    11,
    32,
    2,
    32,
    1,
    65,
    254,
    186,
    192,
    0,
    65,
    4,
    16,
    127,
    12,
    3,
    11,
    32,
    2,
    32,
    1,
    65,
    251,
    186,
    192,
    0,
    65,
    3,
    16,
    127,
    12,
    2,
    11,
    32,
    2,
    32,
    1,
    65,
    248,
    186,
    192,
    0,
    65,
    3,
    16,
    127,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    241,
    186,
    192,
    0,
    65,
    7,
    16,
    127,
    11,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    162,
    1,
    1,
    3,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    2,
    65,
    20,
    106,
    40,
    2,
    0,
    33,
    3,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    4,
    14,
    2,
    0,
    1,
    3,
    11,
    32,
    3,
    13,
    2,
    65,
    0,
    33,
    2,
    65,
    196,
    188,
    193,
    0,
    12,
    1,
    11,
    32,
    3,
    13,
    1,
    32,
    2,
    40,
    2,
    0,
    34,
    3,
    40,
    2,
    4,
    33,
    2,
    32,
    3,
    40,
    2,
    0,
    11,
    33,
    3,
    32,
    1,
    32,
    2,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    0,
    32,
    1,
    65,
    168,
    192,
    193,
    0,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    8,
    32,
    0,
    40,
    2,
    8,
    16,
    76,
    0,
    11,
    32,
    1,
    65,
    0,
    54,
    2,
    4,
    32,
    1,
    32,
    2,
    54,
    2,
    0,
    32,
    1,
    65,
    148,
    192,
    193,
    0,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    8,
    32,
    0,
    40,
    2,
    8,
    16,
    76,
    0,
    11,
    137,
    1,
    2,
    3,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    32,
    1,
    40,
    2,
    24,
    34,
    6,
    32,
    2,
    32,
    3,
    16,
    72,
    65,
    1,
    33,
    4,
    32,
    5,
    41,
    2,
    4,
    33,
    7,
    2,
    64,
    2,
    64,
    32,
    5,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    6,
    32,
    7,
    167,
    34,
    4,
    32,
    6,
    40,
    2,
    20,
    106,
    54,
    2,
    20,
    32,
    4,
    32,
    3,
    75,
    13,
    2,
    32,
    1,
    32,
    2,
    32,
    4,
    16,
    141,
    1,
    32,
    0,
    32,
    4,
    54,
    2,
    4,
    65,
    0,
    33,
    4,
    12,
    1,
    11,
    32,
    0,
    32,
    7,
    55,
    2,
    4,
    11,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    5,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    32,
    4,
    32,
    3,
    65,
    252,
    137,
    192,
    0,
    16,
    99,
    0,
    11,
    141,
    1,
    2,
    4,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    19,
    16,
    103,
    32,
    0,
    40,
    2,
    12,
    33,
    3,
    32,
    0,
    40,
    2,
    8,
    34,
    2,
    65,
    225,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    2,
    65,
    15,
    106,
    65,
    240,
    145,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    2,
    65,
    8,
    106,
    65,
    233,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    65,
    19,
    54,
    2,
    8,
    32,
    1,
    32,
    2,
    54,
    2,
    0,
    32,
    1,
    32,
    3,
    54,
    2,
    4,
    65,
    11,
    32,
    1,
    65,
    248,
    145,
    192,
    0,
    16,
    107,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    11,
    136,
    1,
    1,
    1,
    127,
    65,
    204,
    153,
    5,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    204,
    153,
    5,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    65,
    0,
    65,
    204,
    153,
    5,
    16,
    131,
    1,
    33,
    1,
    32,
    0,
    65,
    0,
    58,
    0,
    55,
    32,
    0,
    65,
    0,
    59,
    0,
    53,
    32,
    0,
    65,
    144,
    32,
    54,
    2,
    0,
    32,
    0,
    66,
    0,
    55,
    2,
    4,
    32,
    0,
    65,
    12,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    0,
    66,
    0,
    55,
    2,
    28,
    32,
    0,
    65,
    20,
    106,
    66,
    128,
    128,
    128,
    128,
    16,
    55,
    2,
    0,
    32,
    0,
    65,
    36,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    0,
    65,
    44,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    32,
    1,
    54,
    2,
    48,
    32,
    0,
    65,
    0,
    58,
    0,
    52,
    11,
    113,
    0,
    2,
    127,
    32,
    2,
    65,
    2,
    116,
    34,
    1,
    32,
    3,
    65,
    3,
    116,
    65,
    128,
    128,
    1,
    106,
    34,
    2,
    32,
    1,
    32,
    2,
    75,
    27,
    65,
    135,
    128,
    4,
    106,
    34,
    1,
    65,
    16,
    118,
    64,
    0,
    34,
    2,
    65,
    127,
    70,
    4,
    64,
    65,
    0,
    33,
    3,
    65,
    1,
    12,
    1,
    11,
    32,
    2,
    65,
    16,
    116,
    34,
    3,
    66,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    0,
    54,
    2,
    8,
    32,
    3,
    32,
    3,
    32,
    1,
    65,
    128,
    128,
    124,
    113,
    106,
    65,
    2,
    114,
    54,
    2,
    0,
    65,
    0,
    11,
    33,
    2,
    32,
    0,
    32,
    3,
    54,
    2,
    4,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    11,
    127,
    1,
    1,
    127,
    35,
    0,
    65,
    64,
    106,
    34,
    5,
    36,
    0,
    32,
    5,
    32,
    1,
    54,
    2,
    12,
    32,
    5,
    32,
    0,
    54,
    2,
    8,
    32,
    5,
    32,
    3,
    54,
    2,
    20,
    32,
    5,
    32,
    2,
    54,
    2,
    16,
    32,
    5,
    65,
    44,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    5,
    65,
    60,
    106,
    65,
    194,
    0,
    54,
    2,
    0,
    32,
    5,
    66,
    2,
    55,
    2,
    28,
    32,
    5,
    65,
    160,
    197,
    193,
    0,
    54,
    2,
    24,
    32,
    5,
    65,
    62,
    54,
    2,
    52,
    32,
    5,
    32,
    5,
    65,
    48,
    106,
    54,
    2,
    40,
    32,
    5,
    32,
    5,
    65,
    16,
    106,
    54,
    2,
    56,
    32,
    5,
    32,
    5,
    65,
    8,
    106,
    54,
    2,
    48,
    32,
    5,
    65,
    24,
    106,
    32,
    4,
    16,
    130,
    1,
    0,
    11,
    113,
    1,
    3,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    32,
    0,
    32,
    1,
    16,
    56,
    13,
    0,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    33,
    3,
    32,
    1,
    40,
    2,
    24,
    32,
    2,
    65,
    28,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    65,
    228,
    196,
    193,
    0,
    54,
    2,
    24,
    32,
    2,
    66,
    1,
    55,
    2,
    12,
    32,
    2,
    65,
    232,
    196,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    13,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    1,
    16,
    56,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    65,
    1,
    11,
    119,
    1,
    2,
    127,
    32,
    0,
    45,
    0,
    4,
    33,
    1,
    32,
    0,
    45,
    0,
    5,
    4,
    64,
    32,
    1,
    65,
    255,
    1,
    113,
    33,
    2,
    32,
    0,
    2,
    127,
    65,
    1,
    32,
    2,
    13,
    0,
    26,
    32,
    0,
    40,
    2,
    0,
    34,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    33,
    2,
    32,
    1,
    40,
    2,
    24,
    33,
    0,
    32,
    1,
    45,
    0,
    0,
    65,
    4,
    113,
    4,
    64,
    32,
    0,
    65,
    234,
    198,
    193,
    0,
    65,
    1,
    32,
    2,
    17,
    1,
    0,
    12,
    1,
    11,
    32,
    0,
    65,
    235,
    198,
    193,
    0,
    65,
    2,
    32,
    2,
    17,
    1,
    0,
    11,
    34,
    1,
    58,
    0,
    4,
    11,
    32,
    1,
    65,
    255,
    1,
    113,
    65,
    0,
    71,
    11,
    101,
    0,
    2,
    64,
    32,
    0,
    32,
    1,
    107,
    32,
    2,
    73,
    4,
    64,
    32,
    1,
    65,
    127,
    106,
    33,
    1,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    2,
    106,
    32,
    1,
    32,
    2,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    2,
    69,
    13,
    0,
    3,
    64,
    32,
    0,
    32,
    1,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    0,
    65,
    1,
    106,
    33,
    0,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    11,
    11,
    77,
    1,
    1,
    127,
    65,
    130,
    130,
    10,
    65,
    2,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    130,
    130,
    10,
    65,
    2,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    65,
    0,
    65,
    130,
    130,
    10,
    16,
    131,
    1,
    33,
    1,
    32,
    0,
    66,
    0,
    55,
    2,
    12,
    32,
    0,
    32,
    1,
    54,
    2,
    8,
    32,
    0,
    65,
    20,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    0,
    66,
    135,
    128,
    128,
    128,
    48,
    55,
    2,
    0,
    11,
    109,
    1,
    1,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    28,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    44,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    3,
    66,
    2,
    55,
    2,
    12,
    32,
    3,
    65,
    244,
    197,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    65,
    61,
    54,
    2,
    36,
    32,
    3,
    32,
    3,
    65,
    32,
    106,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    54,
    2,
    40,
    32,
    3,
    32,
    3,
    65,
    4,
    106,
    54,
    2,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    109,
    1,
    1,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    28,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    44,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    3,
    66,
    2,
    55,
    2,
    12,
    32,
    3,
    65,
    196,
    202,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    65,
    61,
    54,
    2,
    36,
    32,
    3,
    32,
    3,
    65,
    32,
    106,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    65,
    4,
    106,
    54,
    2,
    40,
    32,
    3,
    32,
    3,
    54,
    2,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    109,
    1,
    1,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    28,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    44,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    3,
    66,
    2,
    55,
    2,
    12,
    32,
    3,
    65,
    248,
    202,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    65,
    61,
    54,
    2,
    36,
    32,
    3,
    32,
    3,
    65,
    32,
    106,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    65,
    4,
    106,
    54,
    2,
    40,
    32,
    3,
    32,
    3,
    54,
    2,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    109,
    1,
    1,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    28,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    44,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    3,
    66,
    2,
    55,
    2,
    12,
    32,
    3,
    65,
    164,
    202,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    65,
    61,
    54,
    2,
    36,
    32,
    3,
    32,
    3,
    65,
    32,
    106,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    65,
    4,
    106,
    54,
    2,
    40,
    32,
    3,
    32,
    3,
    54,
    2,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    86,
    1,
    2,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    33,
    3,
    32,
    0,
    40,
    2,
    24,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    3,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    70,
    1,
    1,
    127,
    2,
    64,
    32,
    1,
    65,
    127,
    74,
    4,
    64,
    2,
    64,
    32,
    1,
    69,
    4,
    64,
    65,
    1,
    33,
    2,
    12,
    1,
    11,
    32,
    1,
    65,
    1,
    16,
    149,
    1,
    34,
    2,
    13,
    0,
    12,
    2,
    11,
    32,
    0,
    32,
    1,
    54,
    2,
    4,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    15,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    1,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    89,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    4,
    106,
    65,
    172,
    188,
    193,
    0,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    89,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    4,
    106,
    65,
    196,
    194,
    193,
    0,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    89,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    4,
    106,
    65,
    236,
    200,
    193,
    0,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    97,
    1,
    2,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    4,
    36,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    3,
    69,
    4,
    64,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    32,
    0,
    58,
    0,
    8,
    32,
    3,
    32,
    2,
    54,
    2,
    4,
    32,
    3,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    47,
    0,
    13,
    59,
    0,
    9,
    32,
    3,
    65,
    11,
    106,
    32,
    4,
    65,
    15,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    4,
    65,
    16,
    106,
    36,
    0,
    32,
    3,
    173,
    66,
    32,
    134,
    66,
    2,
    132,
    11,
    86,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    4,
    106,
    65,
    236,
    200,
    193,
    0,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    95,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    32,
    0,
    40,
    2,
    0,
    34,
    0,
    40,
    2,
    0,
    65,
    1,
    70,
    4,
    64,
    32,
    2,
    32,
    1,
    65,
    220,
    143,
    192,
    0,
    65,
    4,
    16,
    127,
    32,
    2,
    32,
    0,
    65,
    4,
    106,
    54,
    2,
    12,
    32,
    2,
    32,
    2,
    65,
    12,
    106,
    65,
    228,
    143,
    192,
    0,
    16,
    63,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    224,
    143,
    192,
    0,
    65,
    4,
    16,
    127,
    11,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    76,
    2,
    1,
    127,
    1,
    126,
    32,
    1,
    65,
    8,
    106,
    34,
    6,
    41,
    3,
    0,
    33,
    7,
    32,
    0,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    0,
    32,
    4,
    40,
    2,
    0,
    106,
    32,
    4,
    65,
    4,
    106,
    40,
    2,
    0,
    32,
    0,
    107,
    32,
    5,
    16,
    55,
    32,
    1,
    32,
    0,
    32,
    6,
    41,
    3,
    0,
    32,
    7,
    125,
    167,
    106,
    54,
    2,
    0,
    11,
    74,
    0,
    2,
    127,
    32,
    1,
    65,
    128,
    128,
    196,
    0,
    71,
    4,
    64,
    65,
    1,
    32,
    0,
    40,
    2,
    24,
    32,
    1,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    16,
    17,
    0,
    0,
    13,
    1,
    26,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    0,
    15,
    11,
    32,
    0,
    40,
    2,
    24,
    32,
    2,
    32,
    3,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    11,
    57,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    0,
    32,
    2,
    32,
    1,
    16,
    137,
    1,
    55,
    3,
    0,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    2,
    32,
    2,
    65,
    12,
    106,
    16,
    46,
    32,
    2,
    16,
    95,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    86,
    1,
    1,
    127,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    65,
    232,
    213,
    0,
    106,
    65,
    0,
    65,
    136,
    128,
    2,
    16,
    131,
    1,
    26,
    32,
    1,
    65,
    0,
    65,
    230,
    213,
    0,
    16,
    131,
    1,
    34,
    1,
    65,
    1,
    58,
    0,
    243,
    213,
    2,
    32,
    1,
    65,
    1,
    59,
    1,
    240,
    213,
    2,
    32,
    1,
    32,
    0,
    58,
    0,
    242,
    213,
    2,
    32,
    1,
    11,
    72,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    20,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    228,
    196,
    193,
    0,
    54,
    2,
    16,
    32,
    3,
    66,
    1,
    55,
    2,
    4,
    32,
    3,
    32,
    1,
    54,
    2,
    28,
    32,
    3,
    32,
    0,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    65,
    24,
    106,
    54,
    2,
    0,
    32,
    3,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    64,
    0,
    35,
    0,
    65,
    32,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    28,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    220,
    139,
    192,
    0,
    54,
    2,
    24,
    32,
    0,
    66,
    1,
    55,
    2,
    12,
    32,
    0,
    65,
    212,
    139,
    192,
    0,
    54,
    2,
    8,
    32,
    1,
    32,
    0,
    65,
    8,
    106,
    16,
    102,
    32,
    0,
    65,
    32,
    106,
    36,
    0,
    11,
    58,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    1,
    65,
    248,
    140,
    192,
    0,
    65,
    15,
    16,
    127,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    2,
    32,
    2,
    65,
    12,
    106,
    65,
    136,
    141,
    192,
    0,
    16,
    63,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    58,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    1,
    65,
    152,
    141,
    192,
    0,
    65,
    13,
    16,
    127,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    2,
    32,
    2,
    65,
    12,
    106,
    65,
    168,
    141,
    192,
    0,
    16,
    63,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    70,
    1,
    2,
    127,
    32,
    1,
    40,
    2,
    4,
    33,
    2,
    32,
    1,
    40,
    2,
    0,
    33,
    3,
    65,
    8,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    8,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    32,
    2,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    65,
    204,
    192,
    193,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    11,
    59,
    1,
    1,
    127,
    2,
    127,
    32,
    1,
    65,
    4,
    75,
    4,
    64,
    65,
    240,
    177,
    127,
    33,
    2,
    65,
    1,
    12,
    1,
    11,
    32,
    1,
    65,
    2,
    116,
    65,
    144,
    187,
    192,
    0,
    106,
    40,
    2,
    0,
    33,
    2,
    65,
    0,
    11,
    33,
    1,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    11,
    92,
    1,
    3,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    0,
    40,
    2,
    12,
    34,
    2,
    69,
    4,
    64,
    65,
    212,
    188,
    193,
    0,
    65,
    43,
    65,
    244,
    191,
    193,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    40,
    2,
    8,
    34,
    3,
    69,
    4,
    64,
    65,
    212,
    188,
    193,
    0,
    65,
    43,
    65,
    132,
    192,
    193,
    0,
    16,
    114,
    0,
    11,
    32,
    1,
    32,
    2,
    54,
    2,
    8,
    32,
    1,
    32,
    0,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    0,
    32,
    1,
    16,
    129,
    1,
    0,
    11,
    51,
    1,
    1,
    127,
    32,
    2,
    4,
    64,
    32,
    0,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    11,
    32,
    0,
    11,
    58,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    0,
    32,
    1,
    45,
    0,
    0,
    65,
    16,
    113,
    65,
    4,
    118,
    4,
    64,
    32,
    0,
    32,
    1,
    16,
    83,
    15,
    11,
    32,
    1,
    45,
    0,
    0,
    65,
    32,
    113,
    65,
    5,
    118,
    4,
    64,
    32,
    0,
    32,
    1,
    16,
    84,
    15,
    11,
    32,
    0,
    32,
    1,
    16,
    160,
    1,
    11,
    42,
    1,
    1,
    127,
    32,
    2,
    65,
    1,
    16,
    48,
    34,
    3,
    4,
    64,
    32,
    3,
    32,
    0,
    32,
    2,
    32,
    1,
    32,
    1,
    32,
    2,
    75,
    27,
    16,
    121,
    26,
    32,
    0,
    32,
    1,
    65,
    1,
    16,
    24,
    11,
    32,
    3,
    11,
    67,
    2,
    1,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    65,
    0,
    54,
    2,
    8,
    32,
    1,
    66,
    0,
    55,
    3,
    0,
    32,
    1,
    41,
    3,
    0,
    33,
    2,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    54,
    2,
    8,
    32,
    0,
    32,
    2,
    55,
    3,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    16,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    45,
    0,
    2,
    64,
    32,
    0,
    65,
    124,
    77,
    4,
    64,
    32,
    0,
    69,
    4,
    64,
    65,
    4,
    33,
    0,
    12,
    2,
    11,
    32,
    0,
    32,
    0,
    65,
    125,
    73,
    65,
    2,
    116,
    16,
    149,
    1,
    34,
    0,
    13,
    1,
    11,
    0,
    11,
    32,
    0,
    11,
    50,
    1,
    1,
    127,
    16,
    59,
    34,
    3,
    32,
    2,
    65,
    1,
    115,
    32,
    1,
    65,
    1,
    32,
    1,
    65,
    128,
    2,
    73,
    27,
    16,
    85,
    32,
    0,
    66,
    0,
    55,
    3,
    0,
    32,
    0,
    32,
    3,
    54,
    2,
    16,
    32,
    0,
    65,
    8,
    106,
    66,
    0,
    55,
    3,
    0,
    11,
    52,
    0,
    32,
    0,
    32,
    1,
    40,
    2,
    24,
    32,
    2,
    32,
    3,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    58,
    0,
    8,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    3,
    69,
    58,
    0,
    9,
    32,
    0,
    65,
    0,
    54,
    2,
    4,
    11,
    50,
    1,
    1,
    127,
    65,
    8,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    4,
    64,
    65,
    8,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    2,
    32,
    1,
    54,
    2,
    4,
    32,
    2,
    32,
    0,
    54,
    2,
    0,
    65,
    16,
    32,
    2,
    65,
    180,
    143,
    192,
    0,
    16,
    107,
    11,
    44,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    65,
    8,
    106,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    0,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    1,
    16,
    88,
    0,
    11,
    52,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    1,
    54,
    2,
    12,
    32,
    2,
    32,
    0,
    54,
    2,
    8,
    32,
    2,
    65,
    176,
    197,
    193,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    228,
    196,
    193,
    0,
    54,
    2,
    0,
    32,
    2,
    16,
    120,
    0,
    11,
    41,
    1,
    1,
    127,
    32,
    2,
    4,
    64,
    32,
    0,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    58,
    0,
    0,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    11,
    32,
    0,
    11,
    37,
    1,
    1,
    126,
    32,
    0,
    40,
    2,
    0,
    34,
    0,
    172,
    34,
    2,
    32,
    2,
    66,
    63,
    135,
    34,
    2,
    124,
    32,
    2,
    133,
    32,
    0,
    65,
    127,
    115,
    65,
    31,
    118,
    32,
    1,
    16,
    52,
    11,
    51,
    1,
    1,
    127,
    65,
    16,
    33,
    1,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    45,
    0,
    0,
    65,
    1,
    107,
    14,
    2,
    0,
    1,
    2,
    11,
    32,
    0,
    45,
    0,
    1,
    15,
    11,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    45,
    0,
    8,
    33,
    1,
    11,
    32,
    1,
    11,
    39,
    1,
    1,
    127,
    2,
    64,
    32,
    0,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    39,
    1,
    1,
    127,
    2,
    64,
    32,
    0,
    40,
    2,
    4,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    35,
    0,
    32,
    1,
    65,
    1,
    115,
    16,
    113,
    33,
    1,
    32,
    0,
    66,
    0,
    55,
    3,
    0,
    32,
    0,
    32,
    1,
    54,
    2,
    16,
    32,
    0,
    65,
    8,
    106,
    66,
    0,
    55,
    3,
    0,
    11,
    41,
    0,
    32,
    0,
    173,
    66,
    128,
    128,
    128,
    128,
    16,
    66,
    0,
    32,
    0,
    40,
    2,
    24,
    65,
    196,
    140,
    192,
    0,
    65,
    20,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    27,
    132,
    11,
    37,
    0,
    32,
    0,
    65,
    0,
    58,
    0,
    32,
    32,
    0,
    65,
    0,
    54,
    2,
    20,
    32,
    0,
    65,
    0,
    54,
    2,
    12,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    28,
    11,
    27,
    1,
    1,
    127,
    32,
    0,
    65,
    1,
    16,
    48,
    34,
    1,
    4,
    64,
    32,
    1,
    65,
    0,
    32,
    0,
    16,
    131,
    1,
    26,
    11,
    32,
    1,
    11,
    29,
    1,
    1,
    127,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    40,
    0,
    32,
    0,
    32,
    0,
    40,
    2,
    16,
    32,
    2,
    106,
    54,
    2,
    16,
    32,
    0,
    32,
    0,
    41,
    3,
    0,
    32,
    2,
    173,
    124,
    55,
    3,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    8,
    11,
    28,
    0,
    32,
    1,
    40,
    2,
    24,
    65,
    208,
    216,
    193,
    0,
    65,
    5,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    10,
    0,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    123,
    11,
    16,
    0,
    32,
    1,
    4,
    64,
    32,
    0,
    32,
    1,
    65,
    4,
    16,
    156,
    1,
    11,
    11,
    18,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    32,
    1,
    32,
    2,
    106,
    16,
    66,
    65,
    0,
    11,
    22,
    0,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    40,
    2,
    0,
    54,
    2,
    0,
    11,
    16,
    0,
    32,
    0,
    41,
    3,
    0,
    26,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    11,
    20,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    12,
    17,
    0,
    0,
    11,
    8,
    0,
    32,
    0,
    32,
    1,
    16,
    48,
    11,
    19,
    0,
    32,
    0,
    65,
    40,
    54,
    2,
    4,
    32,
    0,
    65,
    212,
    138,
    192,
    0,
    54,
    2,
    0,
    11,
    17,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    32,
    1,
    16,
    166,
    1,
    11,
    17,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    8,
    32,
    1,
    16,
    166,
    1,
    11,
    16,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    8,
    32,
    1,
    16,
    15,
    11,
    19,
    0,
    32,
    0,
    65,
    204,
    192,
    193,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    11,
    16,
    0,
    32,
    1,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    16,
    14,
    11,
    10,
    0,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    24,
    11,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    16,
    37,
    65,
    0,
    11,
    17,
    0,
    65,
    192,
    196,
    193,
    0,
    65,
    17,
    65,
    212,
    196,
    193,
    0,
    16,
    114,
    0,
    11,
    14,
    0,
    32,
    0,
    40,
    2,
    0,
    26,
    3,
    64,
    12,
    0,
    11,
    0,
    11,
    13,
    0,
    32,
    0,
    53,
    2,
    0,
    65,
    1,
    32,
    1,
    16,
    52,
    11,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    32,
    2,
    16,
    39,
    11,
    11,
    0,
    32,
    0,
    35,
    0,
    106,
    36,
    0,
    35,
    0,
    11,
    10,
    0,
    32,
    0,
    65,
    8,
    106,
    41,
    3,
    0,
    11,
    13,
    0,
    32,
    1,
    65,
    244,
    145,
    192,
    0,
    65,
    2,
    16,
    14,
    11,
    25,
    0,
    32,
    0,
    32,
    1,
    65,
    172,
    231,
    193,
    0,
    40,
    2,
    0,
    34,
    0,
    65,
    42,
    32,
    0,
    27,
    17,
    4,
    0,
    0,
    11,
    10,
    0,
    32,
    2,
    32,
    0,
    32,
    1,
    16,
    14,
    11,
    9,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    11,
    7,
    0,
    32,
    0,
    16,
    1,
    0,
    11,
    13,
    0,
    66,
    250,
    227,
    222,
    178,
    168,
    237,
    139,
    221,
    137,
    127,
    11,
    4,
    0,
    65,
    0,
    11,
    5,
    0,
    65,
    128,
    4,
    11,
    4,
    0,
    65,
    1,
    11,
    4,
    0,
    32,
    1,
    11,
    13,
    0,
    66,
    149,
    151,
    213,
    166,
    240,
    201,
    145,
    211,
    198,
    0,
    11,
    13,
    0,
    66,
    244,
    249,
    158,
    230,
    238,
    163,
    170,
    249,
    254,
    0,
    11,
    13,
    0,
    66,
    225,
    246,
    196,
    237,
    133,
    189,
    222,
    249,
    138,
    127,
    11,
    12,
    0,
    66,
    161,
    180,
    233,
    183,
    247,
    251,
    205,
    222,
    8,
    11,
    3,
    0,
    1,
    11,
    3,
    0,
    1,
    11,
    11,
    140,
    223,
    1,
    3,
    0,
    65,
    128,
    128,
    192,
    0,
    11,
    246,
    30,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    73,
    0,
    0,
    0,
    158,
    5,
    0,
    0,
    33,
    0,
    0,
    0,
    102,
    97,
    105,
    108,
    101,
    100,
    32,
    116,
    111,
    32,
    119,
    114,
    105,
    116,
    101,
    32,
    119,
    104,
    111,
    108,
    101,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    103,
    122,
    92,
    119,
    114,
    105,
    116,
    101,
    46,
    114,
    115,
    120,
    0,
    16,
    0,
    92,
    0,
    0,
    0,
    112,
    0,
    0,
    0,
    34,
    0,
    0,
    0,
    120,
    0,
    16,
    0,
    92,
    0,
    0,
    0,
    119,
    1,
    0,
    0,
    44,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    96,
    40,
    108,
    101,
    102,
    116,
    32,
    61,
    61,
    32,
    114,
    105,
    103,
    104,
    116,
    41,
    96,
    10,
    32,
    32,
    108,
    101,
    102,
    116,
    58,
    32,
    96,
    96,
    44,
    10,
    32,
    114,
    105,
    103,
    104,
    116,
    58,
    32,
    96,
    96,
    0,
    0,
    248,
    0,
    16,
    0,
    45,
    0,
    0,
    0,
    37,
    1,
    16,
    0,
    12,
    0,
    0,
    0,
    49,
    1,
    16,
    0,
    1,
    0,
    0,
    0,
    120,
    0,
    16,
    0,
    92,
    0,
    0,
    0,
    147,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    120,
    0,
    16,
    0,
    92,
    0,
    0,
    0,
    150,
    0,
    0,
    0,
    26,
    0,
    0,
    0,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    79,
    112,
    116,
    105,
    111,
    110,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    32,
    96,
    78,
    111,
    110,
    101,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    122,
    105,
    111,
    46,
    114,
    115,
    0,
    0,
    151,
    1,
    16,
    0,
    87,
    0,
    0,
    0,
    198,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    99,
    111,
    114,
    114,
    117,
    112,
    116,
    32,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    32,
    115,
    116,
    114,
    101,
    97,
    109,
    0,
    0,
    151,
    1,
    16,
    0,
    87,
    0,
    0,
    0,
    244,
    0,
    0,
    0,
    39,
    0,
    0,
    0,
    151,
    1,
    16,
    0,
    87,
    0,
    0,
    0,
    190,
    0,
    0,
    0,
    27,
    0,
    0,
    0,
    151,
    1,
    16,
    0,
    87,
    0,
    0,
    0,
    186,
    0,
    0,
    0,
    27,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    7,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    58,
    32,
    0,
    0,
    112,
    2,
    16,
    0,
    0,
    0,
    0,
    0,
    112,
    2,
    16,
    0,
    2,
    0,
    0,
    0,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    97,
    108,
    108,
    111,
    99,
    47,
    115,
    114,
    99,
    47,
    118,
    101,
    99,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    132,
    2,
    16,
    0,
    76,
    0,
    0,
    0,
    64,
    6,
    0,
    0,
    42,
    0,
    0,
    0,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    0,
    224,
    2,
    16,
    0,
    73,
    0,
    0,
    0,
    158,
    5,
    0,
    0,
    33,
    0,
    0,
    0,
    102,
    97,
    105,
    108,
    101,
    100,
    32,
    116,
    111,
    32,
    119,
    114,
    105,
    116,
    101,
    32,
    119,
    104,
    111,
    108,
    101,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    0,
    88,
    3,
    16,
    0,
    73,
    0,
    0,
    0,
    158,
    5,
    0,
    0,
    33,
    0,
    0,
    0,
    102,
    97,
    105,
    108,
    101,
    100,
    32,
    116,
    111,
    32,
    119,
    114,
    105,
    116,
    101,
    32,
    119,
    104,
    111,
    108,
    101,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    0,
    208,
    3,
    16,
    0,
    73,
    0,
    0,
    0,
    169,
    1,
    0,
    0,
    28,
    0,
    0,
    0,
    102,
    97,
    105,
    108,
    101,
    100,
    32,
    116,
    111,
    32,
    102,
    105,
    108,
    108,
    32,
    119,
    104,
    111,
    108,
    101,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    105,
    109,
    112,
    108,
    115,
    46,
    114,
    115,
    0,
    0,
    71,
    4,
    16,
    0,
    75,
    0,
    0,
    0,
    230,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    99,
    114,
    99,
    46,
    114,
    115,
    0,
    164,
    4,
    16,
    0,
    87,
    0,
    0,
    0,
    105,
    0,
    0,
    0,
    26,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    14,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    14,
    0,
    0,
    0,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    40,
    41,
    32,
    105,
    115,
    32,
    100,
    101,
    112,
    114,
    101,
    99,
    97,
    116,
    101,
    100,
    59,
    32,
    117,
    115,
    101,
    32,
    68,
    105,
    115,
    112,
    108,
    97,
    121,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    82,
    101,
    115,
    117,
    108,
    116,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    110,
    32,
    96,
    69,
    114,
    114,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    20,
    0,
    0,
    0,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    32,
    100,
    101,
    99,
    111,
    109,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    184,
    5,
    16,
    0,
    27,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    122,
    105,
    111,
    46,
    114,
    115,
    0,
    220,
    5,
    16,
    0,
    87,
    0,
    0,
    0,
    54,
    0,
    0,
    0,
    52,
    0,
    0,
    0,
    68,
    101,
    99,
    111,
    109,
    112,
    114,
    101,
    115,
    115,
    69,
    114,
    114,
    111,
    114,
    73,
    110,
    110,
    101,
    114,
    110,
    101,
    101,
    100,
    115,
    95,
    100,
    105,
    99,
    116,
    105,
    111,
    110,
    97,
    114,
    121,
    19,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    21,
    0,
    0,
    0,
    68,
    101,
    99,
    111,
    109,
    112,
    114,
    101,
    115,
    115,
    69,
    114,
    114,
    111,
    114,
    0,
    19,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    67,
    111,
    109,
    112,
    114,
    101,
    115,
    115,
    69,
    114,
    114,
    111,
    114,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    23,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    103,
    122,
    92,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    230,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    231,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    232,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    233,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    234,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    235,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    236,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    237,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    238,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    250,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    24,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    26,
    0,
    0,
    0,
    27,
    0,
    0,
    0,
    28,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    30,
    0,
    0,
    0,
    83,
    111,
    109,
    101,
    78,
    111,
    110,
    101,
    31,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    82,
    101,
    115,
    117,
    108,
    116,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    110,
    32,
    96,
    69,
    114,
    114,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    0,
    33,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    34,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    102,
    102,
    105,
    92,
    114,
    117,
    115,
    116,
    46,
    114,
    115,
    48,
    8,
    16,
    0,
    92,
    0,
    0,
    0,
    60,
    0,
    0,
    0,
    48,
    0,
    0,
    0,
    48,
    8,
    16,
    0,
    92,
    0,
    0,
    0,
    138,
    0,
    0,
    0,
    48,
    0,
    0,
    0,
    99,
    111,
    114,
    114,
    117,
    112,
    116,
    32,
    103,
    122,
    105,
    112,
    32,
    115,
    116,
    114,
    101,
    97,
    109,
    32,
    100,
    111,
    101,
    115,
    32,
    110,
    111,
    116,
    32,
    104,
    97,
    118,
    101,
    32,
    97,
    32,
    109,
    97,
    116,
    99,
    104,
    105,
    110,
    103,
    32,
    99,
    104,
    101,
    99,
    107,
    115,
    117,
    109,
    105,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    103,
    122,
    105,
    112,
    32,
    104,
    101,
    97,
    100,
    101,
    114,
    40,
    41,
    0,
    0,
    35,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    36,
    0,
    0,
    0,
    37,
    0,
    0,
    0,
    38,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    36,
    0,
    0,
    0,
    7,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    92,
    99,
    111,
    114,
    101,
    46,
    114,
    115,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    134,
    1,
    0,
    0,
    5,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    134,
    1,
    0,
    0,
    27,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    15,
    2,
    0,
    0,
    49,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    41,
    2,
    0,
    0,
    19,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    42,
    2,
    0,
    0,
    35,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    73,
    2,
    0,
    0,
    22,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    98,
    105,
    116,
    115,
    32,
    60,
    61,
    32,
    40,
    40,
    49,
    117,
    51,
    50,
    32,
    60,
    60,
    32,
    108,
    101,
    110,
    41,
    32,
    45,
    32,
    49,
    117,
    51,
    50,
    41,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    155,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    159,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    212,
    2,
    0,
    0,
    30,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    93,
    3,
    0,
    0,
    27,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    98,
    3,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    117,
    3,
    0,
    0,
    40,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    118,
    3,
    0,
    0,
    45,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    118,
    3,
    0,
    0,
    25,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    122,
    3,
    0,
    0,
    25,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    126,
    3,
    0,
    0,
    55,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    127,
    3,
    0,
    0,
    45,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    127,
    3,
    0,
    0,
    76,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    131,
    3,
    0,
    0,
    45,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    136,
    3,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    138,
    3,
    0,
    0,
    49,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    138,
    3,
    0,
    0,
    41,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    147,
    3,
    0,
    0,
    43,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    152,
    3,
    0,
    0,
    25,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    179,
    3,
    0,
    0,
    20,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    181,
    3,
    0,
    0,
    21,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    200,
    3,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    214,
    3,
    0,
    0,
    20,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    215,
    3,
    0,
    0,
    21,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    224,
    3,
    0,
    0,
    22,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    230,
    3,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    240,
    3,
    0,
    0,
    36,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    241,
    3,
    0,
    0,
    32,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    242,
    3,
    0,
    0,
    21,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    251,
    3,
    0,
    0,
    22,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    252,
    3,
    0,
    0,
    13,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    8,
    4,
    0,
    0,
    28,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    60,
    4,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    60,
    4,
    0,
    0,
    62,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    62,
    4,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    63,
    4,
    0,
    0,
    31,
    0,
    0,
    0,
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    120,
    4,
    0,
    0,
    26,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    129,
    4,
    0,
    0,
    24,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    99,
    111,
    100,
    101,
    32,
    60,
    32,
    77,
    65,
    88,
    95,
    72,
    85,
    70,
    70,
    95,
    83,
    89,
    77,
    66,
    79,
    76,
    83,
    95,
    50,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    131,
    4,
    0,
    0,
    13,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    138,
    4,
    0,
    0,
    31,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    139,
    4,
    0,
    0,
    21,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    213,
    4,
    0,
    0,
    30,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    180,
    5,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    194,
    5,
    0,
    0,
    14,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    17,
    6,
    0,
    0,
    27,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    236,
    5,
    0,
    0,
    29,
    0,
    0,
    0,
    1,
    1,
    2,
    1,
    3,
    1,
    4,
    1,
    5,
    1,
    6,
    1,
    7,
    1,
    8,
    1,
    9,
    1,
    9,
    1,
    10,
    1,
    10,
    1,
    11,
    1,
    11,
    1,
    12,
    1,
    12,
    1,
    13,
    1,
    13,
    1,
    13,
    1,
    13,
    1,
    14,
    1,
    14,
    1,
    14,
    1,
    14,
    1,
    15,
    1,
    15,
    1,
    15,
    1,
    15,
    1,
    16,
    1,
    16,
    1,
    16,
    1,
    16,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    29,
    1,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    244,
    5,
    0,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    7,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    31,
    0,
    0,
    0,
    63,
    0,
    0,
    0,
    127,
    0,
    0,
    0,
    255,
    0,
    0,
    0,
    255,
    1,
    0,
    0,
    255,
    3,
    0,
    0,
    255,
    7,
    0,
    0,
    255,
    15,
    0,
    0,
    255,
    31,
    0,
    0,
    255,
    63,
    0,
    0,
    255,
    127,
    0,
    0,
    255,
    255,
    0,
    65,
    128,
    159,
    192,
    0,
    11,
    181,
    22,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    248,
    5,
    0,
    0,
    46,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    9,
    9,
    9,
    9,
    9,
    9,
    9,
    9,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    0,
    0,
    18,
    19,
    20,
    20,
    21,
    21,
    22,
    22,
    22,
    22,
    23,
    23,
    23,
    23,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    0,
    6,
    0,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    8,
    8,
    9,
    9,
    9,
    9,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    10,
    6,
    0,
    0,
    51,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    65,
    6,
    0,
    0,
    38,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    100,
    46,
    112,
    97,
    114,
    97,
    109,
    115,
    46,
    102,
    108,
    117,
    115,
    104,
    95,
    114,
    101,
    109,
    97,
    105,
    110,
    105,
    110,
    103,
    32,
    61,
    61,
    32,
    48,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    84,
    6,
    0,
    0,
    9,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    109,
    97,
    116,
    99,
    104,
    95,
    108,
    101,
    110,
    32,
    62,
    61,
    32,
    77,
    73,
    78,
    95,
    77,
    65,
    84,
    67,
    72,
    95,
    76,
    69,
    78,
    46,
    105,
    110,
    116,
    111,
    40,
    41,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    196,
    6,
    0,
    0,
    5,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    109,
    97,
    116,
    99,
    104,
    95,
    100,
    105,
    115,
    116,
    32,
    62,
    61,
    32,
    49,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    197,
    6,
    0,
    0,
    5,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    109,
    97,
    116,
    99,
    104,
    95,
    100,
    105,
    115,
    116,
    32,
    97,
    115,
    32,
    117,
    115,
    105,
    122,
    101,
    32,
    60,
    61,
    32,
    76,
    90,
    95,
    68,
    73,
    67,
    84,
    95,
    83,
    73,
    90,
    69,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    198,
    6,
    0,
    0,
    5,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    217,
    6,
    0,
    0,
    16,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    217,
    6,
    0,
    0,
    5,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    252,
    6,
    0,
    0,
    24,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    14,
    7,
    0,
    0,
    24,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    56,
    7,
    0,
    0,
    33,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    108,
    111,
    111,
    107,
    97,
    104,
    101,
    97,
    100,
    95,
    115,
    105,
    122,
    101,
    32,
    62,
    61,
    32,
    108,
    101,
    110,
    95,
    116,
    111,
    95,
    109,
    111,
    118,
    101,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    124,
    7,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    184,
    7,
    0,
    0,
    13,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    184,
    7,
    0,
    0,
    66,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    188,
    7,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    189,
    7,
    0,
    0,
    39,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    15,
    8,
    0,
    0,
    34,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    18,
    8,
    0,
    0,
    41,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    18,
    8,
    0,
    0,
    25,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    107,
    8,
    0,
    0,
    19,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    108,
    8,
    0,
    0,
    35,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    218,
    8,
    0,
    0,
    66,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    128,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    3,
    0,
    0,
    220,
    5,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    105,
    110,
    102,
    108,
    97,
    116,
    101,
    92,
    99,
    111,
    114,
    101,
    46,
    114,
    115,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    55,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    83,
    1,
    0,
    0,
    25,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    215,
    1,
    0,
    0,
    29,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    116,
    2,
    0,
    0,
    26,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    123,
    2,
    0,
    0,
    28,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    124,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    143,
    2,
    0,
    0,
    29,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    148,
    2,
    0,
    0,
    32,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    176,
    2,
    0,
    0,
    20,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    187,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    242,
    2,
    0,
    0,
    30,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    242,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    243,
    2,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    243,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    244,
    2,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    244,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    245,
    2,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    245,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    2,
    3,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    2,
    3,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    3,
    3,
    0,
    0,
    38,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    3,
    3,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    4,
    3,
    0,
    0,
    38,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    4,
    3,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    254,
    2,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    254,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    255,
    2,
    0,
    0,
    38,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    255,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    252,
    2,
    0,
    0,
    35,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    252,
    2,
    0,
    0,
    14,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    25,
    3,
    0,
    0,
    30,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    25,
    3,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    26,
    3,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    26,
    3,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    27,
    3,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    27,
    3,
    0,
    0,
    9,
    0,
    65,
    192,
    181,
    192,
    0,
    11,
    196,
    169,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    0,
    0,
    0,
    3,
    0,
    4,
    0,
    5,
    0,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    10,
    0,
    11,
    0,
    13,
    0,
    15,
    0,
    17,
    0,
    19,
    0,
    23,
    0,
    27,
    0,
    31,
    0,
    35,
    0,
    43,
    0,
    51,
    0,
    59,
    0,
    67,
    0,
    83,
    0,
    99,
    0,
    115,
    0,
    131,
    0,
    163,
    0,
    195,
    0,
    227,
    0,
    2,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    13,
    13,
    1,
    0,
    2,
    0,
    3,
    0,
    4,
    0,
    5,
    0,
    7,
    0,
    9,
    0,
    13,
    0,
    17,
    0,
    25,
    0,
    33,
    0,
    49,
    0,
    65,
    0,
    97,
    0,
    129,
    0,
    193,
    0,
    1,
    1,
    129,
    1,
    1,
    2,
    1,
    3,
    1,
    4,
    1,
    6,
    1,
    8,
    1,
    12,
    1,
    16,
    1,
    24,
    1,
    32,
    1,
    48,
    1,
    64,
    1,
    96,
    0,
    128,
    0,
    128,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    11,
    6,
    0,
    0,
    31,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    21,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    6,
    5,
    0,
    0,
    21,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    7,
    5,
    0,
    0,
    43,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    188,
    4,
    0,
    0,
    42,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    86,
    6,
    0,
    0,
    60,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    4,
    0,
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    224,
    4,
    0,
    0,
    40,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    242,
    4,
    0,
    0,
    33,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    248,
    4,
    0,
    0,
    47,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    18,
    5,
    0,
    0,
    35,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    20,
    5,
    0,
    0,
    25,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    26,
    5,
    0,
    0,
    30,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    105,
    110,
    102,
    108,
    97,
    116,
    101,
    92,
    111,
    117,
    116,
    112,
    117,
    116,
    95,
    98,
    117,
    102,
    102,
    101,
    114,
    46,
    114,
    115,
    0,
    0,
    0,
    84,
    28,
    16,
    0,
    109,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    84,
    28,
    16,
    0,
    109,
    0,
    0,
    0,
    42,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    105,
    110,
    102,
    108,
    97,
    116,
    101,
    92,
    115,
    116,
    114,
    101,
    97,
    109,
    46,
    114,
    115,
    0,
    0,
    228,
    28,
    16,
    0,
    102,
    0,
    0,
    0,
    32,
    1,
    0,
    0,
    21,
    0,
    0,
    0,
    228,
    28,
    16,
    0,
    102,
    0,
    0,
    0,
    80,
    1,
    0,
    0,
    38,
    0,
    0,
    0,
    80,
    97,
    114,
    97,
    109,
    86,
    101,
    114,
    115,
    105,
    111,
    110,
    66,
    117,
    102,
    77,
    101,
    109,
    68,
    97,
    116,
    97,
    83,
    116,
    114,
    101,
    97,
    109,
    69,
    114,
    114,
    78,
    111,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    92,
    115,
    116,
    114,
    101,
    97,
    109,
    46,
    114,
    115,
    0,
    0,
    164,
    29,
    16,
    0,
    102,
    0,
    0,
    0,
    58,
    0,
    0,
    0,
    20,
    0,
    0,
    0,
    164,
    29,
    16,
    0,
    102,
    0,
    0,
    0,
    59,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    150,
    48,
    7,
    119,
    44,
    97,
    14,
    238,
    186,
    81,
    9,
    153,
    25,
    196,
    109,
    7,
    143,
    244,
    106,
    112,
    53,
    165,
    99,
    233,
    163,
    149,
    100,
    158,
    50,
    136,
    219,
    14,
    164,
    184,
    220,
    121,
    30,
    233,
    213,
    224,
    136,
    217,
    210,
    151,
    43,
    76,
    182,
    9,
    189,
    124,
    177,
    126,
    7,
    45,
    184,
    231,
    145,
    29,
    191,
    144,
    100,
    16,
    183,
    29,
    242,
    32,
    176,
    106,
    72,
    113,
    185,
    243,
    222,
    65,
    190,
    132,
    125,
    212,
    218,
    26,
    235,
    228,
    221,
    109,
    81,
    181,
    212,
    244,
    199,
    133,
    211,
    131,
    86,
    152,
    108,
    19,
    192,
    168,
    107,
    100,
    122,
    249,
    98,
    253,
    236,
    201,
    101,
    138,
    79,
    92,
    1,
    20,
    217,
    108,
    6,
    99,
    99,
    61,
    15,
    250,
    245,
    13,
    8,
    141,
    200,
    32,
    110,
    59,
    94,
    16,
    105,
    76,
    228,
    65,
    96,
    213,
    114,
    113,
    103,
    162,
    209,
    228,
    3,
    60,
    71,
    212,
    4,
    75,
    253,
    133,
    13,
    210,
    107,
    181,
    10,
    165,
    250,
    168,
    181,
    53,
    108,
    152,
    178,
    66,
    214,
    201,
    187,
    219,
    64,
    249,
    188,
    172,
    227,
    108,
    216,
    50,
    117,
    92,
    223,
    69,
    207,
    13,
    214,
    220,
    89,
    61,
    209,
    171,
    172,
    48,
    217,
    38,
    58,
    0,
    222,
    81,
    128,
    81,
    215,
    200,
    22,
    97,
    208,
    191,
    181,
    244,
    180,
    33,
    35,
    196,
    179,
    86,
    153,
    149,
    186,
    207,
    15,
    165,
    189,
    184,
    158,
    184,
    2,
    40,
    8,
    136,
    5,
    95,
    178,
    217,
    12,
    198,
    36,
    233,
    11,
    177,
    135,
    124,
    111,
    47,
    17,
    76,
    104,
    88,
    171,
    29,
    97,
    193,
    61,
    45,
    102,
    182,
    144,
    65,
    220,
    118,
    6,
    113,
    219,
    1,
    188,
    32,
    210,
    152,
    42,
    16,
    213,
    239,
    137,
    133,
    177,
    113,
    31,
    181,
    182,
    6,
    165,
    228,
    191,
    159,
    51,
    212,
    184,
    232,
    162,
    201,
    7,
    120,
    52,
    249,
    0,
    15,
    142,
    168,
    9,
    150,
    24,
    152,
    14,
    225,
    187,
    13,
    106,
    127,
    45,
    61,
    109,
    8,
    151,
    108,
    100,
    145,
    1,
    92,
    99,
    230,
    244,
    81,
    107,
    107,
    98,
    97,
    108,
    28,
    216,
    48,
    101,
    133,
    78,
    0,
    98,
    242,
    237,
    149,
    6,
    108,
    123,
    165,
    1,
    27,
    193,
    244,
    8,
    130,
    87,
    196,
    15,
    245,
    198,
    217,
    176,
    101,
    80,
    233,
    183,
    18,
    234,
    184,
    190,
    139,
    124,
    136,
    185,
    252,
    223,
    29,
    221,
    98,
    73,
    45,
    218,
    21,
    243,
    124,
    211,
    140,
    101,
    76,
    212,
    251,
    88,
    97,
    178,
    77,
    206,
    81,
    181,
    58,
    116,
    0,
    188,
    163,
    226,
    48,
    187,
    212,
    65,
    165,
    223,
    74,
    215,
    149,
    216,
    61,
    109,
    196,
    209,
    164,
    251,
    244,
    214,
    211,
    106,
    233,
    105,
    67,
    252,
    217,
    110,
    52,
    70,
    136,
    103,
    173,
    208,
    184,
    96,
    218,
    115,
    45,
    4,
    68,
    229,
    29,
    3,
    51,
    95,
    76,
    10,
    170,
    201,
    124,
    13,
    221,
    60,
    113,
    5,
    80,
    170,
    65,
    2,
    39,
    16,
    16,
    11,
    190,
    134,
    32,
    12,
    201,
    37,
    181,
    104,
    87,
    179,
    133,
    111,
    32,
    9,
    212,
    102,
    185,
    159,
    228,
    97,
    206,
    14,
    249,
    222,
    94,
    152,
    201,
    217,
    41,
    34,
    152,
    208,
    176,
    180,
    168,
    215,
    199,
    23,
    61,
    179,
    89,
    129,
    13,
    180,
    46,
    59,
    92,
    189,
    183,
    173,
    108,
    186,
    192,
    32,
    131,
    184,
    237,
    182,
    179,
    191,
    154,
    12,
    226,
    182,
    3,
    154,
    210,
    177,
    116,
    57,
    71,
    213,
    234,
    175,
    119,
    210,
    157,
    21,
    38,
    219,
    4,
    131,
    22,
    220,
    115,
    18,
    11,
    99,
    227,
    132,
    59,
    100,
    148,
    62,
    106,
    109,
    13,
    168,
    90,
    106,
    122,
    11,
    207,
    14,
    228,
    157,
    255,
    9,
    147,
    39,
    174,
    0,
    10,
    177,
    158,
    7,
    125,
    68,
    147,
    15,
    240,
    210,
    163,
    8,
    135,
    104,
    242,
    1,
    30,
    254,
    194,
    6,
    105,
    93,
    87,
    98,
    247,
    203,
    103,
    101,
    128,
    113,
    54,
    108,
    25,
    231,
    6,
    107,
    110,
    118,
    27,
    212,
    254,
    224,
    43,
    211,
    137,
    90,
    122,
    218,
    16,
    204,
    74,
    221,
    103,
    111,
    223,
    185,
    249,
    249,
    239,
    190,
    142,
    67,
    190,
    183,
    23,
    213,
    142,
    176,
    96,
    232,
    163,
    214,
    214,
    126,
    147,
    209,
    161,
    196,
    194,
    216,
    56,
    82,
    242,
    223,
    79,
    241,
    103,
    187,
    209,
    103,
    87,
    188,
    166,
    221,
    6,
    181,
    63,
    75,
    54,
    178,
    72,
    218,
    43,
    13,
    216,
    76,
    27,
    10,
    175,
    246,
    74,
    3,
    54,
    96,
    122,
    4,
    65,
    195,
    239,
    96,
    223,
    85,
    223,
    103,
    168,
    239,
    142,
    110,
    49,
    121,
    190,
    105,
    70,
    140,
    179,
    97,
    203,
    26,
    131,
    102,
    188,
    160,
    210,
    111,
    37,
    54,
    226,
    104,
    82,
    149,
    119,
    12,
    204,
    3,
    71,
    11,
    187,
    185,
    22,
    2,
    34,
    47,
    38,
    5,
    85,
    190,
    59,
    186,
    197,
    40,
    11,
    189,
    178,
    146,
    90,
    180,
    43,
    4,
    106,
    179,
    92,
    167,
    255,
    215,
    194,
    49,
    207,
    208,
    181,
    139,
    158,
    217,
    44,
    29,
    174,
    222,
    91,
    176,
    194,
    100,
    155,
    38,
    242,
    99,
    236,
    156,
    163,
    106,
    117,
    10,
    147,
    109,
    2,
    169,
    6,
    9,
    156,
    63,
    54,
    14,
    235,
    133,
    103,
    7,
    114,
    19,
    87,
    0,
    5,
    130,
    74,
    191,
    149,
    20,
    122,
    184,
    226,
    174,
    43,
    177,
    123,
    56,
    27,
    182,
    12,
    155,
    142,
    210,
    146,
    13,
    190,
    213,
    229,
    183,
    239,
    220,
    124,
    33,
    223,
    219,
    11,
    212,
    210,
    211,
    134,
    66,
    226,
    212,
    241,
    248,
    179,
    221,
    104,
    110,
    131,
    218,
    31,
    205,
    22,
    190,
    129,
    91,
    38,
    185,
    246,
    225,
    119,
    176,
    111,
    119,
    71,
    183,
    24,
    230,
    90,
    8,
    136,
    112,
    106,
    15,
    255,
    202,
    59,
    6,
    102,
    92,
    11,
    1,
    17,
    255,
    158,
    101,
    143,
    105,
    174,
    98,
    248,
    211,
    255,
    107,
    97,
    69,
    207,
    108,
    22,
    120,
    226,
    10,
    160,
    238,
    210,
    13,
    215,
    84,
    131,
    4,
    78,
    194,
    179,
    3,
    57,
    97,
    38,
    103,
    167,
    247,
    22,
    96,
    208,
    77,
    71,
    105,
    73,
    219,
    119,
    110,
    62,
    74,
    106,
    209,
    174,
    220,
    90,
    214,
    217,
    102,
    11,
    223,
    64,
    240,
    59,
    216,
    55,
    83,
    174,
    188,
    169,
    197,
    158,
    187,
    222,
    127,
    207,
    178,
    71,
    233,
    255,
    181,
    48,
    28,
    242,
    189,
    189,
    138,
    194,
    186,
    202,
    48,
    147,
    179,
    83,
    166,
    163,
    180,
    36,
    5,
    54,
    208,
    186,
    147,
    6,
    215,
    205,
    41,
    87,
    222,
    84,
    191,
    103,
    217,
    35,
    46,
    122,
    102,
    179,
    184,
    74,
    97,
    196,
    2,
    27,
    104,
    93,
    148,
    43,
    111,
    42,
    55,
    190,
    11,
    180,
    161,
    142,
    12,
    195,
    27,
    223,
    5,
    90,
    141,
    239,
    2,
    45,
    0,
    0,
    0,
    0,
    65,
    49,
    27,
    25,
    130,
    98,
    54,
    50,
    195,
    83,
    45,
    43,
    4,
    197,
    108,
    100,
    69,
    244,
    119,
    125,
    134,
    167,
    90,
    86,
    199,
    150,
    65,
    79,
    8,
    138,
    217,
    200,
    73,
    187,
    194,
    209,
    138,
    232,
    239,
    250,
    203,
    217,
    244,
    227,
    12,
    79,
    181,
    172,
    77,
    126,
    174,
    181,
    142,
    45,
    131,
    158,
    207,
    28,
    152,
    135,
    81,
    18,
    194,
    74,
    16,
    35,
    217,
    83,
    211,
    112,
    244,
    120,
    146,
    65,
    239,
    97,
    85,
    215,
    174,
    46,
    20,
    230,
    181,
    55,
    215,
    181,
    152,
    28,
    150,
    132,
    131,
    5,
    89,
    152,
    27,
    130,
    24,
    169,
    0,
    155,
    219,
    250,
    45,
    176,
    154,
    203,
    54,
    169,
    93,
    93,
    119,
    230,
    28,
    108,
    108,
    255,
    223,
    63,
    65,
    212,
    158,
    14,
    90,
    205,
    162,
    36,
    132,
    149,
    227,
    21,
    159,
    140,
    32,
    70,
    178,
    167,
    97,
    119,
    169,
    190,
    166,
    225,
    232,
    241,
    231,
    208,
    243,
    232,
    36,
    131,
    222,
    195,
    101,
    178,
    197,
    218,
    170,
    174,
    93,
    93,
    235,
    159,
    70,
    68,
    40,
    204,
    107,
    111,
    105,
    253,
    112,
    118,
    174,
    107,
    49,
    57,
    239,
    90,
    42,
    32,
    44,
    9,
    7,
    11,
    109,
    56,
    28,
    18,
    243,
    54,
    70,
    223,
    178,
    7,
    93,
    198,
    113,
    84,
    112,
    237,
    48,
    101,
    107,
    244,
    247,
    243,
    42,
    187,
    182,
    194,
    49,
    162,
    117,
    145,
    28,
    137,
    52,
    160,
    7,
    144,
    251,
    188,
    159,
    23,
    186,
    141,
    132,
    14,
    121,
    222,
    169,
    37,
    56,
    239,
    178,
    60,
    255,
    121,
    243,
    115,
    190,
    72,
    232,
    106,
    125,
    27,
    197,
    65,
    60,
    42,
    222,
    88,
    5,
    79,
    121,
    240,
    68,
    126,
    98,
    233,
    135,
    45,
    79,
    194,
    198,
    28,
    84,
    219,
    1,
    138,
    21,
    148,
    64,
    187,
    14,
    141,
    131,
    232,
    35,
    166,
    194,
    217,
    56,
    191,
    13,
    197,
    160,
    56,
    76,
    244,
    187,
    33,
    143,
    167,
    150,
    10,
    206,
    150,
    141,
    19,
    9,
    0,
    204,
    92,
    72,
    49,
    215,
    69,
    139,
    98,
    250,
    110,
    202,
    83,
    225,
    119,
    84,
    93,
    187,
    186,
    21,
    108,
    160,
    163,
    214,
    63,
    141,
    136,
    151,
    14,
    150,
    145,
    80,
    152,
    215,
    222,
    17,
    169,
    204,
    199,
    210,
    250,
    225,
    236,
    147,
    203,
    250,
    245,
    92,
    215,
    98,
    114,
    29,
    230,
    121,
    107,
    222,
    181,
    84,
    64,
    159,
    132,
    79,
    89,
    88,
    18,
    14,
    22,
    25,
    35,
    21,
    15,
    218,
    112,
    56,
    36,
    155,
    65,
    35,
    61,
    167,
    107,
    253,
    101,
    230,
    90,
    230,
    124,
    37,
    9,
    203,
    87,
    100,
    56,
    208,
    78,
    163,
    174,
    145,
    1,
    226,
    159,
    138,
    24,
    33,
    204,
    167,
    51,
    96,
    253,
    188,
    42,
    175,
    225,
    36,
    173,
    238,
    208,
    63,
    180,
    45,
    131,
    18,
    159,
    108,
    178,
    9,
    134,
    171,
    36,
    72,
    201,
    234,
    21,
    83,
    208,
    41,
    70,
    126,
    251,
    104,
    119,
    101,
    226,
    246,
    121,
    63,
    47,
    183,
    72,
    36,
    54,
    116,
    27,
    9,
    29,
    53,
    42,
    18,
    4,
    242,
    188,
    83,
    75,
    179,
    141,
    72,
    82,
    112,
    222,
    101,
    121,
    49,
    239,
    126,
    96,
    254,
    243,
    230,
    231,
    191,
    194,
    253,
    254,
    124,
    145,
    208,
    213,
    61,
    160,
    203,
    204,
    250,
    54,
    138,
    131,
    187,
    7,
    145,
    154,
    120,
    84,
    188,
    177,
    57,
    101,
    167,
    168,
    75,
    152,
    131,
    59,
    10,
    169,
    152,
    34,
    201,
    250,
    181,
    9,
    136,
    203,
    174,
    16,
    79,
    93,
    239,
    95,
    14,
    108,
    244,
    70,
    205,
    63,
    217,
    109,
    140,
    14,
    194,
    116,
    67,
    18,
    90,
    243,
    2,
    35,
    65,
    234,
    193,
    112,
    108,
    193,
    128,
    65,
    119,
    216,
    71,
    215,
    54,
    151,
    6,
    230,
    45,
    142,
    197,
    181,
    0,
    165,
    132,
    132,
    27,
    188,
    26,
    138,
    65,
    113,
    91,
    187,
    90,
    104,
    152,
    232,
    119,
    67,
    217,
    217,
    108,
    90,
    30,
    79,
    45,
    21,
    95,
    126,
    54,
    12,
    156,
    45,
    27,
    39,
    221,
    28,
    0,
    62,
    18,
    0,
    152,
    185,
    83,
    49,
    131,
    160,
    144,
    98,
    174,
    139,
    209,
    83,
    181,
    146,
    22,
    197,
    244,
    221,
    87,
    244,
    239,
    196,
    148,
    167,
    194,
    239,
    213,
    150,
    217,
    246,
    233,
    188,
    7,
    174,
    168,
    141,
    28,
    183,
    107,
    222,
    49,
    156,
    42,
    239,
    42,
    133,
    237,
    121,
    107,
    202,
    172,
    72,
    112,
    211,
    111,
    27,
    93,
    248,
    46,
    42,
    70,
    225,
    225,
    54,
    222,
    102,
    160,
    7,
    197,
    127,
    99,
    84,
    232,
    84,
    34,
    101,
    243,
    77,
    229,
    243,
    178,
    2,
    164,
    194,
    169,
    27,
    103,
    145,
    132,
    48,
    38,
    160,
    159,
    41,
    184,
    174,
    197,
    228,
    249,
    159,
    222,
    253,
    58,
    204,
    243,
    214,
    123,
    253,
    232,
    207,
    188,
    107,
    169,
    128,
    253,
    90,
    178,
    153,
    62,
    9,
    159,
    178,
    127,
    56,
    132,
    171,
    176,
    36,
    28,
    44,
    241,
    21,
    7,
    53,
    50,
    70,
    42,
    30,
    115,
    119,
    49,
    7,
    180,
    225,
    112,
    72,
    245,
    208,
    107,
    81,
    54,
    131,
    70,
    122,
    119,
    178,
    93,
    99,
    78,
    215,
    250,
    203,
    15,
    230,
    225,
    210,
    204,
    181,
    204,
    249,
    141,
    132,
    215,
    224,
    74,
    18,
    150,
    175,
    11,
    35,
    141,
    182,
    200,
    112,
    160,
    157,
    137,
    65,
    187,
    132,
    70,
    93,
    35,
    3,
    7,
    108,
    56,
    26,
    196,
    63,
    21,
    49,
    133,
    14,
    14,
    40,
    66,
    152,
    79,
    103,
    3,
    169,
    84,
    126,
    192,
    250,
    121,
    85,
    129,
    203,
    98,
    76,
    31,
    197,
    56,
    129,
    94,
    244,
    35,
    152,
    157,
    167,
    14,
    179,
    220,
    150,
    21,
    170,
    27,
    0,
    84,
    229,
    90,
    49,
    79,
    252,
    153,
    98,
    98,
    215,
    216,
    83,
    121,
    206,
    23,
    79,
    225,
    73,
    86,
    126,
    250,
    80,
    149,
    45,
    215,
    123,
    212,
    28,
    204,
    98,
    19,
    138,
    141,
    45,
    82,
    187,
    150,
    52,
    145,
    232,
    187,
    31,
    208,
    217,
    160,
    6,
    236,
    243,
    126,
    94,
    173,
    194,
    101,
    71,
    110,
    145,
    72,
    108,
    47,
    160,
    83,
    117,
    232,
    54,
    18,
    58,
    169,
    7,
    9,
    35,
    106,
    84,
    36,
    8,
    43,
    101,
    63,
    17,
    228,
    121,
    167,
    150,
    165,
    72,
    188,
    143,
    102,
    27,
    145,
    164,
    39,
    42,
    138,
    189,
    224,
    188,
    203,
    242,
    161,
    141,
    208,
    235,
    98,
    222,
    253,
    192,
    35,
    239,
    230,
    217,
    189,
    225,
    188,
    20,
    252,
    208,
    167,
    13,
    63,
    131,
    138,
    38,
    126,
    178,
    145,
    63,
    185,
    36,
    208,
    112,
    248,
    21,
    203,
    105,
    59,
    70,
    230,
    66,
    122,
    119,
    253,
    91,
    181,
    107,
    101,
    220,
    244,
    90,
    126,
    197,
    55,
    9,
    83,
    238,
    118,
    56,
    72,
    247,
    177,
    174,
    9,
    184,
    240,
    159,
    18,
    161,
    51,
    204,
    63,
    138,
    114,
    253,
    36,
    147,
    0,
    0,
    0,
    0,
    55,
    106,
    194,
    1,
    110,
    212,
    132,
    3,
    89,
    190,
    70,
    2,
    220,
    168,
    9,
    7,
    235,
    194,
    203,
    6,
    178,
    124,
    141,
    4,
    133,
    22,
    79,
    5,
    184,
    81,
    19,
    14,
    143,
    59,
    209,
    15,
    214,
    133,
    151,
    13,
    225,
    239,
    85,
    12,
    100,
    249,
    26,
    9,
    83,
    147,
    216,
    8,
    10,
    45,
    158,
    10,
    61,
    71,
    92,
    11,
    112,
    163,
    38,
    28,
    71,
    201,
    228,
    29,
    30,
    119,
    162,
    31,
    41,
    29,
    96,
    30,
    172,
    11,
    47,
    27,
    155,
    97,
    237,
    26,
    194,
    223,
    171,
    24,
    245,
    181,
    105,
    25,
    200,
    242,
    53,
    18,
    255,
    152,
    247,
    19,
    166,
    38,
    177,
    17,
    145,
    76,
    115,
    16,
    20,
    90,
    60,
    21,
    35,
    48,
    254,
    20,
    122,
    142,
    184,
    22,
    77,
    228,
    122,
    23,
    224,
    70,
    77,
    56,
    215,
    44,
    143,
    57,
    142,
    146,
    201,
    59,
    185,
    248,
    11,
    58,
    60,
    238,
    68,
    63,
    11,
    132,
    134,
    62,
    82,
    58,
    192,
    60,
    101,
    80,
    2,
    61,
    88,
    23,
    94,
    54,
    111,
    125,
    156,
    55,
    54,
    195,
    218,
    53,
    1,
    169,
    24,
    52,
    132,
    191,
    87,
    49,
    179,
    213,
    149,
    48,
    234,
    107,
    211,
    50,
    221,
    1,
    17,
    51,
    144,
    229,
    107,
    36,
    167,
    143,
    169,
    37,
    254,
    49,
    239,
    39,
    201,
    91,
    45,
    38,
    76,
    77,
    98,
    35,
    123,
    39,
    160,
    34,
    34,
    153,
    230,
    32,
    21,
    243,
    36,
    33,
    40,
    180,
    120,
    42,
    31,
    222,
    186,
    43,
    70,
    96,
    252,
    41,
    113,
    10,
    62,
    40,
    244,
    28,
    113,
    45,
    195,
    118,
    179,
    44,
    154,
    200,
    245,
    46,
    173,
    162,
    55,
    47,
    192,
    141,
    154,
    112,
    247,
    231,
    88,
    113,
    174,
    89,
    30,
    115,
    153,
    51,
    220,
    114,
    28,
    37,
    147,
    119,
    43,
    79,
    81,
    118,
    114,
    241,
    23,
    116,
    69,
    155,
    213,
    117,
    120,
    220,
    137,
    126,
    79,
    182,
    75,
    127,
    22,
    8,
    13,
    125,
    33,
    98,
    207,
    124,
    164,
    116,
    128,
    121,
    147,
    30,
    66,
    120,
    202,
    160,
    4,
    122,
    253,
    202,
    198,
    123,
    176,
    46,
    188,
    108,
    135,
    68,
    126,
    109,
    222,
    250,
    56,
    111,
    233,
    144,
    250,
    110,
    108,
    134,
    181,
    107,
    91,
    236,
    119,
    106,
    2,
    82,
    49,
    104,
    53,
    56,
    243,
    105,
    8,
    127,
    175,
    98,
    63,
    21,
    109,
    99,
    102,
    171,
    43,
    97,
    81,
    193,
    233,
    96,
    212,
    215,
    166,
    101,
    227,
    189,
    100,
    100,
    186,
    3,
    34,
    102,
    141,
    105,
    224,
    103,
    32,
    203,
    215,
    72,
    23,
    161,
    21,
    73,
    78,
    31,
    83,
    75,
    121,
    117,
    145,
    74,
    252,
    99,
    222,
    79,
    203,
    9,
    28,
    78,
    146,
    183,
    90,
    76,
    165,
    221,
    152,
    77,
    152,
    154,
    196,
    70,
    175,
    240,
    6,
    71,
    246,
    78,
    64,
    69,
    193,
    36,
    130,
    68,
    68,
    50,
    205,
    65,
    115,
    88,
    15,
    64,
    42,
    230,
    73,
    66,
    29,
    140,
    139,
    67,
    80,
    104,
    241,
    84,
    103,
    2,
    51,
    85,
    62,
    188,
    117,
    87,
    9,
    214,
    183,
    86,
    140,
    192,
    248,
    83,
    187,
    170,
    58,
    82,
    226,
    20,
    124,
    80,
    213,
    126,
    190,
    81,
    232,
    57,
    226,
    90,
    223,
    83,
    32,
    91,
    134,
    237,
    102,
    89,
    177,
    135,
    164,
    88,
    52,
    145,
    235,
    93,
    3,
    251,
    41,
    92,
    90,
    69,
    111,
    94,
    109,
    47,
    173,
    95,
    128,
    27,
    53,
    225,
    183,
    113,
    247,
    224,
    238,
    207,
    177,
    226,
    217,
    165,
    115,
    227,
    92,
    179,
    60,
    230,
    107,
    217,
    254,
    231,
    50,
    103,
    184,
    229,
    5,
    13,
    122,
    228,
    56,
    74,
    38,
    239,
    15,
    32,
    228,
    238,
    86,
    158,
    162,
    236,
    97,
    244,
    96,
    237,
    228,
    226,
    47,
    232,
    211,
    136,
    237,
    233,
    138,
    54,
    171,
    235,
    189,
    92,
    105,
    234,
    240,
    184,
    19,
    253,
    199,
    210,
    209,
    252,
    158,
    108,
    151,
    254,
    169,
    6,
    85,
    255,
    44,
    16,
    26,
    250,
    27,
    122,
    216,
    251,
    66,
    196,
    158,
    249,
    117,
    174,
    92,
    248,
    72,
    233,
    0,
    243,
    127,
    131,
    194,
    242,
    38,
    61,
    132,
    240,
    17,
    87,
    70,
    241,
    148,
    65,
    9,
    244,
    163,
    43,
    203,
    245,
    250,
    149,
    141,
    247,
    205,
    255,
    79,
    246,
    96,
    93,
    120,
    217,
    87,
    55,
    186,
    216,
    14,
    137,
    252,
    218,
    57,
    227,
    62,
    219,
    188,
    245,
    113,
    222,
    139,
    159,
    179,
    223,
    210,
    33,
    245,
    221,
    229,
    75,
    55,
    220,
    216,
    12,
    107,
    215,
    239,
    102,
    169,
    214,
    182,
    216,
    239,
    212,
    129,
    178,
    45,
    213,
    4,
    164,
    98,
    208,
    51,
    206,
    160,
    209,
    106,
    112,
    230,
    211,
    93,
    26,
    36,
    210,
    16,
    254,
    94,
    197,
    39,
    148,
    156,
    196,
    126,
    42,
    218,
    198,
    73,
    64,
    24,
    199,
    204,
    86,
    87,
    194,
    251,
    60,
    149,
    195,
    162,
    130,
    211,
    193,
    149,
    232,
    17,
    192,
    168,
    175,
    77,
    203,
    159,
    197,
    143,
    202,
    198,
    123,
    201,
    200,
    241,
    17,
    11,
    201,
    116,
    7,
    68,
    204,
    67,
    109,
    134,
    205,
    26,
    211,
    192,
    207,
    45,
    185,
    2,
    206,
    64,
    150,
    175,
    145,
    119,
    252,
    109,
    144,
    46,
    66,
    43,
    146,
    25,
    40,
    233,
    147,
    156,
    62,
    166,
    150,
    171,
    84,
    100,
    151,
    242,
    234,
    34,
    149,
    197,
    128,
    224,
    148,
    248,
    199,
    188,
    159,
    207,
    173,
    126,
    158,
    150,
    19,
    56,
    156,
    161,
    121,
    250,
    157,
    36,
    111,
    181,
    152,
    19,
    5,
    119,
    153,
    74,
    187,
    49,
    155,
    125,
    209,
    243,
    154,
    48,
    53,
    137,
    141,
    7,
    95,
    75,
    140,
    94,
    225,
    13,
    142,
    105,
    139,
    207,
    143,
    236,
    157,
    128,
    138,
    219,
    247,
    66,
    139,
    130,
    73,
    4,
    137,
    181,
    35,
    198,
    136,
    136,
    100,
    154,
    131,
    191,
    14,
    88,
    130,
    230,
    176,
    30,
    128,
    209,
    218,
    220,
    129,
    84,
    204,
    147,
    132,
    99,
    166,
    81,
    133,
    58,
    24,
    23,
    135,
    13,
    114,
    213,
    134,
    160,
    208,
    226,
    169,
    151,
    186,
    32,
    168,
    206,
    4,
    102,
    170,
    249,
    110,
    164,
    171,
    124,
    120,
    235,
    174,
    75,
    18,
    41,
    175,
    18,
    172,
    111,
    173,
    37,
    198,
    173,
    172,
    24,
    129,
    241,
    167,
    47,
    235,
    51,
    166,
    118,
    85,
    117,
    164,
    65,
    63,
    183,
    165,
    196,
    41,
    248,
    160,
    243,
    67,
    58,
    161,
    170,
    253,
    124,
    163,
    157,
    151,
    190,
    162,
    208,
    115,
    196,
    181,
    231,
    25,
    6,
    180,
    190,
    167,
    64,
    182,
    137,
    205,
    130,
    183,
    12,
    219,
    205,
    178,
    59,
    177,
    15,
    179,
    98,
    15,
    73,
    177,
    85,
    101,
    139,
    176,
    104,
    34,
    215,
    187,
    95,
    72,
    21,
    186,
    6,
    246,
    83,
    184,
    49,
    156,
    145,
    185,
    180,
    138,
    222,
    188,
    131,
    224,
    28,
    189,
    218,
    94,
    90,
    191,
    237,
    52,
    152,
    190,
    0,
    0,
    0,
    0,
    101,
    103,
    188,
    184,
    139,
    200,
    9,
    170,
    238,
    175,
    181,
    18,
    87,
    151,
    98,
    143,
    50,
    240,
    222,
    55,
    220,
    95,
    107,
    37,
    185,
    56,
    215,
    157,
    239,
    40,
    180,
    197,
    138,
    79,
    8,
    125,
    100,
    224,
    189,
    111,
    1,
    135,
    1,
    215,
    184,
    191,
    214,
    74,
    221,
    216,
    106,
    242,
    51,
    119,
    223,
    224,
    86,
    16,
    99,
    88,
    159,
    87,
    25,
    80,
    250,
    48,
    165,
    232,
    20,
    159,
    16,
    250,
    113,
    248,
    172,
    66,
    200,
    192,
    123,
    223,
    173,
    167,
    199,
    103,
    67,
    8,
    114,
    117,
    38,
    111,
    206,
    205,
    112,
    127,
    173,
    149,
    21,
    24,
    17,
    45,
    251,
    183,
    164,
    63,
    158,
    208,
    24,
    135,
    39,
    232,
    207,
    26,
    66,
    143,
    115,
    162,
    172,
    32,
    198,
    176,
    201,
    71,
    122,
    8,
    62,
    175,
    50,
    160,
    91,
    200,
    142,
    24,
    181,
    103,
    59,
    10,
    208,
    0,
    135,
    178,
    105,
    56,
    80,
    47,
    12,
    95,
    236,
    151,
    226,
    240,
    89,
    133,
    135,
    151,
    229,
    61,
    209,
    135,
    134,
    101,
    180,
    224,
    58,
    221,
    90,
    79,
    143,
    207,
    63,
    40,
    51,
    119,
    134,
    16,
    228,
    234,
    227,
    119,
    88,
    82,
    13,
    216,
    237,
    64,
    104,
    191,
    81,
    248,
    161,
    248,
    43,
    240,
    196,
    159,
    151,
    72,
    42,
    48,
    34,
    90,
    79,
    87,
    158,
    226,
    246,
    111,
    73,
    127,
    147,
    8,
    245,
    199,
    125,
    167,
    64,
    213,
    24,
    192,
    252,
    109,
    78,
    208,
    159,
    53,
    43,
    183,
    35,
    141,
    197,
    24,
    150,
    159,
    160,
    127,
    42,
    39,
    25,
    71,
    253,
    186,
    124,
    32,
    65,
    2,
    146,
    143,
    244,
    16,
    247,
    232,
    72,
    168,
    61,
    88,
    20,
    155,
    88,
    63,
    168,
    35,
    182,
    144,
    29,
    49,
    211,
    247,
    161,
    137,
    106,
    207,
    118,
    20,
    15,
    168,
    202,
    172,
    225,
    7,
    127,
    190,
    132,
    96,
    195,
    6,
    210,
    112,
    160,
    94,
    183,
    23,
    28,
    230,
    89,
    184,
    169,
    244,
    60,
    223,
    21,
    76,
    133,
    231,
    194,
    209,
    224,
    128,
    126,
    105,
    14,
    47,
    203,
    123,
    107,
    72,
    119,
    195,
    162,
    15,
    13,
    203,
    199,
    104,
    177,
    115,
    41,
    199,
    4,
    97,
    76,
    160,
    184,
    217,
    245,
    152,
    111,
    68,
    144,
    255,
    211,
    252,
    126,
    80,
    102,
    238,
    27,
    55,
    218,
    86,
    77,
    39,
    185,
    14,
    40,
    64,
    5,
    182,
    198,
    239,
    176,
    164,
    163,
    136,
    12,
    28,
    26,
    176,
    219,
    129,
    127,
    215,
    103,
    57,
    145,
    120,
    210,
    43,
    244,
    31,
    110,
    147,
    3,
    247,
    38,
    59,
    102,
    144,
    154,
    131,
    136,
    63,
    47,
    145,
    237,
    88,
    147,
    41,
    84,
    96,
    68,
    180,
    49,
    7,
    248,
    12,
    223,
    168,
    77,
    30,
    186,
    207,
    241,
    166,
    236,
    223,
    146,
    254,
    137,
    184,
    46,
    70,
    103,
    23,
    155,
    84,
    2,
    112,
    39,
    236,
    187,
    72,
    240,
    113,
    222,
    47,
    76,
    201,
    48,
    128,
    249,
    219,
    85,
    231,
    69,
    99,
    156,
    160,
    63,
    107,
    249,
    199,
    131,
    211,
    23,
    104,
    54,
    193,
    114,
    15,
    138,
    121,
    203,
    55,
    93,
    228,
    174,
    80,
    225,
    92,
    64,
    255,
    84,
    78,
    37,
    152,
    232,
    246,
    115,
    136,
    139,
    174,
    22,
    239,
    55,
    22,
    248,
    64,
    130,
    4,
    157,
    39,
    62,
    188,
    36,
    31,
    233,
    33,
    65,
    120,
    85,
    153,
    175,
    215,
    224,
    139,
    202,
    176,
    92,
    51,
    59,
    182,
    89,
    237,
    94,
    209,
    229,
    85,
    176,
    126,
    80,
    71,
    213,
    25,
    236,
    255,
    108,
    33,
    59,
    98,
    9,
    70,
    135,
    218,
    231,
    233,
    50,
    200,
    130,
    142,
    142,
    112,
    212,
    158,
    237,
    40,
    177,
    249,
    81,
    144,
    95,
    86,
    228,
    130,
    58,
    49,
    88,
    58,
    131,
    9,
    143,
    167,
    230,
    110,
    51,
    31,
    8,
    193,
    134,
    13,
    109,
    166,
    58,
    181,
    164,
    225,
    64,
    189,
    193,
    134,
    252,
    5,
    47,
    41,
    73,
    23,
    74,
    78,
    245,
    175,
    243,
    118,
    34,
    50,
    150,
    17,
    158,
    138,
    120,
    190,
    43,
    152,
    29,
    217,
    151,
    32,
    75,
    201,
    244,
    120,
    46,
    174,
    72,
    192,
    192,
    1,
    253,
    210,
    165,
    102,
    65,
    106,
    28,
    94,
    150,
    247,
    121,
    57,
    42,
    79,
    151,
    150,
    159,
    93,
    242,
    241,
    35,
    229,
    5,
    25,
    107,
    77,
    96,
    126,
    215,
    245,
    142,
    209,
    98,
    231,
    235,
    182,
    222,
    95,
    82,
    142,
    9,
    194,
    55,
    233,
    181,
    122,
    217,
    70,
    0,
    104,
    188,
    33,
    188,
    208,
    234,
    49,
    223,
    136,
    143,
    86,
    99,
    48,
    97,
    249,
    214,
    34,
    4,
    158,
    106,
    154,
    189,
    166,
    189,
    7,
    216,
    193,
    1,
    191,
    54,
    110,
    180,
    173,
    83,
    9,
    8,
    21,
    154,
    78,
    114,
    29,
    255,
    41,
    206,
    165,
    17,
    134,
    123,
    183,
    116,
    225,
    199,
    15,
    205,
    217,
    16,
    146,
    168,
    190,
    172,
    42,
    70,
    17,
    25,
    56,
    35,
    118,
    165,
    128,
    117,
    102,
    198,
    216,
    16,
    1,
    122,
    96,
    254,
    174,
    207,
    114,
    155,
    201,
    115,
    202,
    34,
    241,
    164,
    87,
    71,
    150,
    24,
    239,
    169,
    57,
    173,
    253,
    204,
    94,
    17,
    69,
    6,
    238,
    77,
    118,
    99,
    137,
    241,
    206,
    141,
    38,
    68,
    220,
    232,
    65,
    248,
    100,
    81,
    121,
    47,
    249,
    52,
    30,
    147,
    65,
    218,
    177,
    38,
    83,
    191,
    214,
    154,
    235,
    233,
    198,
    249,
    179,
    140,
    161,
    69,
    11,
    98,
    14,
    240,
    25,
    7,
    105,
    76,
    161,
    190,
    81,
    155,
    60,
    219,
    54,
    39,
    132,
    53,
    153,
    146,
    150,
    80,
    254,
    46,
    46,
    153,
    185,
    84,
    38,
    252,
    222,
    232,
    158,
    18,
    113,
    93,
    140,
    119,
    22,
    225,
    52,
    206,
    46,
    54,
    169,
    171,
    73,
    138,
    17,
    69,
    230,
    63,
    3,
    32,
    129,
    131,
    187,
    118,
    145,
    224,
    227,
    19,
    246,
    92,
    91,
    253,
    89,
    233,
    73,
    152,
    62,
    85,
    241,
    33,
    6,
    130,
    108,
    68,
    97,
    62,
    212,
    170,
    206,
    139,
    198,
    207,
    169,
    55,
    126,
    56,
    65,
    127,
    214,
    93,
    38,
    195,
    110,
    179,
    137,
    118,
    124,
    214,
    238,
    202,
    196,
    111,
    214,
    29,
    89,
    10,
    177,
    161,
    225,
    228,
    30,
    20,
    243,
    129,
    121,
    168,
    75,
    215,
    105,
    203,
    19,
    178,
    14,
    119,
    171,
    92,
    161,
    194,
    185,
    57,
    198,
    126,
    1,
    128,
    254,
    169,
    156,
    229,
    153,
    21,
    36,
    11,
    54,
    160,
    54,
    110,
    81,
    28,
    142,
    167,
    22,
    102,
    134,
    194,
    113,
    218,
    62,
    44,
    222,
    111,
    44,
    73,
    185,
    211,
    148,
    240,
    129,
    4,
    9,
    149,
    230,
    184,
    177,
    123,
    73,
    13,
    163,
    30,
    46,
    177,
    27,
    72,
    62,
    210,
    67,
    45,
    89,
    110,
    251,
    195,
    246,
    219,
    233,
    166,
    145,
    103,
    81,
    31,
    169,
    176,
    204,
    122,
    206,
    12,
    116,
    148,
    97,
    185,
    102,
    241,
    6,
    5,
    222,
    0,
    0,
    0,
    0,
    176,
    41,
    96,
    61,
    96,
    83,
    192,
    122,
    208,
    122,
    160,
    71,
    192,
    166,
    128,
    245,
    112,
    143,
    224,
    200,
    160,
    245,
    64,
    143,
    16,
    220,
    32,
    178,
    193,
    75,
    112,
    48,
    113,
    98,
    16,
    13,
    161,
    24,
    176,
    74,
    17,
    49,
    208,
    119,
    1,
    237,
    240,
    197,
    177,
    196,
    144,
    248,
    97,
    190,
    48,
    191,
    209,
    151,
    80,
    130,
    130,
    151,
    224,
    96,
    50,
    190,
    128,
    93,
    226,
    196,
    32,
    26,
    82,
    237,
    64,
    39,
    66,
    49,
    96,
    149,
    242,
    24,
    0,
    168,
    34,
    98,
    160,
    239,
    146,
    75,
    192,
    210,
    67,
    220,
    144,
    80,
    243,
    245,
    240,
    109,
    35,
    143,
    80,
    42,
    147,
    166,
    48,
    23,
    131,
    122,
    16,
    165,
    51,
    83,
    112,
    152,
    227,
    41,
    208,
    223,
    83,
    0,
    176,
    226,
    4,
    47,
    193,
    193,
    180,
    6,
    161,
    252,
    100,
    124,
    1,
    187,
    212,
    85,
    97,
    134,
    196,
    137,
    65,
    52,
    116,
    160,
    33,
    9,
    164,
    218,
    129,
    78,
    20,
    243,
    225,
    115,
    197,
    100,
    177,
    241,
    117,
    77,
    209,
    204,
    165,
    55,
    113,
    139,
    21,
    30,
    17,
    182,
    5,
    194,
    49,
    4,
    181,
    235,
    81,
    57,
    101,
    145,
    241,
    126,
    213,
    184,
    145,
    67,
    134,
    184,
    33,
    161,
    54,
    145,
    65,
    156,
    230,
    235,
    225,
    219,
    86,
    194,
    129,
    230,
    70,
    30,
    161,
    84,
    246,
    55,
    193,
    105,
    38,
    77,
    97,
    46,
    150,
    100,
    1,
    19,
    71,
    243,
    81,
    145,
    247,
    218,
    49,
    172,
    39,
    160,
    145,
    235,
    151,
    137,
    241,
    214,
    135,
    85,
    209,
    100,
    55,
    124,
    177,
    89,
    231,
    6,
    17,
    30,
    87,
    47,
    113,
    35,
    73,
    88,
    243,
    88,
    249,
    113,
    147,
    101,
    41,
    11,
    51,
    34,
    153,
    34,
    83,
    31,
    137,
    254,
    115,
    173,
    57,
    215,
    19,
    144,
    233,
    173,
    179,
    215,
    89,
    132,
    211,
    234,
    136,
    19,
    131,
    104,
    56,
    58,
    227,
    85,
    232,
    64,
    67,
    18,
    88,
    105,
    35,
    47,
    72,
    181,
    3,
    157,
    248,
    156,
    99,
    160,
    40,
    230,
    195,
    231,
    152,
    207,
    163,
    218,
    203,
    207,
    19,
    56,
    123,
    230,
    115,
    5,
    171,
    156,
    211,
    66,
    27,
    181,
    179,
    127,
    11,
    105,
    147,
    205,
    187,
    64,
    243,
    240,
    107,
    58,
    83,
    183,
    219,
    19,
    51,
    138,
    10,
    132,
    99,
    8,
    186,
    173,
    3,
    53,
    106,
    215,
    163,
    114,
    218,
    254,
    195,
    79,
    202,
    34,
    227,
    253,
    122,
    11,
    131,
    192,
    170,
    113,
    35,
    135,
    26,
    88,
    67,
    186,
    77,
    119,
    50,
    153,
    253,
    94,
    82,
    164,
    45,
    36,
    242,
    227,
    157,
    13,
    146,
    222,
    141,
    209,
    178,
    108,
    61,
    248,
    210,
    81,
    237,
    130,
    114,
    22,
    93,
    171,
    18,
    43,
    140,
    60,
    66,
    169,
    60,
    21,
    34,
    148,
    236,
    111,
    130,
    211,
    92,
    70,
    226,
    238,
    76,
    154,
    194,
    92,
    252,
    179,
    162,
    97,
    44,
    201,
    2,
    38,
    156,
    224,
    98,
    27,
    207,
    224,
    210,
    249,
    127,
    201,
    178,
    196,
    175,
    179,
    18,
    131,
    31,
    154,
    114,
    190,
    15,
    70,
    82,
    12,
    191,
    111,
    50,
    49,
    111,
    21,
    146,
    118,
    223,
    60,
    242,
    75,
    14,
    171,
    162,
    201,
    190,
    130,
    194,
    244,
    110,
    248,
    98,
    179,
    222,
    209,
    2,
    142,
    206,
    13,
    34,
    60,
    126,
    36,
    66,
    1,
    174,
    94,
    226,
    70,
    30,
    119,
    130,
    123,
    146,
    176,
    230,
    177,
    34,
    153,
    134,
    140,
    242,
    227,
    38,
    203,
    66,
    202,
    70,
    246,
    82,
    22,
    102,
    68,
    226,
    63,
    6,
    121,
    50,
    69,
    166,
    62,
    130,
    108,
    198,
    3,
    83,
    251,
    150,
    129,
    227,
    210,
    246,
    188,
    51,
    168,
    86,
    251,
    131,
    129,
    54,
    198,
    147,
    93,
    22,
    116,
    35,
    116,
    118,
    73,
    243,
    14,
    214,
    14,
    67,
    39,
    182,
    51,
    16,
    39,
    6,
    209,
    160,
    14,
    102,
    236,
    112,
    116,
    198,
    171,
    192,
    93,
    166,
    150,
    208,
    129,
    134,
    36,
    96,
    168,
    230,
    25,
    176,
    210,
    70,
    94,
    0,
    251,
    38,
    99,
    209,
    108,
    118,
    225,
    97,
    69,
    22,
    220,
    177,
    63,
    182,
    155,
    1,
    22,
    214,
    166,
    17,
    202,
    246,
    20,
    161,
    227,
    150,
    41,
    113,
    153,
    54,
    110,
    193,
    176,
    86,
    83,
    150,
    159,
    39,
    112,
    38,
    182,
    71,
    77,
    246,
    204,
    231,
    10,
    70,
    229,
    135,
    55,
    86,
    57,
    167,
    133,
    230,
    16,
    199,
    184,
    54,
    106,
    103,
    255,
    134,
    67,
    7,
    194,
    87,
    212,
    87,
    64,
    231,
    253,
    55,
    125,
    55,
    135,
    151,
    58,
    135,
    174,
    247,
    7,
    151,
    114,
    215,
    181,
    39,
    91,
    183,
    136,
    247,
    33,
    23,
    207,
    71,
    8,
    119,
    242,
    20,
    8,
    199,
    16,
    164,
    33,
    167,
    45,
    116,
    91,
    7,
    106,
    196,
    114,
    103,
    87,
    212,
    174,
    71,
    229,
    100,
    135,
    39,
    216,
    180,
    253,
    135,
    159,
    4,
    212,
    231,
    162,
    213,
    67,
    183,
    32,
    101,
    106,
    215,
    29,
    181,
    16,
    119,
    90,
    5,
    57,
    23,
    103,
    21,
    229,
    55,
    213,
    165,
    204,
    87,
    232,
    117,
    182,
    247,
    175,
    197,
    159,
    151,
    146,
    219,
    232,
    21,
    233,
    107,
    193,
    117,
    212,
    187,
    187,
    213,
    147,
    11,
    146,
    181,
    174,
    27,
    78,
    149,
    28,
    171,
    103,
    245,
    33,
    123,
    29,
    85,
    102,
    203,
    52,
    53,
    91,
    26,
    163,
    101,
    217,
    170,
    138,
    5,
    228,
    122,
    240,
    165,
    163,
    202,
    217,
    197,
    158,
    218,
    5,
    229,
    44,
    106,
    44,
    133,
    17,
    186,
    86,
    37,
    86,
    10,
    127,
    69,
    107,
    89,
    127,
    245,
    137,
    233,
    86,
    149,
    180,
    57,
    44,
    53,
    243,
    137,
    5,
    85,
    206,
    153,
    217,
    117,
    124,
    41,
    240,
    21,
    65,
    249,
    138,
    181,
    6,
    73,
    163,
    213,
    59,
    152,
    52,
    133,
    185,
    40,
    29,
    229,
    132,
    248,
    103,
    69,
    195,
    72,
    78,
    37,
    254,
    88,
    146,
    5,
    76,
    232,
    187,
    101,
    113,
    56,
    193,
    197,
    54,
    136,
    232,
    165,
    11,
    223,
    199,
    212,
    40,
    111,
    238,
    180,
    21,
    191,
    148,
    20,
    82,
    15,
    189,
    116,
    111,
    31,
    97,
    84,
    221,
    175,
    72,
    52,
    224,
    127,
    50,
    148,
    167,
    207,
    27,
    244,
    154,
    30,
    140,
    164,
    24,
    174,
    165,
    196,
    37,
    126,
    223,
    100,
    98,
    206,
    246,
    4,
    95,
    222,
    42,
    36,
    237,
    110,
    3,
    68,
    208,
    190,
    121,
    228,
    151,
    14,
    80,
    132,
    170,
    93,
    80,
    52,
    72,
    237,
    121,
    84,
    117,
    61,
    3,
    244,
    50,
    141,
    42,
    148,
    15,
    157,
    246,
    180,
    189,
    45,
    223,
    212,
    128,
    253,
    165,
    116,
    199,
    77,
    140,
    20,
    250,
    156,
    27,
    68,
    120,
    44,
    50,
    36,
    69,
    252,
    72,
    132,
    2,
    76,
    97,
    228,
    63,
    92,
    189,
    196,
    141,
    236,
    148,
    164,
    176,
    60,
    238,
    4,
    247,
    140,
    199,
    100,
    202,
    0,
    0,
    0,
    0,
    165,
    211,
    92,
    203,
    11,
    161,
    200,
    77,
    174,
    114,
    148,
    134,
    22,
    66,
    145,
    155,
    179,
    145,
    205,
    80,
    29,
    227,
    89,
    214,
    184,
    48,
    5,
    29,
    109,
    130,
    83,
    236,
    200,
    81,
    15,
    39,
    102,
    35,
    155,
    161,
    195,
    240,
    199,
    106,
    123,
    192,
    194,
    119,
    222,
    19,
    158,
    188,
    112,
    97,
    10,
    58,
    213,
    178,
    86,
    241,
    155,
    2,
    214,
    3,
    62,
    209,
    138,
    200,
    144,
    163,
    30,
    78,
    53,
    112,
    66,
    133,
    141,
    64,
    71,
    152,
    40,
    147,
    27,
    83,
    134,
    225,
    143,
    213,
    35,
    50,
    211,
    30,
    246,
    128,
    133,
    239,
    83,
    83,
    217,
    36,
    253,
    33,
    77,
    162,
    88,
    242,
    17,
    105,
    224,
    194,
    20,
    116,
    69,
    17,
    72,
    191,
    235,
    99,
    220,
    57,
    78,
    176,
    128,
    242,
    54,
    5,
    172,
    7,
    147,
    214,
    240,
    204,
    61,
    164,
    100,
    74,
    152,
    119,
    56,
    129,
    32,
    71,
    61,
    156,
    133,
    148,
    97,
    87,
    43,
    230,
    245,
    209,
    142,
    53,
    169,
    26,
    91,
    135,
    255,
    235,
    254,
    84,
    163,
    32,
    80,
    38,
    55,
    166,
    245,
    245,
    107,
    109,
    77,
    197,
    110,
    112,
    232,
    22,
    50,
    187,
    70,
    100,
    166,
    61,
    227,
    183,
    250,
    246,
    173,
    7,
    122,
    4,
    8,
    212,
    38,
    207,
    166,
    166,
    178,
    73,
    3,
    117,
    238,
    130,
    187,
    69,
    235,
    159,
    30,
    150,
    183,
    84,
    176,
    228,
    35,
    210,
    21,
    55,
    127,
    25,
    192,
    133,
    41,
    232,
    101,
    86,
    117,
    35,
    203,
    36,
    225,
    165,
    110,
    247,
    189,
    110,
    214,
    199,
    184,
    115,
    115,
    20,
    228,
    184,
    221,
    102,
    112,
    62,
    120,
    181,
    44,
    245,
    108,
    10,
    88,
    15,
    201,
    217,
    4,
    196,
    103,
    171,
    144,
    66,
    194,
    120,
    204,
    137,
    122,
    72,
    201,
    148,
    223,
    155,
    149,
    95,
    113,
    233,
    1,
    217,
    212,
    58,
    93,
    18,
    1,
    136,
    11,
    227,
    164,
    91,
    87,
    40,
    10,
    41,
    195,
    174,
    175,
    250,
    159,
    101,
    23,
    202,
    154,
    120,
    178,
    25,
    198,
    179,
    28,
    107,
    82,
    53,
    185,
    184,
    14,
    254,
    247,
    8,
    142,
    12,
    82,
    219,
    210,
    199,
    252,
    169,
    70,
    65,
    89,
    122,
    26,
    138,
    225,
    74,
    31,
    151,
    68,
    153,
    67,
    92,
    234,
    235,
    215,
    218,
    79,
    56,
    139,
    17,
    154,
    138,
    221,
    224,
    63,
    89,
    129,
    43,
    145,
    43,
    21,
    173,
    52,
    248,
    73,
    102,
    140,
    200,
    76,
    123,
    41,
    27,
    16,
    176,
    135,
    105,
    132,
    54,
    34,
    186,
    216,
    253,
    90,
    15,
    244,
    8,
    255,
    220,
    168,
    195,
    81,
    174,
    60,
    69,
    244,
    125,
    96,
    142,
    76,
    77,
    101,
    147,
    233,
    158,
    57,
    88,
    71,
    236,
    173,
    222,
    226,
    63,
    241,
    21,
    55,
    141,
    167,
    228,
    146,
    94,
    251,
    47,
    60,
    44,
    111,
    169,
    153,
    255,
    51,
    98,
    33,
    207,
    54,
    127,
    132,
    28,
    106,
    180,
    42,
    110,
    254,
    50,
    143,
    189,
    162,
    249,
    193,
    13,
    34,
    11,
    100,
    222,
    126,
    192,
    202,
    172,
    234,
    70,
    111,
    127,
    182,
    141,
    215,
    79,
    179,
    144,
    114,
    156,
    239,
    91,
    220,
    238,
    123,
    221,
    121,
    61,
    39,
    22,
    172,
    143,
    113,
    231,
    9,
    92,
    45,
    44,
    167,
    46,
    185,
    170,
    2,
    253,
    229,
    97,
    186,
    205,
    224,
    124,
    31,
    30,
    188,
    183,
    177,
    108,
    40,
    49,
    20,
    191,
    116,
    250,
    216,
    20,
    176,
    30,
    125,
    199,
    236,
    213,
    211,
    181,
    120,
    83,
    118,
    102,
    36,
    152,
    206,
    86,
    33,
    133,
    107,
    133,
    125,
    78,
    197,
    247,
    233,
    200,
    96,
    36,
    181,
    3,
    181,
    150,
    227,
    242,
    16,
    69,
    191,
    57,
    190,
    55,
    43,
    191,
    27,
    228,
    119,
    116,
    163,
    212,
    114,
    105,
    6,
    7,
    46,
    162,
    168,
    117,
    186,
    36,
    13,
    166,
    230,
    239,
    67,
    22,
    102,
    29,
    230,
    197,
    58,
    214,
    72,
    183,
    174,
    80,
    237,
    100,
    242,
    155,
    85,
    84,
    247,
    134,
    240,
    135,
    171,
    77,
    94,
    245,
    63,
    203,
    251,
    38,
    99,
    0,
    46,
    148,
    53,
    241,
    139,
    71,
    105,
    58,
    37,
    53,
    253,
    188,
    128,
    230,
    161,
    119,
    56,
    214,
    164,
    106,
    157,
    5,
    248,
    161,
    51,
    119,
    108,
    39,
    150,
    164,
    48,
    236,
    238,
    17,
    28,
    25,
    75,
    194,
    64,
    210,
    229,
    176,
    212,
    84,
    64,
    99,
    136,
    159,
    248,
    83,
    141,
    130,
    93,
    128,
    209,
    73,
    243,
    242,
    69,
    207,
    86,
    33,
    25,
    4,
    131,
    147,
    79,
    245,
    38,
    64,
    19,
    62,
    136,
    50,
    135,
    184,
    45,
    225,
    219,
    115,
    149,
    209,
    222,
    110,
    48,
    2,
    130,
    165,
    158,
    112,
    22,
    35,
    59,
    163,
    74,
    232,
    117,
    19,
    202,
    26,
    208,
    192,
    150,
    209,
    126,
    178,
    2,
    87,
    219,
    97,
    94,
    156,
    99,
    81,
    91,
    129,
    198,
    130,
    7,
    74,
    104,
    240,
    147,
    204,
    205,
    35,
    207,
    7,
    24,
    145,
    153,
    246,
    189,
    66,
    197,
    61,
    19,
    48,
    81,
    187,
    182,
    227,
    13,
    112,
    14,
    211,
    8,
    109,
    171,
    0,
    84,
    166,
    5,
    114,
    192,
    32,
    160,
    161,
    156,
    235,
    180,
    30,
    232,
    17,
    17,
    205,
    180,
    218,
    191,
    191,
    32,
    92,
    26,
    108,
    124,
    151,
    162,
    92,
    121,
    138,
    7,
    143,
    37,
    65,
    169,
    253,
    177,
    199,
    12,
    46,
    237,
    12,
    217,
    156,
    187,
    253,
    124,
    79,
    231,
    54,
    210,
    61,
    115,
    176,
    119,
    238,
    47,
    123,
    207,
    222,
    42,
    102,
    106,
    13,
    118,
    173,
    196,
    127,
    226,
    43,
    97,
    172,
    190,
    224,
    47,
    28,
    62,
    18,
    138,
    207,
    98,
    217,
    36,
    189,
    246,
    95,
    129,
    110,
    170,
    148,
    57,
    94,
    175,
    137,
    156,
    141,
    243,
    66,
    50,
    255,
    103,
    196,
    151,
    44,
    59,
    15,
    66,
    158,
    109,
    254,
    231,
    77,
    49,
    53,
    73,
    63,
    165,
    179,
    236,
    236,
    249,
    120,
    84,
    220,
    252,
    101,
    241,
    15,
    160,
    174,
    95,
    125,
    52,
    40,
    250,
    174,
    104,
    227,
    130,
    27,
    68,
    22,
    39,
    200,
    24,
    221,
    137,
    186,
    140,
    91,
    44,
    105,
    208,
    144,
    148,
    89,
    213,
    141,
    49,
    138,
    137,
    70,
    159,
    248,
    29,
    192,
    58,
    43,
    65,
    11,
    239,
    153,
    23,
    250,
    74,
    74,
    75,
    49,
    228,
    56,
    223,
    183,
    65,
    235,
    131,
    124,
    249,
    219,
    134,
    97,
    92,
    8,
    218,
    170,
    242,
    122,
    78,
    44,
    87,
    169,
    18,
    231,
    25,
    25,
    146,
    21,
    188,
    202,
    206,
    222,
    18,
    184,
    90,
    88,
    183,
    107,
    6,
    147,
    15,
    91,
    3,
    142,
    170,
    136,
    95,
    69,
    4,
    250,
    203,
    195,
    161,
    41,
    151,
    8,
    116,
    155,
    193,
    249,
    209,
    72,
    157,
    50,
    127,
    58,
    9,
    180,
    218,
    233,
    85,
    127,
    98,
    217,
    80,
    98,
    199,
    10,
    12,
    169,
    105,
    120,
    152,
    47,
    204,
    171,
    196,
    228,
    0,
    0,
    0,
    0,
    180,
    11,
    119,
    166,
    41,
    17,
    159,
    151,
    157,
    26,
    232,
    49,
    19,
    36,
    79,
    244,
    167,
    47,
    56,
    82,
    58,
    53,
    208,
    99,
    142,
    62,
    167,
    197,
    103,
    78,
    239,
    51,
    211,
    69,
    152,
    149,
    78,
    95,
    112,
    164,
    250,
    84,
    7,
    2,
    116,
    106,
    160,
    199,
    192,
    97,
    215,
    97,
    93,
    123,
    63,
    80,
    233,
    112,
    72,
    246,
    206,
    156,
    222,
    103,
    122,
    151,
    169,
    193,
    231,
    141,
    65,
    240,
    83,
    134,
    54,
    86,
    221,
    184,
    145,
    147,
    105,
    179,
    230,
    53,
    244,
    169,
    14,
    4,
    64,
    162,
    121,
    162,
    169,
    210,
    49,
    84,
    29,
    217,
    70,
    242,
    128,
    195,
    174,
    195,
    52,
    200,
    217,
    101,
    186,
    246,
    126,
    160,
    14,
    253,
    9,
    6,
    147,
    231,
    225,
    55,
    39,
    236,
    150,
    145,
    156,
    57,
    189,
    207,
    40,
    50,
    202,
    105,
    181,
    40,
    34,
    88,
    1,
    35,
    85,
    254,
    143,
    29,
    242,
    59,
    59,
    22,
    133,
    157,
    166,
    12,
    109,
    172,
    18,
    7,
    26,
    10,
    251,
    119,
    82,
    252,
    79,
    124,
    37,
    90,
    210,
    102,
    205,
    107,
    102,
    109,
    186,
    205,
    232,
    83,
    29,
    8,
    92,
    88,
    106,
    174,
    193,
    66,
    130,
    159,
    117,
    73,
    245,
    57,
    82,
    165,
    99,
    168,
    230,
    174,
    20,
    14,
    123,
    180,
    252,
    63,
    207,
    191,
    139,
    153,
    65,
    129,
    44,
    92,
    245,
    138,
    91,
    250,
    104,
    144,
    179,
    203,
    220,
    155,
    196,
    109,
    53,
    235,
    140,
    155,
    129,
    224,
    251,
    61,
    28,
    250,
    19,
    12,
    168,
    241,
    100,
    170,
    38,
    207,
    195,
    111,
    146,
    196,
    180,
    201,
    15,
    222,
    92,
    248,
    187,
    213,
    43,
    94,
    121,
    117,
    11,
    68,
    205,
    126,
    124,
    226,
    80,
    100,
    148,
    211,
    228,
    111,
    227,
    117,
    106,
    81,
    68,
    176,
    222,
    90,
    51,
    22,
    67,
    64,
    219,
    39,
    247,
    75,
    172,
    129,
    30,
    59,
    228,
    119,
    170,
    48,
    147,
    209,
    55,
    42,
    123,
    224,
    131,
    33,
    12,
    70,
    13,
    31,
    171,
    131,
    185,
    20,
    220,
    37,
    36,
    14,
    52,
    20,
    144,
    5,
    67,
    178,
    183,
    233,
    213,
    35,
    3,
    226,
    162,
    133,
    158,
    248,
    74,
    180,
    42,
    243,
    61,
    18,
    164,
    205,
    154,
    215,
    16,
    198,
    237,
    113,
    141,
    220,
    5,
    64,
    57,
    215,
    114,
    230,
    208,
    167,
    58,
    16,
    100,
    172,
    77,
    182,
    249,
    182,
    165,
    135,
    77,
    189,
    210,
    33,
    195,
    131,
    117,
    228,
    119,
    136,
    2,
    66,
    234,
    146,
    234,
    115,
    94,
    153,
    157,
    213,
    229,
    76,
    182,
    139,
    81,
    71,
    193,
    45,
    204,
    93,
    41,
    28,
    120,
    86,
    94,
    186,
    246,
    104,
    249,
    127,
    66,
    99,
    142,
    217,
    223,
    121,
    102,
    232,
    107,
    114,
    17,
    78,
    130,
    2,
    89,
    184,
    54,
    9,
    46,
    30,
    171,
    19,
    198,
    47,
    31,
    24,
    177,
    137,
    145,
    38,
    22,
    76,
    37,
    45,
    97,
    234,
    184,
    55,
    137,
    219,
    12,
    60,
    254,
    125,
    43,
    208,
    104,
    236,
    159,
    219,
    31,
    74,
    2,
    193,
    247,
    123,
    182,
    202,
    128,
    221,
    56,
    244,
    39,
    24,
    140,
    255,
    80,
    190,
    17,
    229,
    184,
    143,
    165,
    238,
    207,
    41,
    76,
    158,
    135,
    223,
    248,
    149,
    240,
    121,
    101,
    143,
    24,
    72,
    209,
    132,
    111,
    238,
    95,
    186,
    200,
    43,
    235,
    177,
    191,
    141,
    118,
    171,
    87,
    188,
    194,
    160,
    32,
    26,
    242,
    234,
    22,
    136,
    70,
    225,
    97,
    46,
    219,
    251,
    137,
    31,
    111,
    240,
    254,
    185,
    225,
    206,
    89,
    124,
    85,
    197,
    46,
    218,
    200,
    223,
    198,
    235,
    124,
    212,
    177,
    77,
    149,
    164,
    249,
    187,
    33,
    175,
    142,
    29,
    188,
    181,
    102,
    44,
    8,
    190,
    17,
    138,
    134,
    128,
    182,
    79,
    50,
    139,
    193,
    233,
    175,
    145,
    41,
    216,
    27,
    154,
    94,
    126,
    60,
    118,
    200,
    239,
    136,
    125,
    191,
    73,
    21,
    103,
    87,
    120,
    161,
    108,
    32,
    222,
    47,
    82,
    135,
    27,
    155,
    89,
    240,
    189,
    6,
    67,
    24,
    140,
    178,
    72,
    111,
    42,
    91,
    56,
    39,
    220,
    239,
    51,
    80,
    122,
    114,
    41,
    184,
    75,
    198,
    34,
    207,
    237,
    72,
    28,
    104,
    40,
    252,
    23,
    31,
    142,
    97,
    13,
    247,
    191,
    213,
    6,
    128,
    25,
    110,
    211,
    171,
    71,
    218,
    216,
    220,
    225,
    71,
    194,
    52,
    208,
    243,
    201,
    67,
    118,
    125,
    247,
    228,
    179,
    201,
    252,
    147,
    21,
    84,
    230,
    123,
    36,
    224,
    237,
    12,
    130,
    9,
    157,
    68,
    116,
    189,
    150,
    51,
    210,
    32,
    140,
    219,
    227,
    148,
    135,
    172,
    69,
    26,
    185,
    11,
    128,
    174,
    178,
    124,
    38,
    51,
    168,
    148,
    23,
    135,
    163,
    227,
    177,
    160,
    79,
    117,
    32,
    20,
    68,
    2,
    134,
    137,
    94,
    234,
    183,
    61,
    85,
    157,
    17,
    179,
    107,
    58,
    212,
    7,
    96,
    77,
    114,
    154,
    122,
    165,
    67,
    46,
    113,
    210,
    229,
    199,
    1,
    154,
    19,
    115,
    10,
    237,
    181,
    238,
    16,
    5,
    132,
    90,
    27,
    114,
    34,
    212,
    37,
    213,
    231,
    96,
    46,
    162,
    65,
    253,
    52,
    74,
    112,
    73,
    63,
    61,
    214,
    139,
    159,
    29,
    204,
    63,
    148,
    106,
    106,
    162,
    142,
    130,
    91,
    22,
    133,
    245,
    253,
    152,
    187,
    82,
    56,
    44,
    176,
    37,
    158,
    177,
    170,
    205,
    175,
    5,
    161,
    186,
    9,
    236,
    209,
    242,
    255,
    88,
    218,
    133,
    89,
    197,
    192,
    109,
    104,
    113,
    203,
    26,
    206,
    255,
    245,
    189,
    11,
    75,
    254,
    202,
    173,
    214,
    228,
    34,
    156,
    98,
    239,
    85,
    58,
    69,
    3,
    195,
    171,
    241,
    8,
    180,
    13,
    108,
    18,
    92,
    60,
    216,
    25,
    43,
    154,
    86,
    39,
    140,
    95,
    226,
    44,
    251,
    249,
    127,
    54,
    19,
    200,
    203,
    61,
    100,
    110,
    34,
    77,
    44,
    152,
    150,
    70,
    91,
    62,
    11,
    92,
    179,
    15,
    191,
    87,
    196,
    169,
    49,
    105,
    99,
    108,
    133,
    98,
    20,
    202,
    24,
    120,
    252,
    251,
    172,
    115,
    139,
    93,
    23,
    166,
    160,
    3,
    163,
    173,
    215,
    165,
    62,
    183,
    63,
    148,
    138,
    188,
    72,
    50,
    4,
    130,
    239,
    247,
    176,
    137,
    152,
    81,
    45,
    147,
    112,
    96,
    153,
    152,
    7,
    198,
    112,
    232,
    79,
    48,
    196,
    227,
    56,
    150,
    89,
    249,
    208,
    167,
    237,
    242,
    167,
    1,
    99,
    204,
    0,
    196,
    215,
    199,
    119,
    98,
    74,
    221,
    159,
    83,
    254,
    214,
    232,
    245,
    217,
    58,
    126,
    100,
    109,
    49,
    9,
    194,
    240,
    43,
    225,
    243,
    68,
    32,
    150,
    85,
    202,
    30,
    49,
    144,
    126,
    21,
    70,
    54,
    227,
    15,
    174,
    7,
    87,
    4,
    217,
    161,
    190,
    116,
    145,
    87,
    10,
    127,
    230,
    241,
    151,
    101,
    14,
    192,
    35,
    110,
    121,
    102,
    173,
    80,
    222,
    163,
    25,
    91,
    169,
    5,
    132,
    65,
    65,
    52,
    48,
    74,
    54,
    146,
    0,
    0,
    0,
    0,
    158,
    0,
    170,
    204,
    125,
    7,
    37,
    66,
    227,
    7,
    143,
    142,
    250,
    14,
    74,
    132,
    100,
    14,
    224,
    72,
    135,
    9,
    111,
    198,
    25,
    9,
    197,
    10,
    181,
    27,
    229,
    211,
    43,
    27,
    79,
    31,
    200,
    28,
    192,
    145,
    86,
    28,
    106,
    93,
    79,
    21,
    175,
    87,
    209,
    21,
    5,
    155,
    50,
    18,
    138,
    21,
    172,
    18,
    32,
    217,
    43,
    49,
    187,
    124,
    181,
    49,
    17,
    176,
    86,
    54,
    158,
    62,
    200,
    54,
    52,
    242,
    209,
    63,
    241,
    248,
    79,
    63,
    91,
    52,
    172,
    56,
    212,
    186,
    50,
    56,
    126,
    118,
    158,
    42,
    94,
    175,
    0,
    42,
    244,
    99,
    227,
    45,
    123,
    237,
    125,
    45,
    209,
    33,
    100,
    36,
    20,
    43,
    250,
    36,
    190,
    231,
    25,
    35,
    49,
    105,
    135,
    35,
    155,
    165,
    86,
    98,
    118,
    249,
    200,
    98,
    220,
    53,
    43,
    101,
    83,
    187,
    181,
    101,
    249,
    119,
    172,
    108,
    60,
    125,
    50,
    108,
    150,
    177,
    209,
    107,
    25,
    63,
    79,
    107,
    179,
    243,
    227,
    121,
    147,
    42,
    125,
    121,
    57,
    230,
    158,
    126,
    182,
    104,
    0,
    126,
    28,
    164,
    25,
    119,
    217,
    174,
    135,
    119,
    115,
    98,
    100,
    112,
    252,
    236,
    250,
    112,
    86,
    32,
    125,
    83,
    205,
    133,
    227,
    83,
    103,
    73,
    0,
    84,
    232,
    199,
    158,
    84,
    66,
    11,
    135,
    93,
    135,
    1,
    25,
    93,
    45,
    205,
    250,
    90,
    162,
    67,
    100,
    90,
    8,
    143,
    200,
    72,
    40,
    86,
    86,
    72,
    130,
    154,
    181,
    79,
    13,
    20,
    43,
    79,
    167,
    216,
    50,
    70,
    98,
    210,
    172,
    70,
    200,
    30,
    79,
    65,
    71,
    144,
    209,
    65,
    237,
    92,
    237,
    194,
    157,
    41,
    115,
    194,
    55,
    229,
    144,
    197,
    184,
    107,
    14,
    197,
    18,
    167,
    23,
    204,
    215,
    173,
    137,
    204,
    125,
    97,
    106,
    203,
    242,
    239,
    244,
    203,
    88,
    35,
    88,
    217,
    120,
    250,
    198,
    217,
    210,
    54,
    37,
    222,
    93,
    184,
    187,
    222,
    247,
    116,
    162,
    215,
    50,
    126,
    60,
    215,
    152,
    178,
    223,
    208,
    23,
    60,
    65,
    208,
    189,
    240,
    198,
    243,
    38,
    85,
    88,
    243,
    140,
    153,
    187,
    244,
    3,
    23,
    37,
    244,
    169,
    219,
    60,
    253,
    108,
    209,
    162,
    253,
    198,
    29,
    65,
    250,
    73,
    147,
    223,
    250,
    227,
    95,
    115,
    232,
    195,
    134,
    237,
    232,
    105,
    74,
    14,
    239,
    230,
    196,
    144,
    239,
    76,
    8,
    137,
    230,
    137,
    2,
    23,
    230,
    35,
    206,
    244,
    225,
    172,
    64,
    106,
    225,
    6,
    140,
    187,
    160,
    235,
    208,
    37,
    160,
    65,
    28,
    198,
    167,
    206,
    146,
    88,
    167,
    100,
    94,
    65,
    174,
    161,
    84,
    223,
    174,
    11,
    152,
    60,
    169,
    132,
    22,
    162,
    169,
    46,
    218,
    14,
    187,
    14,
    3,
    144,
    187,
    164,
    207,
    115,
    188,
    43,
    65,
    237,
    188,
    129,
    141,
    244,
    181,
    68,
    135,
    106,
    181,
    238,
    75,
    137,
    178,
    97,
    197,
    23,
    178,
    203,
    9,
    144,
    145,
    80,
    172,
    14,
    145,
    250,
    96,
    237,
    150,
    117,
    238,
    115,
    150,
    223,
    34,
    106,
    159,
    26,
    40,
    244,
    159,
    176,
    228,
    23,
    152,
    63,
    106,
    137,
    152,
    149,
    166,
    37,
    138,
    181,
    127,
    187,
    138,
    31,
    179,
    88,
    141,
    144,
    61,
    198,
    141,
    58,
    241,
    223,
    132,
    255,
    251,
    65,
    132,
    85,
    55,
    162,
    131,
    218,
    185,
    60,
    131,
    112,
    117,
    218,
    133,
    59,
    83,
    68,
    133,
    145,
    159,
    167,
    130,
    30,
    17,
    57,
    130,
    180,
    221,
    32,
    139,
    113,
    215,
    190,
    139,
    219,
    27,
    93,
    140,
    84,
    149,
    195,
    140,
    254,
    89,
    111,
    158,
    222,
    128,
    241,
    158,
    116,
    76,
    18,
    153,
    251,
    194,
    140,
    153,
    81,
    14,
    149,
    144,
    148,
    4,
    11,
    144,
    62,
    200,
    232,
    151,
    177,
    70,
    118,
    151,
    27,
    138,
    241,
    180,
    128,
    47,
    111,
    180,
    42,
    227,
    140,
    179,
    165,
    109,
    18,
    179,
    15,
    161,
    11,
    186,
    202,
    171,
    149,
    186,
    96,
    103,
    118,
    189,
    239,
    233,
    232,
    189,
    69,
    37,
    68,
    175,
    101,
    252,
    218,
    175,
    207,
    48,
    57,
    168,
    64,
    190,
    167,
    168,
    234,
    114,
    190,
    161,
    47,
    120,
    32,
    161,
    133,
    180,
    195,
    166,
    10,
    58,
    93,
    166,
    160,
    246,
    140,
    231,
    77,
    170,
    18,
    231,
    231,
    102,
    241,
    224,
    104,
    232,
    111,
    224,
    194,
    36,
    118,
    233,
    7,
    46,
    232,
    233,
    173,
    226,
    11,
    238,
    34,
    108,
    149,
    238,
    136,
    160,
    57,
    252,
    168,
    121,
    167,
    252,
    2,
    181,
    68,
    251,
    141,
    59,
    218,
    251,
    39,
    247,
    195,
    242,
    226,
    253,
    93,
    242,
    72,
    49,
    190,
    245,
    199,
    191,
    32,
    245,
    109,
    115,
    167,
    214,
    246,
    214,
    57,
    214,
    92,
    26,
    218,
    209,
    211,
    148,
    68,
    209,
    121,
    88,
    93,
    216,
    188,
    82,
    195,
    216,
    22,
    158,
    32,
    223,
    153,
    16,
    190,
    223,
    51,
    220,
    18,
    205,
    19,
    5,
    140,
    205,
    185,
    201,
    111,
    202,
    54,
    71,
    241,
    202,
    156,
    139,
    232,
    195,
    89,
    129,
    118,
    195,
    243,
    77,
    149,
    196,
    124,
    195,
    11,
    196,
    214,
    15,
    55,
    71,
    166,
    122,
    169,
    71,
    12,
    182,
    74,
    64,
    131,
    56,
    212,
    64,
    41,
    244,
    205,
    73,
    236,
    254,
    83,
    73,
    70,
    50,
    176,
    78,
    201,
    188,
    46,
    78,
    99,
    112,
    130,
    92,
    67,
    169,
    28,
    92,
    233,
    101,
    255,
    91,
    102,
    235,
    97,
    91,
    204,
    39,
    120,
    82,
    9,
    45,
    230,
    82,
    163,
    225,
    5,
    85,
    44,
    111,
    155,
    85,
    134,
    163,
    28,
    118,
    29,
    6,
    130,
    118,
    183,
    202,
    97,
    113,
    56,
    68,
    255,
    113,
    146,
    136,
    230,
    120,
    87,
    130,
    120,
    120,
    253,
    78,
    155,
    127,
    114,
    192,
    5,
    127,
    216,
    12,
    169,
    109,
    248,
    213,
    55,
    109,
    82,
    25,
    212,
    106,
    221,
    151,
    74,
    106,
    119,
    91,
    83,
    99,
    178,
    81,
    205,
    99,
    24,
    157,
    46,
    100,
    151,
    19,
    176,
    100,
    61,
    223,
    97,
    37,
    208,
    131,
    255,
    37,
    122,
    79,
    28,
    34,
    245,
    193,
    130,
    34,
    95,
    13,
    155,
    43,
    154,
    7,
    5,
    43,
    48,
    203,
    230,
    44,
    191,
    69,
    120,
    44,
    21,
    137,
    212,
    62,
    53,
    80,
    74,
    62,
    159,
    156,
    169,
    57,
    16,
    18,
    55,
    57,
    186,
    222,
    46,
    48,
    127,
    212,
    176,
    48,
    213,
    24,
    83,
    55,
    90,
    150,
    205,
    55,
    240,
    90,
    74,
    20,
    107,
    255,
    212,
    20,
    193,
    51,
    55,
    19,
    78,
    189,
    169,
    19,
    228,
    113,
    176,
    26,
    33,
    123,
    46,
    26,
    139,
    183,
    205,
    29,
    4,
    57,
    83,
    29,
    174,
    245,
    255,
    15,
    142,
    44,
    97,
    15,
    36,
    224,
    130,
    8,
    171,
    110,
    28,
    8,
    1,
    162,
    5,
    1,
    196,
    168,
    155,
    1,
    110,
    100,
    120,
    6,
    225,
    234,
    230,
    6,
    75,
    38,
    0,
    0,
    0,
    0,
    67,
    20,
    123,
    23,
    134,
    40,
    246,
    46,
    197,
    60,
    141,
    57,
    12,
    81,
    236,
    93,
    79,
    69,
    151,
    74,
    138,
    121,
    26,
    115,
    201,
    109,
    97,
    100,
    24,
    162,
    216,
    187,
    91,
    182,
    163,
    172,
    158,
    138,
    46,
    149,
    221,
    158,
    85,
    130,
    20,
    243,
    52,
    230,
    87,
    231,
    79,
    241,
    146,
    219,
    194,
    200,
    209,
    207,
    185,
    223,
    113,
    66,
    192,
    172,
    50,
    86,
    187,
    187,
    247,
    106,
    54,
    130,
    180,
    126,
    77,
    149,
    125,
    19,
    44,
    241,
    62,
    7,
    87,
    230,
    251,
    59,
    218,
    223,
    184,
    47,
    161,
    200,
    105,
    224,
    24,
    23,
    42,
    244,
    99,
    0,
    239,
    200,
    238,
    57,
    172,
    220,
    149,
    46,
    101,
    177,
    244,
    74,
    38,
    165,
    143,
    93,
    227,
    153,
    2,
    100,
    160,
    141,
    121,
    115,
    163,
    130,
    241,
    130,
    224,
    150,
    138,
    149,
    37,
    170,
    7,
    172,
    102,
    190,
    124,
    187,
    175,
    211,
    29,
    223,
    236,
    199,
    102,
    200,
    41,
    251,
    235,
    241,
    106,
    239,
    144,
    230,
    187,
    32,
    41,
    57,
    248,
    52,
    82,
    46,
    61,
    8,
    223,
    23,
    126,
    28,
    164,
    0,
    183,
    113,
    197,
    100,
    244,
    101,
    190,
    115,
    49,
    89,
    51,
    74,
    114,
    77,
    72,
    93,
    210,
    192,
    49,
    46,
    145,
    212,
    74,
    57,
    84,
    232,
    199,
    0,
    23,
    252,
    188,
    23,
    222,
    145,
    221,
    115,
    157,
    133,
    166,
    100,
    88,
    185,
    43,
    93,
    27,
    173,
    80,
    74,
    202,
    98,
    233,
    149,
    137,
    118,
    146,
    130,
    76,
    74,
    31,
    187,
    15,
    94,
    100,
    172,
    198,
    51,
    5,
    200,
    133,
    39,
    126,
    223,
    64,
    27,
    243,
    230,
    3,
    15,
    136,
    241,
    7,
    3,
    146,
    222,
    68,
    23,
    233,
    201,
    129,
    43,
    100,
    240,
    194,
    63,
    31,
    231,
    11,
    82,
    126,
    131,
    72,
    70,
    5,
    148,
    141,
    122,
    136,
    173,
    206,
    110,
    243,
    186,
    31,
    161,
    74,
    101,
    92,
    181,
    49,
    114,
    153,
    137,
    188,
    75,
    218,
    157,
    199,
    92,
    19,
    240,
    166,
    56,
    80,
    228,
    221,
    47,
    149,
    216,
    80,
    22,
    214,
    204,
    43,
    1,
    118,
    65,
    82,
    114,
    53,
    85,
    41,
    101,
    240,
    105,
    164,
    92,
    179,
    125,
    223,
    75,
    122,
    16,
    190,
    47,
    57,
    4,
    197,
    56,
    252,
    56,
    72,
    1,
    191,
    44,
    51,
    22,
    110,
    227,
    138,
    201,
    45,
    247,
    241,
    222,
    232,
    203,
    124,
    231,
    171,
    223,
    7,
    240,
    98,
    178,
    102,
    148,
    33,
    166,
    29,
    131,
    228,
    154,
    144,
    186,
    167,
    142,
    235,
    173,
    164,
    129,
    99,
    92,
    231,
    149,
    24,
    75,
    34,
    169,
    149,
    114,
    97,
    189,
    238,
    101,
    168,
    208,
    143,
    1,
    235,
    196,
    244,
    22,
    46,
    248,
    121,
    47,
    109,
    236,
    2,
    56,
    188,
    35,
    187,
    231,
    255,
    55,
    192,
    240,
    58,
    11,
    77,
    201,
    121,
    31,
    54,
    222,
    176,
    114,
    87,
    186,
    243,
    102,
    44,
    173,
    54,
    90,
    161,
    148,
    117,
    78,
    218,
    131,
    213,
    195,
    163,
    240,
    150,
    215,
    216,
    231,
    83,
    235,
    85,
    222,
    16,
    255,
    46,
    201,
    217,
    146,
    79,
    173,
    154,
    134,
    52,
    186,
    95,
    186,
    185,
    131,
    28,
    174,
    194,
    148,
    205,
    97,
    123,
    75,
    142,
    117,
    0,
    92,
    75,
    73,
    141,
    101,
    8,
    93,
    246,
    114,
    193,
    48,
    151,
    22,
    130,
    36,
    236,
    1,
    71,
    24,
    97,
    56,
    4,
    12,
    26,
    47,
    79,
    0,
    85,
    102,
    12,
    20,
    46,
    113,
    201,
    40,
    163,
    72,
    138,
    60,
    216,
    95,
    67,
    81,
    185,
    59,
    0,
    69,
    194,
    44,
    197,
    121,
    79,
    21,
    134,
    109,
    52,
    2,
    87,
    162,
    141,
    221,
    20,
    182,
    246,
    202,
    209,
    138,
    123,
    243,
    146,
    158,
    0,
    228,
    91,
    243,
    97,
    128,
    24,
    231,
    26,
    151,
    221,
    219,
    151,
    174,
    158,
    207,
    236,
    185,
    62,
    66,
    149,
    202,
    125,
    86,
    238,
    221,
    184,
    106,
    99,
    228,
    251,
    126,
    24,
    243,
    50,
    19,
    121,
    151,
    113,
    7,
    2,
    128,
    180,
    59,
    143,
    185,
    247,
    47,
    244,
    174,
    38,
    224,
    77,
    113,
    101,
    244,
    54,
    102,
    160,
    200,
    187,
    95,
    227,
    220,
    192,
    72,
    42,
    177,
    161,
    44,
    105,
    165,
    218,
    59,
    172,
    153,
    87,
    2,
    239,
    141,
    44,
    21,
    236,
    130,
    164,
    228,
    175,
    150,
    223,
    243,
    106,
    170,
    82,
    202,
    41,
    190,
    41,
    221,
    224,
    211,
    72,
    185,
    163,
    199,
    51,
    174,
    102,
    251,
    190,
    151,
    37,
    239,
    197,
    128,
    244,
    32,
    124,
    95,
    183,
    52,
    7,
    72,
    114,
    8,
    138,
    113,
    49,
    28,
    241,
    102,
    248,
    113,
    144,
    2,
    187,
    101,
    235,
    21,
    126,
    89,
    102,
    44,
    61,
    77,
    29,
    59,
    157,
    192,
    100,
    72,
    222,
    212,
    31,
    95,
    27,
    232,
    146,
    102,
    88,
    252,
    233,
    113,
    145,
    145,
    136,
    21,
    210,
    133,
    243,
    2,
    23,
    185,
    126,
    59,
    84,
    173,
    5,
    44,
    133,
    98,
    188,
    243,
    198,
    118,
    199,
    228,
    3,
    74,
    74,
    221,
    64,
    94,
    49,
    202,
    137,
    51,
    80,
    174,
    202,
    39,
    43,
    185,
    15,
    27,
    166,
    128,
    76,
    15,
    221,
    151,
    72,
    3,
    199,
    184,
    11,
    23,
    188,
    175,
    206,
    43,
    49,
    150,
    141,
    63,
    74,
    129,
    68,
    82,
    43,
    229,
    7,
    70,
    80,
    242,
    194,
    122,
    221,
    203,
    129,
    110,
    166,
    220,
    80,
    161,
    31,
    3,
    19,
    181,
    100,
    20,
    214,
    137,
    233,
    45,
    149,
    157,
    146,
    58,
    92,
    240,
    243,
    94,
    31,
    228,
    136,
    73,
    218,
    216,
    5,
    112,
    153,
    204,
    126,
    103,
    57,
    65,
    7,
    20,
    122,
    85,
    124,
    3,
    191,
    105,
    241,
    58,
    252,
    125,
    138,
    45,
    53,
    16,
    235,
    73,
    118,
    4,
    144,
    94,
    179,
    56,
    29,
    103,
    240,
    44,
    102,
    112,
    33,
    227,
    223,
    175,
    98,
    247,
    164,
    184,
    167,
    203,
    41,
    129,
    228,
    223,
    82,
    150,
    45,
    178,
    51,
    242,
    110,
    166,
    72,
    229,
    171,
    154,
    197,
    220,
    232,
    142,
    190,
    203,
    235,
    129,
    54,
    58,
    168,
    149,
    77,
    45,
    109,
    169,
    192,
    20,
    46,
    189,
    187,
    3,
    231,
    208,
    218,
    103,
    164,
    196,
    161,
    112,
    97,
    248,
    44,
    73,
    34,
    236,
    87,
    94,
    243,
    35,
    238,
    129,
    176,
    55,
    149,
    150,
    117,
    11,
    24,
    175,
    54,
    31,
    99,
    184,
    255,
    114,
    2,
    220,
    188,
    102,
    121,
    203,
    121,
    90,
    244,
    242,
    58,
    78,
    143,
    229,
    154,
    195,
    246,
    150,
    217,
    215,
    141,
    129,
    28,
    235,
    0,
    184,
    95,
    255,
    123,
    175,
    150,
    146,
    26,
    203,
    213,
    134,
    97,
    220,
    16,
    186,
    236,
    229,
    83,
    174,
    151,
    242,
    130,
    97,
    46,
    45,
    193,
    117,
    85,
    58,
    4,
    73,
    216,
    3,
    71,
    93,
    163,
    20,
    142,
    48,
    194,
    112,
    205,
    36,
    185,
    103,
    8,
    24,
    52,
    94,
    75,
    12,
    79,
    73,
    0,
    0,
    0,
    0,
    62,
    107,
    194,
    239,
    61,
    208,
    245,
    4,
    3,
    187,
    55,
    235,
    122,
    160,
    235,
    9,
    68,
    203,
    41,
    230,
    71,
    112,
    30,
    13,
    121,
    27,
    220,
    226,
    244,
    64,
    215,
    19,
    202,
    43,
    21,
    252,
    201,
    144,
    34,
    23,
    247,
    251,
    224,
    248,
    142,
    224,
    60,
    26,
    176,
    139,
    254,
    245,
    179,
    48,
    201,
    30,
    141,
    91,
    11,
    241,
    232,
    129,
    174,
    39,
    214,
    234,
    108,
    200,
    213,
    81,
    91,
    35,
    235,
    58,
    153,
    204,
    146,
    33,
    69,
    46,
    172,
    74,
    135,
    193,
    175,
    241,
    176,
    42,
    145,
    154,
    114,
    197,
    28,
    193,
    121,
    52,
    34,
    170,
    187,
    219,
    33,
    17,
    140,
    48,
    31,
    122,
    78,
    223,
    102,
    97,
    146,
    61,
    88,
    10,
    80,
    210,
    91,
    177,
    103,
    57,
    101,
    218,
    165,
    214,
    208,
    3,
    93,
    79,
    238,
    104,
    159,
    160,
    237,
    211,
    168,
    75,
    211,
    184,
    106,
    164,
    170,
    163,
    182,
    70,
    148,
    200,
    116,
    169,
    151,
    115,
    67,
    66,
    169,
    24,
    129,
    173,
    36,
    67,
    138,
    92,
    26,
    40,
    72,
    179,
    25,
    147,
    127,
    88,
    39,
    248,
    189,
    183,
    94,
    227,
    97,
    85,
    96,
    136,
    163,
    186,
    99,
    51,
    148,
    81,
    93,
    88,
    86,
    190,
    56,
    130,
    243,
    104,
    6,
    233,
    49,
    135,
    5,
    82,
    6,
    108,
    59,
    57,
    196,
    131,
    66,
    34,
    24,
    97,
    124,
    73,
    218,
    142,
    127,
    242,
    237,
    101,
    65,
    153,
    47,
    138,
    204,
    194,
    36,
    123,
    242,
    169,
    230,
    148,
    241,
    18,
    209,
    127,
    207,
    121,
    19,
    144,
    182,
    98,
    207,
    114,
    136,
    9,
    13,
    157,
    139,
    178,
    58,
    118,
    181,
    217,
    248,
    153,
    160,
    7,
    186,
    158,
    158,
    108,
    120,
    113,
    157,
    215,
    79,
    154,
    163,
    188,
    141,
    117,
    218,
    167,
    81,
    151,
    228,
    204,
    147,
    120,
    231,
    119,
    164,
    147,
    217,
    28,
    102,
    124,
    84,
    71,
    109,
    141,
    106,
    44,
    175,
    98,
    105,
    151,
    152,
    137,
    87,
    252,
    90,
    102,
    46,
    231,
    134,
    132,
    16,
    140,
    68,
    107,
    19,
    55,
    115,
    128,
    45,
    92,
    177,
    111,
    72,
    134,
    20,
    185,
    118,
    237,
    214,
    86,
    117,
    86,
    225,
    189,
    75,
    61,
    35,
    82,
    50,
    38,
    255,
    176,
    12,
    77,
    61,
    95,
    15,
    246,
    10,
    180,
    49,
    157,
    200,
    91,
    188,
    198,
    195,
    170,
    130,
    173,
    1,
    69,
    129,
    22,
    54,
    174,
    191,
    125,
    244,
    65,
    198,
    102,
    40,
    163,
    248,
    13,
    234,
    76,
    251,
    182,
    221,
    167,
    197,
    221,
    31,
    72,
    112,
    4,
    231,
    209,
    78,
    111,
    37,
    62,
    77,
    212,
    18,
    213,
    115,
    191,
    208,
    58,
    10,
    164,
    12,
    216,
    52,
    207,
    206,
    55,
    55,
    116,
    249,
    220,
    9,
    31,
    59,
    51,
    132,
    68,
    48,
    194,
    186,
    47,
    242,
    45,
    185,
    148,
    197,
    198,
    135,
    255,
    7,
    41,
    254,
    228,
    219,
    203,
    192,
    143,
    25,
    36,
    195,
    52,
    46,
    207,
    253,
    95,
    236,
    32,
    152,
    133,
    73,
    246,
    166,
    238,
    139,
    25,
    165,
    85,
    188,
    242,
    155,
    62,
    126,
    29,
    226,
    37,
    162,
    255,
    220,
    78,
    96,
    16,
    223,
    245,
    87,
    251,
    225,
    158,
    149,
    20,
    108,
    197,
    158,
    229,
    82,
    174,
    92,
    10,
    81,
    21,
    107,
    225,
    111,
    126,
    169,
    14,
    22,
    101,
    117,
    236,
    40,
    14,
    183,
    3,
    43,
    181,
    128,
    232,
    21,
    222,
    66,
    7,
    1,
    9,
    5,
    230,
    63,
    98,
    199,
    9,
    60,
    217,
    240,
    226,
    2,
    178,
    50,
    13,
    123,
    169,
    238,
    239,
    69,
    194,
    44,
    0,
    70,
    121,
    27,
    235,
    120,
    18,
    217,
    4,
    245,
    73,
    210,
    245,
    203,
    34,
    16,
    26,
    200,
    153,
    39,
    241,
    246,
    242,
    229,
    30,
    143,
    233,
    57,
    252,
    177,
    130,
    251,
    19,
    178,
    57,
    204,
    248,
    140,
    82,
    14,
    23,
    233,
    136,
    171,
    193,
    215,
    227,
    105,
    46,
    212,
    88,
    94,
    197,
    234,
    51,
    156,
    42,
    147,
    40,
    64,
    200,
    173,
    67,
    130,
    39,
    174,
    248,
    181,
    204,
    144,
    147,
    119,
    35,
    29,
    200,
    124,
    210,
    35,
    163,
    190,
    61,
    32,
    24,
    137,
    214,
    30,
    115,
    75,
    57,
    103,
    104,
    151,
    219,
    89,
    3,
    85,
    52,
    90,
    184,
    98,
    223,
    100,
    211,
    160,
    48,
    209,
    10,
    88,
    169,
    239,
    97,
    154,
    70,
    236,
    218,
    173,
    173,
    210,
    177,
    111,
    66,
    171,
    170,
    179,
    160,
    149,
    193,
    113,
    79,
    150,
    122,
    70,
    164,
    168,
    17,
    132,
    75,
    37,
    74,
    143,
    186,
    27,
    33,
    77,
    85,
    24,
    154,
    122,
    190,
    38,
    241,
    184,
    81,
    95,
    234,
    100,
    179,
    97,
    129,
    166,
    92,
    98,
    58,
    145,
    183,
    92,
    81,
    83,
    88,
    57,
    139,
    246,
    142,
    7,
    224,
    52,
    97,
    4,
    91,
    3,
    138,
    58,
    48,
    193,
    101,
    67,
    43,
    29,
    135,
    125,
    64,
    223,
    104,
    126,
    251,
    232,
    131,
    64,
    144,
    42,
    108,
    205,
    203,
    33,
    157,
    243,
    160,
    227,
    114,
    240,
    27,
    212,
    153,
    206,
    112,
    22,
    118,
    183,
    107,
    202,
    148,
    137,
    0,
    8,
    123,
    138,
    187,
    63,
    144,
    180,
    208,
    253,
    127,
    161,
    14,
    191,
    120,
    159,
    101,
    125,
    151,
    156,
    222,
    74,
    124,
    162,
    181,
    136,
    147,
    219,
    174,
    84,
    113,
    229,
    197,
    150,
    158,
    230,
    126,
    161,
    117,
    216,
    21,
    99,
    154,
    85,
    78,
    104,
    107,
    107,
    37,
    170,
    132,
    104,
    158,
    157,
    111,
    86,
    245,
    95,
    128,
    47,
    238,
    131,
    98,
    17,
    133,
    65,
    141,
    18,
    62,
    118,
    102,
    44,
    85,
    180,
    137,
    73,
    143,
    17,
    95,
    119,
    228,
    211,
    176,
    116,
    95,
    228,
    91,
    74,
    52,
    38,
    180,
    51,
    47,
    250,
    86,
    13,
    68,
    56,
    185,
    14,
    255,
    15,
    82,
    48,
    148,
    205,
    189,
    189,
    207,
    198,
    76,
    131,
    164,
    4,
    163,
    128,
    31,
    51,
    72,
    190,
    116,
    241,
    167,
    199,
    111,
    45,
    69,
    249,
    4,
    239,
    170,
    250,
    191,
    216,
    65,
    196,
    212,
    26,
    174,
    113,
    13,
    226,
    55,
    79,
    102,
    32,
    216,
    76,
    221,
    23,
    51,
    114,
    182,
    213,
    220,
    11,
    173,
    9,
    62,
    53,
    198,
    203,
    209,
    54,
    125,
    252,
    58,
    8,
    22,
    62,
    213,
    133,
    77,
    53,
    36,
    187,
    38,
    247,
    203,
    184,
    157,
    192,
    32,
    134,
    246,
    2,
    207,
    255,
    237,
    222,
    45,
    193,
    134,
    28,
    194,
    194,
    61,
    43,
    41,
    252,
    86,
    233,
    198,
    153,
    140,
    76,
    16,
    167,
    231,
    142,
    255,
    164,
    92,
    185,
    20,
    154,
    55,
    123,
    251,
    227,
    44,
    167,
    25,
    221,
    71,
    101,
    246,
    222,
    252,
    82,
    29,
    224,
    151,
    144,
    242,
    109,
    204,
    155,
    3,
    83,
    167,
    89,
    236,
    80,
    28,
    110,
    7,
    110,
    119,
    172,
    232,
    23,
    108,
    112,
    10,
    41,
    7,
    178,
    229,
    42,
    188,
    133,
    14,
    20,
    215,
    71,
    225,
    0,
    0,
    0,
    0,
    192,
    223,
    142,
    193,
    193,
    185,
    108,
    88,
    1,
    102,
    226,
    153,
    130,
    115,
    217,
    176,
    66,
    172,
    87,
    113,
    67,
    202,
    181,
    232,
    131,
    21,
    59,
    41,
    69,
    225,
    195,
    186,
    133,
    62,
    77,
    123,
    132,
    88,
    175,
    226,
    68,
    135,
    33,
    35,
    199,
    146,
    26,
    10,
    7,
    77,
    148,
    203,
    6,
    43,
    118,
    82,
    198,
    244,
    248,
    147,
    203,
    196,
    246,
    174,
    11,
    27,
    120,
    111,
    10,
    125,
    154,
    246,
    202,
    162,
    20,
    55,
    73,
    183,
    47,
    30,
    137,
    104,
    161,
    223,
    136,
    14,
    67,
    70,
    72,
    209,
    205,
    135,
    142,
    37,
    53,
    20,
    78,
    250,
    187,
    213,
    79,
    156,
    89,
    76,
    143,
    67,
    215,
    141,
    12,
    86,
    236,
    164,
    204,
    137,
    98,
    101,
    205,
    239,
    128,
    252,
    13,
    48,
    14,
    61,
    215,
    143,
    156,
    134,
    23,
    80,
    18,
    71,
    22,
    54,
    240,
    222,
    214,
    233,
    126,
    31,
    85,
    252,
    69,
    54,
    149,
    35,
    203,
    247,
    148,
    69,
    41,
    110,
    84,
    154,
    167,
    175,
    146,
    110,
    95,
    60,
    82,
    177,
    209,
    253,
    83,
    215,
    51,
    100,
    147,
    8,
    189,
    165,
    16,
    29,
    134,
    140,
    208,
    194,
    8,
    77,
    209,
    164,
    234,
    212,
    17,
    123,
    100,
    21,
    28,
    75,
    106,
    40,
    220,
    148,
    228,
    233,
    221,
    242,
    6,
    112,
    29,
    45,
    136,
    177,
    158,
    56,
    179,
    152,
    94,
    231,
    61,
    89,
    95,
    129,
    223,
    192,
    159,
    94,
    81,
    1,
    89,
    170,
    169,
    146,
    153,
    117,
    39,
    83,
    152,
    19,
    197,
    202,
    88,
    204,
    75,
    11,
    219,
    217,
    112,
    34,
    27,
    6,
    254,
    227,
    26,
    96,
    28,
    122,
    218,
    191,
    146,
    187,
    239,
    25,
    72,
    214,
    47,
    198,
    198,
    23,
    46,
    160,
    36,
    142,
    238,
    127,
    170,
    79,
    109,
    106,
    145,
    102,
    173,
    181,
    31,
    167,
    172,
    211,
    253,
    62,
    108,
    12,
    115,
    255,
    170,
    248,
    139,
    108,
    106,
    39,
    5,
    173,
    107,
    65,
    231,
    52,
    171,
    158,
    105,
    245,
    40,
    139,
    82,
    220,
    232,
    84,
    220,
    29,
    233,
    50,
    62,
    132,
    41,
    237,
    176,
    69,
    36,
    221,
    190,
    120,
    228,
    2,
    48,
    185,
    229,
    100,
    210,
    32,
    37,
    187,
    92,
    225,
    166,
    174,
    103,
    200,
    102,
    113,
    233,
    9,
    103,
    23,
    11,
    144,
    167,
    200,
    133,
    81,
    97,
    60,
    125,
    194,
    161,
    227,
    243,
    3,
    160,
    133,
    17,
    154,
    96,
    90,
    159,
    91,
    227,
    79,
    164,
    114,
    35,
    144,
    42,
    179,
    34,
    246,
    200,
    42,
    226,
    41,
    70,
    235,
    56,
    150,
    212,
    80,
    248,
    73,
    90,
    145,
    249,
    47,
    184,
    8,
    57,
    240,
    54,
    201,
    186,
    229,
    13,
    224,
    122,
    58,
    131,
    33,
    123,
    92,
    97,
    184,
    187,
    131,
    239,
    121,
    125,
    119,
    23,
    234,
    189,
    168,
    153,
    43,
    188,
    206,
    123,
    178,
    124,
    17,
    245,
    115,
    255,
    4,
    206,
    90,
    63,
    219,
    64,
    155,
    62,
    189,
    162,
    2,
    254,
    98,
    44,
    195,
    243,
    82,
    34,
    254,
    51,
    141,
    172,
    63,
    50,
    235,
    78,
    166,
    242,
    52,
    192,
    103,
    113,
    33,
    251,
    78,
    177,
    254,
    117,
    143,
    176,
    152,
    151,
    22,
    112,
    71,
    25,
    215,
    182,
    179,
    225,
    68,
    118,
    108,
    111,
    133,
    119,
    10,
    141,
    28,
    183,
    213,
    3,
    221,
    52,
    192,
    56,
    244,
    244,
    31,
    182,
    53,
    245,
    121,
    84,
    172,
    53,
    166,
    218,
    109,
    159,
    53,
    225,
    119,
    95,
    234,
    111,
    182,
    94,
    140,
    141,
    47,
    158,
    83,
    3,
    238,
    29,
    70,
    56,
    199,
    221,
    153,
    182,
    6,
    220,
    255,
    84,
    159,
    28,
    32,
    218,
    94,
    218,
    212,
    34,
    205,
    26,
    11,
    172,
    12,
    27,
    109,
    78,
    149,
    219,
    178,
    192,
    84,
    88,
    167,
    251,
    125,
    152,
    120,
    117,
    188,
    153,
    30,
    151,
    37,
    89,
    193,
    25,
    228,
    84,
    241,
    23,
    217,
    148,
    46,
    153,
    24,
    149,
    72,
    123,
    129,
    85,
    151,
    245,
    64,
    214,
    130,
    206,
    105,
    22,
    93,
    64,
    168,
    23,
    59,
    162,
    49,
    215,
    228,
    44,
    240,
    17,
    16,
    212,
    99,
    209,
    207,
    90,
    162,
    208,
    169,
    184,
    59,
    16,
    118,
    54,
    250,
    147,
    99,
    13,
    211,
    83,
    188,
    131,
    18,
    82,
    218,
    97,
    139,
    146,
    5,
    239,
    74,
    72,
    186,
    125,
    241,
    136,
    101,
    243,
    48,
    137,
    3,
    17,
    169,
    73,
    220,
    159,
    104,
    202,
    201,
    164,
    65,
    10,
    22,
    42,
    128,
    11,
    112,
    200,
    25,
    203,
    175,
    70,
    216,
    13,
    91,
    190,
    75,
    205,
    132,
    48,
    138,
    204,
    226,
    210,
    19,
    12,
    61,
    92,
    210,
    143,
    40,
    103,
    251,
    79,
    247,
    233,
    58,
    78,
    145,
    11,
    163,
    142,
    78,
    133,
    98,
    131,
    126,
    139,
    95,
    67,
    161,
    5,
    158,
    66,
    199,
    231,
    7,
    130,
    24,
    105,
    198,
    1,
    13,
    82,
    239,
    193,
    210,
    220,
    46,
    192,
    180,
    62,
    183,
    0,
    107,
    176,
    118,
    198,
    159,
    72,
    229,
    6,
    64,
    198,
    36,
    7,
    38,
    36,
    189,
    199,
    249,
    170,
    124,
    68,
    236,
    145,
    85,
    132,
    51,
    31,
    148,
    133,
    85,
    253,
    13,
    69,
    138,
    115,
    204,
    112,
    44,
    169,
    161,
    176,
    243,
    39,
    96,
    177,
    149,
    197,
    249,
    113,
    74,
    75,
    56,
    242,
    95,
    112,
    17,
    50,
    128,
    254,
    208,
    51,
    230,
    28,
    73,
    243,
    57,
    146,
    136,
    53,
    205,
    106,
    27,
    245,
    18,
    228,
    218,
    244,
    116,
    6,
    67,
    52,
    171,
    136,
    130,
    183,
    190,
    179,
    171,
    119,
    97,
    61,
    106,
    118,
    7,
    223,
    243,
    182,
    216,
    81,
    50,
    187,
    232,
    95,
    15,
    123,
    55,
    209,
    206,
    122,
    81,
    51,
    87,
    186,
    142,
    189,
    150,
    57,
    155,
    134,
    191,
    249,
    68,
    8,
    126,
    248,
    34,
    234,
    231,
    56,
    253,
    100,
    38,
    254,
    9,
    156,
    181,
    62,
    214,
    18,
    116,
    63,
    176,
    240,
    237,
    255,
    111,
    126,
    44,
    124,
    122,
    69,
    5,
    188,
    165,
    203,
    196,
    189,
    195,
    41,
    93,
    125,
    28,
    167,
    156,
    167,
    163,
    53,
    39,
    103,
    124,
    187,
    230,
    102,
    26,
    89,
    127,
    166,
    197,
    215,
    190,
    37,
    208,
    236,
    151,
    229,
    15,
    98,
    86,
    228,
    105,
    128,
    207,
    36,
    182,
    14,
    14,
    226,
    66,
    246,
    157,
    34,
    157,
    120,
    92,
    35,
    251,
    154,
    197,
    227,
    36,
    20,
    4,
    96,
    49,
    47,
    45,
    160,
    238,
    161,
    236,
    161,
    136,
    67,
    117,
    97,
    87,
    205,
    180,
    108,
    103,
    195,
    137,
    172,
    184,
    77,
    72,
    173,
    222,
    175,
    209,
    109,
    1,
    33,
    16,
    238,
    20,
    26,
    57,
    46,
    203,
    148,
    248,
    47,
    173,
    118,
    97,
    239,
    114,
    248,
    160,
    41,
    134,
    0,
    51,
    233,
    89,
    142,
    242,
    232,
    63,
    108,
    107,
    40,
    224,
    226,
    170,
    171,
    245,
    217,
    131,
    107,
    42,
    87,
    66,
    106,
    76,
    181,
    219,
    170,
    147,
    59,
    26,
    0,
    0,
    0,
    0,
    111,
    76,
    165,
    155,
    159,
    158,
    59,
    236,
    240,
    210,
    158,
    119,
    127,
    59,
    6,
    3,
    16,
    119,
    163,
    152,
    224,
    165,
    61,
    239,
    143,
    233,
    152,
    116,
    254,
    118,
    12,
    6,
    145,
    58,
    169,
    157,
    97,
    232,
    55,
    234,
    14,
    164,
    146,
    113,
    129,
    77,
    10,
    5,
    238,
    1,
    175,
    158,
    30,
    211,
    49,
    233,
    113,
    159,
    148,
    114,
    252,
    237,
    24,
    12,
    147,
    161,
    189,
    151,
    99,
    115,
    35,
    224,
    12,
    63,
    134,
    123,
    131,
    214,
    30,
    15,
    236,
    154,
    187,
    148,
    28,
    72,
    37,
    227,
    115,
    4,
    128,
    120,
    2,
    155,
    20,
    10,
    109,
    215,
    177,
    145,
    157,
    5,
    47,
    230,
    242,
    73,
    138,
    125,
    125,
    160,
    18,
    9,
    18,
    236,
    183,
    146,
    226,
    62,
    41,
    229,
    141,
    114,
    140,
    126,
    248,
    219,
    49,
    24,
    151,
    151,
    148,
    131,
    103,
    69,
    10,
    244,
    8,
    9,
    175,
    111,
    135,
    224,
    55,
    27,
    232,
    172,
    146,
    128,
    24,
    126,
    12,
    247,
    119,
    50,
    169,
    108,
    6,
    173,
    61,
    30,
    105,
    225,
    152,
    133,
    153,
    51,
    6,
    242,
    246,
    127,
    163,
    105,
    121,
    150,
    59,
    29,
    22,
    218,
    158,
    134,
    230,
    8,
    0,
    241,
    137,
    68,
    165,
    106,
    4,
    54,
    41,
    20,
    107,
    122,
    140,
    143,
    155,
    168,
    18,
    248,
    244,
    228,
    183,
    99,
    123,
    13,
    47,
    23,
    20,
    65,
    138,
    140,
    228,
    147,
    20,
    251,
    139,
    223,
    177,
    96,
    250,
    64,
    37,
    18,
    149,
    12,
    128,
    137,
    101,
    222,
    30,
    254,
    10,
    146,
    187,
    101,
    133,
    123,
    35,
    17,
    234,
    55,
    134,
    138,
    26,
    229,
    24,
    253,
    117,
    169,
    189,
    102,
    240,
    183,
    99,
    48,
    159,
    251,
    198,
    171,
    111,
    41,
    88,
    220,
    0,
    101,
    253,
    71,
    143,
    140,
    101,
    51,
    224,
    192,
    192,
    168,
    16,
    18,
    94,
    223,
    127,
    94,
    251,
    68,
    14,
    193,
    111,
    54,
    97,
    141,
    202,
    173,
    145,
    95,
    84,
    218,
    254,
    19,
    241,
    65,
    113,
    250,
    105,
    53,
    30,
    182,
    204,
    174,
    238,
    100,
    82,
    217,
    129,
    40,
    247,
    66,
    12,
    90,
    123,
    60,
    99,
    22,
    222,
    167,
    147,
    196,
    64,
    208,
    252,
    136,
    229,
    75,
    115,
    97,
    125,
    63,
    28,
    45,
    216,
    164,
    236,
    255,
    70,
    211,
    131,
    179,
    227,
    72,
    242,
    44,
    119,
    58,
    157,
    96,
    210,
    161,
    109,
    178,
    76,
    214,
    2,
    254,
    233,
    77,
    141,
    23,
    113,
    57,
    226,
    91,
    212,
    162,
    18,
    137,
    74,
    213,
    125,
    197,
    239,
    78,
    8,
    108,
    82,
    40,
    103,
    32,
    247,
    179,
    151,
    242,
    105,
    196,
    248,
    190,
    204,
    95,
    119,
    87,
    84,
    43,
    24,
    27,
    241,
    176,
    232,
    201,
    111,
    199,
    135,
    133,
    202,
    92,
    246,
    26,
    94,
    46,
    153,
    86,
    251,
    181,
    105,
    132,
    101,
    194,
    6,
    200,
    192,
    89,
    137,
    33,
    88,
    45,
    230,
    109,
    253,
    182,
    22,
    191,
    99,
    193,
    121,
    243,
    198,
    90,
    244,
    129,
    74,
    36,
    155,
    205,
    239,
    191,
    107,
    31,
    113,
    200,
    4,
    83,
    212,
    83,
    139,
    186,
    76,
    39,
    228,
    246,
    233,
    188,
    20,
    36,
    119,
    203,
    123,
    104,
    210,
    80,
    10,
    247,
    70,
    34,
    101,
    187,
    227,
    185,
    149,
    105,
    125,
    206,
    250,
    37,
    216,
    85,
    117,
    204,
    64,
    33,
    26,
    128,
    229,
    186,
    234,
    82,
    123,
    205,
    133,
    30,
    222,
    86,
    224,
    111,
    199,
    96,
    143,
    35,
    98,
    251,
    127,
    241,
    252,
    140,
    16,
    189,
    89,
    23,
    159,
    84,
    193,
    99,
    240,
    24,
    100,
    248,
    0,
    202,
    250,
    143,
    111,
    134,
    95,
    20,
    30,
    25,
    203,
    102,
    113,
    85,
    110,
    253,
    129,
    135,
    240,
    138,
    238,
    203,
    85,
    17,
    97,
    34,
    205,
    101,
    14,
    110,
    104,
    254,
    254,
    188,
    246,
    137,
    145,
    240,
    83,
    18,
    28,
    130,
    223,
    108,
    115,
    206,
    122,
    247,
    131,
    28,
    228,
    128,
    236,
    80,
    65,
    27,
    99,
    185,
    217,
    111,
    12,
    245,
    124,
    244,
    252,
    39,
    226,
    131,
    147,
    107,
    71,
    24,
    226,
    244,
    211,
    106,
    141,
    184,
    118,
    241,
    125,
    106,
    232,
    134,
    18,
    38,
    77,
    29,
    157,
    207,
    213,
    105,
    242,
    131,
    112,
    242,
    2,
    81,
    238,
    133,
    109,
    29,
    75,
    30,
    24,
    180,
    246,
    120,
    119,
    248,
    83,
    227,
    135,
    42,
    205,
    148,
    232,
    102,
    104,
    15,
    103,
    143,
    240,
    123,
    8,
    195,
    85,
    224,
    248,
    17,
    203,
    151,
    151,
    93,
    110,
    12,
    230,
    194,
    250,
    126,
    137,
    142,
    95,
    229,
    121,
    92,
    193,
    146,
    22,
    16,
    100,
    9,
    153,
    249,
    252,
    125,
    246,
    181,
    89,
    230,
    6,
    103,
    199,
    145,
    105,
    43,
    98,
    10,
    228,
    89,
    238,
    116,
    139,
    21,
    75,
    239,
    123,
    199,
    213,
    152,
    20,
    139,
    112,
    3,
    155,
    98,
    232,
    119,
    244,
    46,
    77,
    236,
    4,
    252,
    211,
    155,
    107,
    176,
    118,
    0,
    26,
    47,
    226,
    114,
    117,
    99,
    71,
    233,
    133,
    177,
    217,
    158,
    234,
    253,
    124,
    5,
    101,
    20,
    228,
    113,
    10,
    88,
    65,
    234,
    250,
    138,
    223,
    157,
    149,
    198,
    122,
    6,
    16,
    216,
    164,
    80,
    127,
    148,
    1,
    203,
    143,
    70,
    159,
    188,
    224,
    10,
    58,
    39,
    111,
    227,
    162,
    83,
    0,
    175,
    7,
    200,
    240,
    125,
    153,
    191,
    159,
    49,
    60,
    36,
    238,
    174,
    168,
    86,
    129,
    226,
    13,
    205,
    113,
    48,
    147,
    186,
    30,
    124,
    54,
    33,
    145,
    149,
    174,
    85,
    254,
    217,
    11,
    206,
    14,
    11,
    149,
    185,
    97,
    71,
    48,
    34,
    236,
    53,
    188,
    92,
    131,
    121,
    25,
    199,
    115,
    171,
    135,
    176,
    28,
    231,
    34,
    43,
    147,
    14,
    186,
    95,
    252,
    66,
    31,
    196,
    12,
    144,
    129,
    179,
    99,
    220,
    36,
    40,
    18,
    67,
    176,
    90,
    125,
    15,
    21,
    193,
    141,
    221,
    139,
    182,
    226,
    145,
    46,
    45,
    109,
    120,
    182,
    89,
    2,
    52,
    19,
    194,
    242,
    230,
    141,
    181,
    157,
    170,
    40,
    46,
    232,
    3,
    149,
    72,
    135,
    79,
    48,
    211,
    119,
    157,
    174,
    164,
    24,
    209,
    11,
    63,
    151,
    56,
    147,
    75,
    248,
    116,
    54,
    208,
    8,
    166,
    168,
    167,
    103,
    234,
    13,
    60,
    22,
    117,
    153,
    78,
    121,
    57,
    60,
    213,
    137,
    235,
    162,
    162,
    230,
    167,
    7,
    57,
    105,
    78,
    159,
    77,
    6,
    2,
    58,
    214,
    246,
    208,
    164,
    161,
    153,
    156,
    1,
    58,
    20,
    238,
    141,
    68,
    123,
    162,
    40,
    223,
    139,
    112,
    182,
    168,
    228,
    60,
    19,
    51,
    107,
    213,
    139,
    71,
    4,
    153,
    46,
    220,
    244,
    75,
    176,
    171,
    155,
    7,
    21,
    48,
    234,
    152,
    129,
    66,
    133,
    212,
    36,
    217,
    117,
    6,
    186,
    174,
    26,
    74,
    31,
    53,
    149,
    163,
    135,
    65,
    250,
    239,
    34,
    218,
    10,
    61,
    188,
    173,
    101,
    113,
    25,
    54,
    0,
    0,
    0,
    0,
    133,
    217,
    150,
    221,
    75,
    181,
    92,
    96,
    206,
    108,
    202,
    189,
    150,
    106,
    185,
    192,
    19,
    179,
    47,
    29,
    221,
    223,
    229,
    160,
    88,
    6,
    115,
    125,
    109,
    211,
    3,
    90,
    232,
    10,
    149,
    135,
    38,
    102,
    95,
    58,
    163,
    191,
    201,
    231,
    251,
    185,
    186,
    154,
    126,
    96,
    44,
    71,
    176,
    12,
    230,
    250,
    53,
    213,
    112,
    39,
    218,
    166,
    7,
    180,
    95,
    127,
    145,
    105,
    145,
    19,
    91,
    212,
    20,
    202,
    205,
    9,
    76,
    204,
    190,
    116,
    201,
    21,
    40,
    169,
    7,
    121,
    226,
    20,
    130,
    160,
    116,
    201,
    183,
    117,
    4,
    238,
    50,
    172,
    146,
    51,
    252,
    192,
    88,
    142,
    121,
    25,
    206,
    83,
    33,
    31,
    189,
    46,
    164,
    198,
    43,
    243,
    106,
    170,
    225,
    78,
    239,
    115,
    119,
    147,
    245,
    75,
    126,
    179,
    112,
    146,
    232,
    110,
    190,
    254,
    34,
    211,
    59,
    39,
    180,
    14,
    99,
    33,
    199,
    115,
    230,
    248,
    81,
    174,
    40,
    148,
    155,
    19,
    173,
    77,
    13,
    206,
    152,
    152,
    125,
    233,
    29,
    65,
    235,
    52,
    211,
    45,
    33,
    137,
    86,
    244,
    183,
    84,
    14,
    242,
    196,
    41,
    139,
    43,
    82,
    244,
    69,
    71,
    152,
    73,
    192,
    158,
    14,
    148,
    47,
    237,
    121,
    7,
    170,
    52,
    239,
    218,
    100,
    88,
    37,
    103,
    225,
    129,
    179,
    186,
    185,
    135,
    192,
    199,
    60,
    94,
    86,
    26,
    242,
    50,
    156,
    167,
    119,
    235,
    10,
    122,
    66,
    62,
    122,
    93,
    199,
    231,
    236,
    128,
    9,
    139,
    38,
    61,
    140,
    82,
    176,
    224,
    212,
    84,
    195,
    157,
    81,
    141,
    85,
    64,
    159,
    225,
    159,
    253,
    26,
    56,
    9,
    32,
    171,
    145,
    141,
    189,
    46,
    72,
    27,
    96,
    224,
    36,
    209,
    221,
    101,
    253,
    71,
    0,
    61,
    251,
    52,
    125,
    184,
    34,
    162,
    160,
    118,
    78,
    104,
    29,
    243,
    151,
    254,
    192,
    198,
    66,
    142,
    231,
    67,
    155,
    24,
    58,
    141,
    247,
    210,
    135,
    8,
    46,
    68,
    90,
    80,
    40,
    55,
    39,
    213,
    241,
    161,
    250,
    27,
    157,
    107,
    71,
    158,
    68,
    253,
    154,
    113,
    55,
    138,
    9,
    244,
    238,
    28,
    212,
    58,
    130,
    214,
    105,
    191,
    91,
    64,
    180,
    231,
    93,
    51,
    201,
    98,
    132,
    165,
    20,
    172,
    232,
    111,
    169,
    41,
    49,
    249,
    116,
    28,
    228,
    137,
    83,
    153,
    61,
    31,
    142,
    87,
    81,
    213,
    51,
    210,
    136,
    67,
    238,
    138,
    142,
    48,
    147,
    15,
    87,
    166,
    78,
    193,
    59,
    108,
    243,
    68,
    226,
    250,
    46,
    94,
    218,
    243,
    14,
    219,
    3,
    101,
    211,
    21,
    111,
    175,
    110,
    144,
    182,
    57,
    179,
    200,
    176,
    74,
    206,
    77,
    105,
    220,
    19,
    131,
    5,
    22,
    174,
    6,
    220,
    128,
    115,
    51,
    9,
    240,
    84,
    182,
    208,
    102,
    137,
    120,
    188,
    172,
    52,
    253,
    101,
    58,
    233,
    165,
    99,
    73,
    148,
    32,
    186,
    223,
    73,
    238,
    214,
    21,
    244,
    107,
    15,
    131,
    41,
    132,
    124,
    244,
    186,
    1,
    165,
    98,
    103,
    207,
    201,
    168,
    218,
    74,
    16,
    62,
    7,
    18,
    22,
    77,
    122,
    151,
    207,
    219,
    167,
    89,
    163,
    17,
    26,
    220,
    122,
    135,
    199,
    233,
    175,
    247,
    224,
    108,
    118,
    97,
    61,
    162,
    26,
    171,
    128,
    39,
    195,
    61,
    93,
    127,
    197,
    78,
    32,
    250,
    28,
    216,
    253,
    52,
    112,
    18,
    64,
    177,
    169,
    132,
    157,
    23,
    37,
    106,
    160,
    146,
    252,
    252,
    125,
    92,
    144,
    54,
    192,
    217,
    73,
    160,
    29,
    129,
    79,
    211,
    96,
    4,
    150,
    69,
    189,
    202,
    250,
    143,
    0,
    79,
    35,
    25,
    221,
    122,
    246,
    105,
    250,
    255,
    47,
    255,
    39,
    49,
    67,
    53,
    154,
    180,
    154,
    163,
    71,
    236,
    156,
    208,
    58,
    105,
    69,
    70,
    231,
    167,
    41,
    140,
    90,
    34,
    240,
    26,
    135,
    205,
    131,
    109,
    20,
    72,
    90,
    251,
    201,
    134,
    54,
    49,
    116,
    3,
    239,
    167,
    169,
    91,
    233,
    212,
    212,
    222,
    48,
    66,
    9,
    16,
    92,
    136,
    180,
    149,
    133,
    30,
    105,
    160,
    80,
    110,
    78,
    37,
    137,
    248,
    147,
    235,
    229,
    50,
    46,
    110,
    60,
    164,
    243,
    54,
    58,
    215,
    142,
    179,
    227,
    65,
    83,
    125,
    143,
    139,
    238,
    248,
    86,
    29,
    51,
    226,
    110,
    20,
    19,
    103,
    183,
    130,
    206,
    169,
    219,
    72,
    115,
    44,
    2,
    222,
    174,
    116,
    4,
    173,
    211,
    241,
    221,
    59,
    14,
    63,
    177,
    241,
    179,
    186,
    104,
    103,
    110,
    143,
    189,
    23,
    73,
    10,
    100,
    129,
    148,
    196,
    8,
    75,
    41,
    65,
    209,
    221,
    244,
    25,
    215,
    174,
    137,
    156,
    14,
    56,
    84,
    82,
    98,
    242,
    233,
    215,
    187,
    100,
    52,
    56,
    200,
    19,
    167,
    189,
    17,
    133,
    122,
    115,
    125,
    79,
    199,
    246,
    164,
    217,
    26,
    174,
    162,
    170,
    103,
    43,
    123,
    60,
    186,
    229,
    23,
    246,
    7,
    96,
    206,
    96,
    218,
    85,
    27,
    16,
    253,
    208,
    194,
    134,
    32,
    30,
    174,
    76,
    157,
    155,
    119,
    218,
    64,
    195,
    113,
    169,
    61,
    70,
    168,
    63,
    224,
    136,
    196,
    245,
    93,
    13,
    29,
    99,
    128,
    188,
    180,
    231,
    29,
    57,
    109,
    113,
    192,
    247,
    1,
    187,
    125,
    114,
    216,
    45,
    160,
    42,
    222,
    94,
    221,
    175,
    7,
    200,
    0,
    97,
    107,
    2,
    189,
    228,
    178,
    148,
    96,
    209,
    103,
    228,
    71,
    84,
    190,
    114,
    154,
    154,
    210,
    184,
    39,
    31,
    11,
    46,
    250,
    71,
    13,
    93,
    135,
    194,
    212,
    203,
    90,
    12,
    184,
    1,
    231,
    137,
    97,
    151,
    58,
    102,
    18,
    224,
    169,
    227,
    203,
    118,
    116,
    45,
    167,
    188,
    201,
    168,
    126,
    42,
    20,
    240,
    120,
    89,
    105,
    117,
    161,
    207,
    180,
    187,
    205,
    5,
    9,
    62,
    20,
    147,
    212,
    11,
    193,
    227,
    243,
    142,
    24,
    117,
    46,
    64,
    116,
    191,
    147,
    197,
    173,
    41,
    78,
    157,
    171,
    90,
    51,
    24,
    114,
    204,
    238,
    214,
    30,
    6,
    83,
    83,
    199,
    144,
    142,
    73,
    255,
    153,
    174,
    204,
    38,
    15,
    115,
    2,
    74,
    197,
    206,
    135,
    147,
    83,
    19,
    223,
    149,
    32,
    110,
    90,
    76,
    182,
    179,
    148,
    32,
    124,
    14,
    17,
    249,
    234,
    211,
    36,
    44,
    154,
    244,
    161,
    245,
    12,
    41,
    111,
    153,
    198,
    148,
    234,
    64,
    80,
    73,
    178,
    70,
    35,
    52,
    55,
    159,
    181,
    233,
    249,
    243,
    127,
    84,
    124,
    42,
    233,
    137,
    147,
    89,
    158,
    26,
    22,
    128,
    8,
    199,
    216,
    236,
    194,
    122,
    93,
    53,
    84,
    167,
    5,
    51,
    39,
    218,
    128,
    234,
    177,
    7,
    78,
    134,
    123,
    186,
    203,
    95,
    237,
    103,
    254,
    138,
    157,
    64,
    123,
    83,
    11,
    157,
    181,
    63,
    193,
    32,
    48,
    230,
    87,
    253,
    104,
    224,
    36,
    128,
    237,
    57,
    178,
    93,
    35,
    85,
    120,
    224,
    166,
    140,
    238,
    61,
    0,
    0,
    0,
    0,
    118,
    225,
    15,
    157,
    173,
    196,
    110,
    225,
    219,
    37,
    97,
    124,
    27,
    143,
    172,
    25,
    109,
    110,
    163,
    132,
    182,
    75,
    194,
    248,
    192,
    170,
    205,
    101,
    54,
    30,
    89,
    51,
    64,
    255,
    86,
    174,
    155,
    218,
    55,
    210,
    237,
    59,
    56,
    79,
    45,
    145,
    245,
    42,
    91,
    112,
    250,
    183,
    128,
    85,
    155,
    203,
    246,
    180,
    148,
    86,
    108,
    60,
    178,
    102,
    26,
    221,
    189,
    251,
    193,
    248,
    220,
    135,
    183,
    25,
    211,
    26,
    119,
    179,
    30,
    127,
    1,
    82,
    17,
    226,
    218,
    119,
    112,
    158,
    172,
    150,
    127,
    3,
    90,
    34,
    235,
    85,
    44,
    195,
    228,
    200,
    247,
    230,
    133,
    180,
    129,
    7,
    138,
    41,
    65,
    173,
    71,
    76,
    55,
    76,
    72,
    209,
    236,
    105,
    41,
    173,
    154,
    136,
    38,
    48,
    216,
    120,
    100,
    205,
    174,
    153,
    107,
    80,
    117,
    188,
    10,
    44,
    3,
    93,
    5,
    177,
    195,
    247,
    200,
    212,
    181,
    22,
    199,
    73,
    110,
    51,
    166,
    53,
    24,
    210,
    169,
    168,
    238,
    102,
    61,
    254,
    152,
    135,
    50,
    99,
    67,
    162,
    83,
    31,
    53,
    67,
    92,
    130,
    245,
    233,
    145,
    231,
    131,
    8,
    158,
    122,
    88,
    45,
    255,
    6,
    46,
    204,
    240,
    155,
    180,
    68,
    214,
    171,
    194,
    165,
    217,
    54,
    25,
    128,
    184,
    74,
    111,
    97,
    183,
    215,
    175,
    203,
    122,
    178,
    217,
    42,
    117,
    47,
    2,
    15,
    20,
    83,
    116,
    238,
    27,
    206,
    130,
    90,
    143,
    152,
    244,
    187,
    128,
    5,
    47,
    158,
    225,
    121,
    89,
    127,
    238,
    228,
    153,
    213,
    35,
    129,
    239,
    52,
    44,
    28,
    52,
    17,
    77,
    96,
    66,
    240,
    66,
    253,
    241,
    247,
    185,
    65,
    135,
    22,
    182,
    220,
    92,
    51,
    215,
    160,
    42,
    210,
    216,
    61,
    234,
    120,
    21,
    88,
    156,
    153,
    26,
    197,
    71,
    188,
    123,
    185,
    49,
    93,
    116,
    36,
    199,
    233,
    224,
    114,
    177,
    8,
    239,
    239,
    106,
    45,
    142,
    147,
    28,
    204,
    129,
    14,
    220,
    102,
    76,
    107,
    170,
    135,
    67,
    246,
    113,
    162,
    34,
    138,
    7,
    67,
    45,
    23,
    157,
    203,
    11,
    39,
    235,
    42,
    4,
    186,
    48,
    15,
    101,
    198,
    70,
    238,
    106,
    91,
    134,
    68,
    167,
    62,
    240,
    165,
    168,
    163,
    43,
    128,
    201,
    223,
    93,
    97,
    198,
    66,
    171,
    213,
    82,
    20,
    221,
    52,
    93,
    137,
    6,
    17,
    60,
    245,
    112,
    240,
    51,
    104,
    176,
    90,
    254,
    13,
    198,
    187,
    241,
    144,
    29,
    158,
    144,
    236,
    107,
    127,
    159,
    113,
    41,
    143,
    221,
    140,
    95,
    110,
    210,
    17,
    132,
    75,
    179,
    109,
    242,
    170,
    188,
    240,
    50,
    0,
    113,
    149,
    68,
    225,
    126,
    8,
    159,
    196,
    31,
    116,
    233,
    37,
    16,
    233,
    31,
    145,
    132,
    191,
    105,
    112,
    139,
    34,
    178,
    85,
    234,
    94,
    196,
    180,
    229,
    195,
    4,
    30,
    40,
    166,
    114,
    255,
    39,
    59,
    169,
    218,
    70,
    71,
    223,
    59,
    73,
    218,
    69,
    179,
    111,
    234,
    51,
    82,
    96,
    119,
    232,
    119,
    1,
    11,
    158,
    150,
    14,
    150,
    94,
    60,
    195,
    243,
    40,
    221,
    204,
    110,
    243,
    248,
    173,
    18,
    133,
    25,
    162,
    143,
    115,
    173,
    54,
    217,
    5,
    76,
    57,
    68,
    222,
    105,
    88,
    56,
    168,
    136,
    87,
    165,
    104,
    34,
    154,
    192,
    30,
    195,
    149,
    93,
    197,
    230,
    244,
    33,
    179,
    7,
    251,
    188,
    226,
    239,
    115,
    131,
    148,
    14,
    124,
    30,
    79,
    43,
    29,
    98,
    57,
    202,
    18,
    255,
    249,
    96,
    223,
    154,
    143,
    129,
    208,
    7,
    84,
    164,
    177,
    123,
    34,
    69,
    190,
    230,
    212,
    241,
    42,
    176,
    162,
    16,
    37,
    45,
    121,
    53,
    68,
    81,
    15,
    212,
    75,
    204,
    207,
    126,
    134,
    169,
    185,
    159,
    137,
    52,
    98,
    186,
    232,
    72,
    20,
    91,
    231,
    213,
    142,
    211,
    193,
    229,
    248,
    50,
    206,
    120,
    35,
    23,
    175,
    4,
    85,
    246,
    160,
    153,
    149,
    92,
    109,
    252,
    227,
    189,
    98,
    97,
    56,
    152,
    3,
    29,
    78,
    121,
    12,
    128,
    184,
    205,
    152,
    214,
    206,
    44,
    151,
    75,
    21,
    9,
    246,
    55,
    99,
    232,
    249,
    170,
    163,
    66,
    52,
    207,
    213,
    163,
    59,
    82,
    14,
    134,
    90,
    46,
    120,
    103,
    85,
    179,
    58,
    151,
    23,
    78,
    76,
    118,
    24,
    211,
    151,
    83,
    121,
    175,
    225,
    178,
    118,
    50,
    33,
    24,
    187,
    87,
    87,
    249,
    180,
    202,
    140,
    220,
    213,
    182,
    250,
    61,
    218,
    43,
    12,
    137,
    78,
    125,
    122,
    104,
    65,
    224,
    161,
    77,
    32,
    156,
    215,
    172,
    47,
    1,
    23,
    6,
    226,
    100,
    97,
    231,
    237,
    249,
    186,
    194,
    140,
    133,
    204,
    35,
    131,
    24,
    86,
    171,
    165,
    40,
    32,
    74,
    170,
    181,
    251,
    111,
    203,
    201,
    141,
    142,
    196,
    84,
    77,
    36,
    9,
    49,
    59,
    197,
    6,
    172,
    224,
    224,
    103,
    208,
    150,
    1,
    104,
    77,
    96,
    181,
    252,
    27,
    22,
    84,
    243,
    134,
    205,
    113,
    146,
    250,
    187,
    144,
    157,
    103,
    123,
    58,
    80,
    2,
    13,
    219,
    95,
    159,
    214,
    254,
    62,
    227,
    160,
    31,
    49,
    126,
    19,
    24,
    202,
    194,
    101,
    249,
    197,
    95,
    190,
    220,
    164,
    35,
    200,
    61,
    171,
    190,
    8,
    151,
    102,
    219,
    126,
    118,
    105,
    70,
    165,
    83,
    8,
    58,
    211,
    178,
    7,
    167,
    37,
    6,
    147,
    241,
    83,
    231,
    156,
    108,
    136,
    194,
    253,
    16,
    254,
    35,
    242,
    141,
    62,
    137,
    63,
    232,
    72,
    104,
    48,
    117,
    147,
    77,
    81,
    9,
    229,
    172,
    94,
    148,
    127,
    36,
    120,
    164,
    9,
    197,
    119,
    57,
    210,
    224,
    22,
    69,
    164,
    1,
    25,
    216,
    100,
    171,
    212,
    189,
    18,
    74,
    219,
    32,
    201,
    111,
    186,
    92,
    191,
    142,
    181,
    193,
    73,
    58,
    33,
    151,
    63,
    219,
    46,
    10,
    228,
    254,
    79,
    118,
    146,
    31,
    64,
    235,
    82,
    181,
    141,
    142,
    36,
    84,
    130,
    19,
    255,
    113,
    227,
    111,
    137,
    144,
    236,
    242,
    203,
    96,
    174,
    15,
    189,
    129,
    161,
    146,
    102,
    164,
    192,
    238,
    16,
    69,
    207,
    115,
    208,
    239,
    2,
    22,
    166,
    14,
    13,
    139,
    125,
    43,
    108,
    247,
    11,
    202,
    99,
    106,
    253,
    126,
    247,
    60,
    139,
    159,
    248,
    161,
    80,
    186,
    153,
    221,
    38,
    91,
    150,
    64,
    230,
    241,
    91,
    37,
    144,
    16,
    84,
    184,
    75,
    53,
    53,
    196,
    61,
    212,
    58,
    89,
    167,
    92,
    28,
    105,
    209,
    189,
    19,
    244,
    10,
    152,
    114,
    136,
    124,
    121,
    125,
    21,
    188,
    211,
    176,
    112,
    202,
    50,
    191,
    237,
    17,
    23,
    222,
    145,
    103,
    246,
    209,
    12,
    145,
    66,
    69,
    90,
    231,
    163,
    74,
    199,
    60,
    134,
    43,
    187,
    74,
    103,
    36,
    38,
    138,
    205,
    233,
    67,
    252,
    44,
    230,
    222,
    39,
    9,
    135,
    162,
    81,
    232,
    136,
    63,
    0,
    0,
    0,
    0,
    232,
    219,
    251,
    185,
    145,
    177,
    134,
    168,
    121,
    106,
    125,
    17,
    99,
    101,
    124,
    138,
    139,
    190,
    135,
    51,
    242,
    212,
    250,
    34,
    26,
    15,
    1,
    155,
    135,
    204,
    137,
    207,
    111,
    23,
    114,
    118,
    22,
    125,
    15,
    103,
    254,
    166,
    244,
    222,
    228,
    169,
    245,
    69,
    12,
    114,
    14,
    252,
    117,
    24,
    115,
    237,
    157,
    195,
    136,
    84,
    79,
    159,
    98,
    68,
    167,
    68,
    153,
    253,
    222,
    46,
    228,
    236,
    54,
    245,
    31,
    85,
    44,
    250,
    30,
    206,
    196,
    33,
    229,
    119,
    189,
    75,
    152,
    102,
    85,
    144,
    99,
    223,
    200,
    83,
    235,
    139,
    32,
    136,
    16,
    50,
    89,
    226,
    109,
    35,
    177,
    57,
    150,
    154,
    171,
    54,
    151,
    1,
    67,
    237,
    108,
    184,
    58,
    135,
    17,
    169,
    210,
    92,
    234,
    16,
    158,
    62,
    197,
    136,
    118,
    229,
    62,
    49,
    15,
    143,
    67,
    32,
    231,
    84,
    184,
    153,
    253,
    91,
    185,
    2,
    21,
    128,
    66,
    187,
    108,
    234,
    63,
    170,
    132,
    49,
    196,
    19,
    25,
    242,
    76,
    71,
    241,
    41,
    183,
    254,
    136,
    67,
    202,
    239,
    96,
    152,
    49,
    86,
    122,
    151,
    48,
    205,
    146,
    76,
    203,
    116,
    235,
    38,
    182,
    101,
    3,
    253,
    77,
    220,
    209,
    161,
    167,
    204,
    57,
    122,
    92,
    117,
    64,
    16,
    33,
    100,
    168,
    203,
    218,
    221,
    178,
    196,
    219,
    70,
    90,
    31,
    32,
    255,
    35,
    117,
    93,
    238,
    203,
    174,
    166,
    87,
    86,
    109,
    46,
    3,
    190,
    182,
    213,
    186,
    199,
    220,
    168,
    171,
    47,
    7,
    83,
    18,
    53,
    8,
    82,
    137,
    221,
    211,
    169,
    48,
    164,
    185,
    212,
    33,
    76,
    98,
    47,
    152,
    125,
    123,
    251,
    202,
    149,
    160,
    0,
    115,
    236,
    202,
    125,
    98,
    4,
    17,
    134,
    219,
    30,
    30,
    135,
    64,
    246,
    197,
    124,
    249,
    143,
    175,
    1,
    232,
    103,
    116,
    250,
    81,
    250,
    183,
    114,
    5,
    18,
    108,
    137,
    188,
    107,
    6,
    244,
    173,
    131,
    221,
    15,
    20,
    153,
    210,
    14,
    143,
    113,
    9,
    245,
    54,
    8,
    99,
    136,
    39,
    224,
    184,
    115,
    158,
    50,
    228,
    153,
    142,
    218,
    63,
    98,
    55,
    163,
    85,
    31,
    38,
    75,
    142,
    228,
    159,
    81,
    129,
    229,
    4,
    185,
    90,
    30,
    189,
    192,
    48,
    99,
    172,
    40,
    235,
    152,
    21,
    181,
    40,
    16,
    65,
    93,
    243,
    235,
    248,
    36,
    153,
    150,
    233,
    204,
    66,
    109,
    80,
    214,
    77,
    108,
    203,
    62,
    150,
    151,
    114,
    71,
    252,
    234,
    99,
    175,
    39,
    17,
    218,
    227,
    69,
    62,
    66,
    11,
    158,
    197,
    251,
    114,
    244,
    184,
    234,
    154,
    47,
    67,
    83,
    128,
    32,
    66,
    200,
    104,
    251,
    185,
    113,
    17,
    145,
    196,
    96,
    249,
    74,
    63,
    217,
    100,
    137,
    183,
    141,
    140,
    82,
    76,
    52,
    245,
    56,
    49,
    37,
    29,
    227,
    202,
    156,
    7,
    236,
    203,
    7,
    239,
    55,
    48,
    190,
    150,
    93,
    77,
    175,
    126,
    134,
    182,
    22,
    172,
    218,
    92,
    6,
    68,
    1,
    167,
    191,
    61,
    107,
    218,
    174,
    213,
    176,
    33,
    23,
    207,
    191,
    32,
    140,
    39,
    100,
    219,
    53,
    94,
    14,
    166,
    36,
    182,
    213,
    93,
    157,
    43,
    22,
    213,
    201,
    195,
    205,
    46,
    112,
    186,
    167,
    83,
    97,
    82,
    124,
    168,
    216,
    72,
    115,
    169,
    67,
    160,
    168,
    82,
    250,
    217,
    194,
    47,
    235,
    49,
    25,
    212,
    82,
    187,
    240,
    135,
    78,
    83,
    43,
    124,
    247,
    42,
    65,
    1,
    230,
    194,
    154,
    250,
    95,
    216,
    149,
    251,
    196,
    48,
    78,
    0,
    125,
    73,
    36,
    125,
    108,
    161,
    255,
    134,
    213,
    60,
    60,
    14,
    129,
    212,
    231,
    245,
    56,
    173,
    141,
    136,
    41,
    69,
    86,
    115,
    144,
    95,
    89,
    114,
    11,
    183,
    130,
    137,
    178,
    206,
    232,
    244,
    163,
    38,
    51,
    15,
    26,
    244,
    111,
    229,
    10,
    28,
    180,
    30,
    179,
    101,
    222,
    99,
    162,
    141,
    5,
    152,
    27,
    151,
    10,
    153,
    128,
    127,
    209,
    98,
    57,
    6,
    187,
    31,
    40,
    238,
    96,
    228,
    145,
    115,
    163,
    108,
    197,
    155,
    120,
    151,
    124,
    226,
    18,
    234,
    109,
    10,
    201,
    17,
    212,
    16,
    198,
    16,
    79,
    248,
    29,
    235,
    246,
    129,
    119,
    150,
    231,
    105,
    172,
    109,
    94,
    37,
    206,
    66,
    198,
    205,
    21,
    185,
    127,
    180,
    127,
    196,
    110,
    92,
    164,
    63,
    215,
    70,
    171,
    62,
    76,
    174,
    112,
    197,
    245,
    215,
    26,
    184,
    228,
    63,
    193,
    67,
    93,
    162,
    2,
    203,
    9,
    74,
    217,
    48,
    176,
    51,
    179,
    77,
    161,
    219,
    104,
    182,
    24,
    193,
    103,
    183,
    131,
    41,
    188,
    76,
    58,
    80,
    214,
    49,
    43,
    184,
    13,
    202,
    146,
    106,
    81,
    32,
    130,
    130,
    138,
    219,
    59,
    251,
    224,
    166,
    42,
    19,
    59,
    93,
    147,
    9,
    52,
    92,
    8,
    225,
    239,
    167,
    177,
    152,
    133,
    218,
    160,
    112,
    94,
    33,
    25,
    237,
    157,
    169,
    77,
    5,
    70,
    82,
    244,
    124,
    44,
    47,
    229,
    148,
    247,
    212,
    92,
    142,
    248,
    213,
    199,
    102,
    35,
    46,
    126,
    31,
    73,
    83,
    111,
    247,
    146,
    168,
    214,
    198,
    139,
    124,
    132,
    46,
    80,
    135,
    61,
    87,
    58,
    250,
    44,
    191,
    225,
    1,
    149,
    165,
    238,
    0,
    14,
    77,
    53,
    251,
    183,
    52,
    95,
    134,
    166,
    220,
    132,
    125,
    31,
    65,
    71,
    245,
    75,
    169,
    156,
    14,
    242,
    208,
    246,
    115,
    227,
    56,
    45,
    136,
    90,
    34,
    34,
    137,
    193,
    202,
    249,
    114,
    120,
    179,
    147,
    15,
    105,
    91,
    72,
    244,
    208,
    137,
    20,
    30,
    192,
    97,
    207,
    229,
    121,
    24,
    165,
    152,
    104,
    240,
    126,
    99,
    209,
    234,
    113,
    98,
    74,
    2,
    170,
    153,
    243,
    123,
    192,
    228,
    226,
    147,
    27,
    31,
    91,
    14,
    216,
    151,
    15,
    230,
    3,
    108,
    182,
    159,
    105,
    17,
    167,
    119,
    178,
    234,
    30,
    109,
    189,
    235,
    133,
    133,
    102,
    16,
    60,
    252,
    12,
    109,
    45,
    20,
    215,
    150,
    148,
    88,
    181,
    185,
    12,
    176,
    110,
    66,
    181,
    201,
    4,
    63,
    164,
    33,
    223,
    196,
    29,
    59,
    208,
    197,
    134,
    211,
    11,
    62,
    63,
    170,
    97,
    67,
    46,
    66,
    186,
    184,
    151,
    223,
    121,
    48,
    195,
    55,
    162,
    203,
    122,
    78,
    200,
    182,
    107,
    166,
    19,
    77,
    210,
    188,
    28,
    76,
    73,
    84,
    199,
    183,
    240,
    45,
    173,
    202,
    225,
    197,
    118,
    49,
    88,
    23,
    42,
    219,
    72,
    255,
    241,
    32,
    241,
    134,
    155,
    93,
    224,
    110,
    64,
    166,
    89,
    116,
    79,
    167,
    194,
    156,
    148,
    92,
    123,
    229,
    254,
    33,
    106,
    13,
    37,
    218,
    211,
    144,
    230,
    82,
    135,
    120,
    61,
    169,
    62,
    1,
    87,
    212,
    47,
    233,
    140,
    47,
    150,
    243,
    131,
    46,
    13,
    27,
    88,
    213,
    180,
    98,
    50,
    168,
    165,
    138,
    233,
    83,
    28,
    0,
    0,
    0,
    0,
    145,
    145,
    104,
    174,
    99,
    37,
    160,
    135,
    242,
    180,
    200,
    41,
    135,
    76,
    49,
    212,
    22,
    221,
    89,
    122,
    228,
    105,
    145,
    83,
    117,
    248,
    249,
    253,
    79,
    159,
    19,
    115,
    222,
    14,
    123,
    221,
    44,
    186,
    179,
    244,
    189,
    43,
    219,
    90,
    200,
    211,
    34,
    167,
    89,
    66,
    74,
    9,
    171,
    246,
    130,
    32,
    58,
    103,
    234,
    142,
    158,
    62,
    39,
    230,
    15,
    175,
    79,
    72,
    253,
    27,
    135,
    97,
    108,
    138,
    239,
    207,
    25,
    114,
    22,
    50,
    136,
    227,
    126,
    156,
    122,
    87,
    182,
    181,
    235,
    198,
    222,
    27,
    209,
    161,
    52,
    149,
    64,
    48,
    92,
    59,
    178,
    132,
    148,
    18,
    35,
    21,
    252,
    188,
    86,
    237,
    5,
    65,
    199,
    124,
    109,
    239,
    53,
    200,
    165,
    198,
    164,
    89,
    205,
    104,
    125,
    123,
    63,
    23,
    236,
    234,
    87,
    185,
    30,
    94,
    159,
    144,
    143,
    207,
    247,
    62,
    250,
    55,
    14,
    195,
    107,
    166,
    102,
    109,
    153,
    18,
    174,
    68,
    8,
    131,
    198,
    234,
    50,
    228,
    44,
    100,
    163,
    117,
    68,
    202,
    81,
    193,
    140,
    227,
    192,
    80,
    228,
    77,
    181,
    168,
    29,
    176,
    36,
    57,
    117,
    30,
    214,
    141,
    189,
    55,
    71,
    28,
    213,
    153,
    227,
    69,
    24,
    241,
    114,
    212,
    112,
    95,
    128,
    96,
    184,
    118,
    17,
    241,
    208,
    216,
    100,
    9,
    41,
    37,
    245,
    152,
    65,
    139,
    7,
    44,
    137,
    162,
    150,
    189,
    225,
    12,
    172,
    218,
    11,
    130,
    61,
    75,
    99,
    44,
    207,
    255,
    171,
    5,
    94,
    110,
    195,
    171,
    43,
    150,
    58,
    86,
    186,
    7,
    82,
    248,
    72,
    179,
    154,
    209,
    217,
    34,
    242,
    127,
    250,
    246,
    126,
    46,
    107,
    103,
    22,
    128,
    153,
    211,
    222,
    169,
    8,
    66,
    182,
    7,
    125,
    186,
    79,
    250,
    236,
    43,
    39,
    84,
    30,
    159,
    239,
    125,
    143,
    14,
    135,
    211,
    181,
    105,
    109,
    93,
    36,
    248,
    5,
    243,
    214,
    76,
    205,
    218,
    71,
    221,
    165,
    116,
    50,
    37,
    92,
    137,
    163,
    180,
    52,
    39,
    81,
    0,
    252,
    14,
    192,
    145,
    148,
    160,
    100,
    200,
    89,
    200,
    245,
    89,
    49,
    102,
    7,
    237,
    249,
    79,
    150,
    124,
    145,
    225,
    227,
    132,
    104,
    28,
    114,
    21,
    0,
    178,
    128,
    161,
    200,
    155,
    17,
    48,
    160,
    53,
    43,
    87,
    74,
    187,
    186,
    198,
    34,
    21,
    72,
    114,
    234,
    60,
    217,
    227,
    130,
    146,
    172,
    27,
    123,
    111,
    61,
    138,
    19,
    193,
    207,
    62,
    219,
    232,
    94,
    175,
    179,
    70,
    135,
    141,
    65,
    57,
    22,
    28,
    41,
    151,
    228,
    168,
    225,
    190,
    117,
    57,
    137,
    16,
    0,
    193,
    112,
    237,
    145,
    80,
    24,
    67,
    99,
    228,
    208,
    106,
    242,
    117,
    184,
    196,
    200,
    18,
    82,
    74,
    89,
    131,
    58,
    228,
    171,
    55,
    242,
    205,
    58,
    166,
    154,
    99,
    79,
    94,
    99,
    158,
    222,
    207,
    11,
    48,
    44,
    123,
    195,
    25,
    189,
    234,
    171,
    183,
    25,
    179,
    102,
    223,
    136,
    34,
    14,
    113,
    122,
    150,
    198,
    88,
    235,
    7,
    174,
    246,
    158,
    255,
    87,
    11,
    15,
    110,
    63,
    165,
    253,
    218,
    247,
    140,
    108,
    75,
    159,
    34,
    86,
    44,
    117,
    172,
    199,
    189,
    29,
    2,
    53,
    9,
    213,
    43,
    164,
    152,
    189,
    133,
    209,
    96,
    68,
    120,
    64,
    241,
    44,
    214,
    178,
    69,
    228,
    255,
    35,
    212,
    140,
    81,
    244,
    237,
    253,
    92,
    101,
    124,
    149,
    242,
    151,
    200,
    93,
    219,
    6,
    89,
    53,
    117,
    115,
    161,
    204,
    136,
    226,
    48,
    164,
    38,
    16,
    132,
    108,
    15,
    129,
    21,
    4,
    161,
    187,
    114,
    238,
    47,
    42,
    227,
    134,
    129,
    216,
    87,
    78,
    168,
    73,
    198,
    38,
    6,
    60,
    62,
    223,
    251,
    173,
    175,
    183,
    85,
    95,
    27,
    127,
    124,
    206,
    138,
    23,
    210,
    106,
    211,
    218,
    186,
    251,
    66,
    178,
    20,
    9,
    246,
    122,
    61,
    152,
    103,
    18,
    147,
    237,
    159,
    235,
    110,
    124,
    14,
    131,
    192,
    142,
    186,
    75,
    233,
    31,
    43,
    35,
    71,
    37,
    76,
    201,
    201,
    180,
    221,
    161,
    103,
    70,
    105,
    105,
    78,
    215,
    248,
    1,
    224,
    162,
    0,
    248,
    29,
    51,
    145,
    144,
    179,
    193,
    37,
    88,
    154,
    80,
    180,
    48,
    52,
    137,
    150,
    194,
    75,
    24,
    7,
    170,
    229,
    234,
    179,
    98,
    204,
    123,
    34,
    10,
    98,
    14,
    218,
    243,
    159,
    159,
    75,
    155,
    49,
    109,
    255,
    83,
    24,
    252,
    110,
    59,
    182,
    198,
    9,
    209,
    56,
    87,
    152,
    185,
    150,
    165,
    44,
    113,
    191,
    52,
    189,
    25,
    17,
    65,
    69,
    224,
    236,
    208,
    212,
    136,
    66,
    34,
    96,
    64,
    107,
    179,
    241,
    40,
    197,
    23,
    168,
    229,
    173,
    134,
    57,
    141,
    3,
    116,
    141,
    69,
    42,
    229,
    28,
    45,
    132,
    144,
    228,
    212,
    121,
    1,
    117,
    188,
    215,
    243,
    193,
    116,
    254,
    98,
    80,
    28,
    80,
    88,
    55,
    246,
    222,
    201,
    166,
    158,
    112,
    59,
    18,
    86,
    89,
    170,
    131,
    62,
    247,
    223,
    123,
    199,
    10,
    78,
    234,
    175,
    164,
    188,
    94,
    103,
    141,
    45,
    207,
    15,
    35,
    14,
    27,
    131,
    114,
    159,
    138,
    235,
    220,
    109,
    62,
    35,
    245,
    252,
    175,
    75,
    91,
    137,
    87,
    178,
    166,
    24,
    198,
    218,
    8,
    234,
    114,
    18,
    33,
    123,
    227,
    122,
    143,
    65,
    132,
    144,
    1,
    208,
    21,
    248,
    175,
    34,
    161,
    48,
    134,
    179,
    48,
    88,
    40,
    198,
    200,
    161,
    213,
    87,
    89,
    201,
    123,
    165,
    237,
    1,
    82,
    52,
    124,
    105,
    252,
    144,
    37,
    164,
    148,
    1,
    180,
    204,
    58,
    243,
    0,
    4,
    19,
    98,
    145,
    108,
    189,
    23,
    105,
    149,
    64,
    134,
    248,
    253,
    238,
    116,
    76,
    53,
    199,
    229,
    221,
    93,
    105,
    223,
    186,
    183,
    231,
    78,
    43,
    223,
    73,
    188,
    159,
    23,
    96,
    45,
    14,
    127,
    206,
    88,
    246,
    134,
    51,
    201,
    103,
    238,
    157,
    59,
    211,
    38,
    180,
    170,
    66,
    78,
    26,
    115,
    96,
    188,
    101,
    226,
    241,
    212,
    203,
    16,
    69,
    28,
    226,
    129,
    212,
    116,
    76,
    244,
    44,
    141,
    177,
    101,
    189,
    229,
    31,
    151,
    9,
    45,
    54,
    6,
    152,
    69,
    152,
    60,
    255,
    175,
    22,
    173,
    110,
    199,
    184,
    95,
    218,
    15,
    145,
    206,
    75,
    103,
    63,
    187,
    179,
    158,
    194,
    42,
    34,
    246,
    108,
    216,
    150,
    62,
    69,
    73,
    7,
    86,
    235,
    237,
    94,
    155,
    131,
    124,
    207,
    243,
    45,
    142,
    123,
    59,
    4,
    31,
    234,
    83,
    170,
    106,
    18,
    170,
    87,
    251,
    131,
    194,
    249,
    9,
    55,
    10,
    208,
    152,
    166,
    98,
    126,
    162,
    193,
    136,
    240,
    51,
    80,
    224,
    94,
    193,
    228,
    40,
    119,
    80,
    117,
    64,
    217,
    37,
    141,
    185,
    36,
    180,
    28,
    209,
    138,
    70,
    168,
    25,
    163,
    215,
    57,
    113,
    13,
    43,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    44,
    0,
    0,
    0,
    45,
    0,
    0,
    0,
    46,
    0,
    0,
    0,
    43,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    47,
    0,
    0,
    0,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    79,
    112,
    116,
    105,
    111,
    110,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    32,
    96,
    78,
    111,
    110,
    101,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    0,
    68,
    94,
    16,
    0,
    0,
    0,
    0,
    0,
    117,
    110,
    101,
    120,
    112,
    101,
    99,
    116,
    101,
    100,
    32,
    101,
    110,
    100,
    32,
    111,
    102,
    32,
    102,
    105,
    108,
    101,
    111,
    116,
    104,
    101,
    114,
    32,
    111,
    115,
    32,
    101,
    114,
    114,
    111,
    114,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    105,
    110,
    116,
    101,
    114,
    114,
    117,
    112,
    116,
    101,
    100,
    119,
    114,
    105,
    116,
    101,
    32,
    122,
    101,
    114,
    111,
    116,
    105,
    109,
    101,
    100,
    32,
    111,
    117,
    116,
    105,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    100,
    97,
    116,
    97,
    105,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    105,
    110,
    112,
    117,
    116,
    32,
    112,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    119,
    111,
    117,
    108,
    100,
    32,
    98,
    108,
    111,
    99,
    107,
    101,
    110,
    116,
    105,
    116,
    121,
    32,
    97,
    108,
    114,
    101,
    97,
    100,
    121,
    32,
    101,
    120,
    105,
    115,
    116,
    115,
    98,
    114,
    111,
    107,
    101,
    110,
    32,
    112,
    105,
    112,
    101,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    110,
    111,
    116,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    105,
    110,
    32,
    117,
    115,
    101,
    110,
    111,
    116,
    32,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    97,
    98,
    111,
    114,
    116,
    101,
    100,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    115,
    101,
    116,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    102,
    117,
    115,
    101,
    100,
    112,
    101,
    114,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    32,
    100,
    101,
    110,
    105,
    101,
    100,
    101,
    110,
    116,
    105,
    116,
    121,
    32,
    110,
    111,
    116,
    32,
    102,
    111,
    117,
    110,
    100,
    32,
    40,
    111,
    115,
    32,
    101,
    114,
    114,
    111,
    114,
    32,
    41,
    0,
    0,
    0,
    68,
    94,
    16,
    0,
    0,
    0,
    0,
    0,
    177,
    95,
    16,
    0,
    11,
    0,
    0,
    0,
    188,
    95,
    16,
    0,
    1,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    112,
    97,
    110,
    105,
    99,
    107,
    105,
    110,
    103,
    46,
    114,
    115,
    216,
    95,
    16,
    0,
    28,
    0,
    0,
    0,
    235,
    1,
    0,
    0,
    31,
    0,
    0,
    0,
    216,
    95,
    16,
    0,
    28,
    0,
    0,
    0,
    236,
    1,
    0,
    0,
    30,
    0,
    0,
    0,
    48,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    49,
    0,
    0,
    0,
    50,
    0,
    0,
    0,
    43,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    51,
    0,
    0,
    0,
    52,
    0,
    0,
    0,
    53,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    54,
    0,
    0,
    0,
    43,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    55,
    0,
    0,
    0,
    85,
    110,
    101,
    120,
    112,
    101,
    99,
    116,
    101,
    100,
    69,
    111,
    102,
    79,
    116,
    104,
    101,
    114,
    73,
    110,
    116,
    101,
    114,
    114,
    117,
    112,
    116,
    101,
    100,
    87,
    114,
    105,
    116,
    101,
    90,
    101,
    114,
    111,
    84,
    105,
    109,
    101,
    100,
    79,
    117,
    116,
    73,
    110,
    118,
    97,
    108,
    105,
    100,
    68,
    97,
    116,
    97,
    73,
    110,
    118,
    97,
    108,
    105,
    100,
    73,
    110,
    112,
    117,
    116,
    87,
    111,
    117,
    108,
    100,
    66,
    108,
    111,
    99,
    107,
    65,
    108,
    114,
    101,
    97,
    100,
    121,
    69,
    120,
    105,
    115,
    116,
    115,
    66,
    114,
    111,
    107,
    101,
    110,
    80,
    105,
    112,
    101,
    65,
    100,
    100,
    114,
    78,
    111,
    116,
    65,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    65,
    100,
    100,
    114,
    73,
    110,
    85,
    115,
    101,
    78,
    111,
    116,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    65,
    98,
    111,
    114,
    116,
    101,
    100,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    82,
    101,
    115,
    101,
    116,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    82,
    101,
    102,
    117,
    115,
    101,
    100,
    80,
    101,
    114,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    68,
    101,
    110,
    105,
    101,
    100,
    78,
    111,
    116,
    70,
    111,
    117,
    110,
    100,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    102,
    117,
    108,
    56,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    57,
    0,
    0,
    0,
    58,
    0,
    0,
    0,
    59,
    0,
    0,
    0,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    92,
    97,
    16,
    0,
    75,
    0,
    0,
    0,
    90,
    1,
    0,
    0,
    19,
    0,
    0,
    0,
    56,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    60,
    0,
    0,
    0,
    97,
    32,
    102,
    111,
    114,
    109,
    97,
    116,
    116,
    105,
    110,
    103,
    32,
    116,
    114,
    97,
    105,
    116,
    32,
    105,
    109,
    112,
    108,
    101,
    109,
    101,
    110,
    116,
    97,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    116,
    117,
    114,
    110,
    101,
    100,
    32,
    97,
    110,
    32,
    101,
    114,
    114,
    111,
    114,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    97,
    108,
    108,
    111,
    99,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    46,
    114,
    115,
    0,
    251,
    97,
    16,
    0,
    24,
    0,
    0,
    0,
    66,
    2,
    0,
    0,
    28,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    97,
    108,
    108,
    111,
    99,
    47,
    115,
    114,
    99,
    47,
    114,
    97,
    119,
    95,
    118,
    101,
    99,
    46,
    114,
    115,
    99,
    97,
    112,
    97,
    99,
    105,
    116,
    121,
    32,
    111,
    118,
    101,
    114,
    102,
    108,
    111,
    119,
    0,
    0,
    0,
    36,
    98,
    16,
    0,
    28,
    0,
    0,
    0,
    24,
    2,
    0,
    0,
    5,
    0,
    0,
    0,
    96,
    46,
    46,
    0,
    101,
    98,
    16,
    0,
    2,
    0,
    0,
    0,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    79,
    112,
    116,
    105,
    111,
    110,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    32,
    96,
    78,
    111,
    110,
    101,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    58,
    32,
    0,
    0,
    0,
    100,
    98,
    16,
    0,
    0,
    0,
    0,
    0,
    155,
    98,
    16,
    0,
    2,
    0,
    0,
    0,
    67,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    68,
    0,
    0,
    0,
    105,
    110,
    100,
    101,
    120,
    32,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    98,
    111,
    117,
    110,
    100,
    115,
    58,
    32,
    116,
    104,
    101,
    32,
    108,
    101,
    110,
    32,
    105,
    115,
    32,
    32,
    98,
    117,
    116,
    32,
    116,
    104,
    101,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    105,
    115,
    32,
    0,
    0,
    192,
    98,
    16,
    0,
    32,
    0,
    0,
    0,
    224,
    98,
    16,
    0,
    18,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    47,
    98,
    117,
    105,
    108,
    100,
    101,
    114,
    115,
    46,
    114,
    115,
    67,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    69,
    0,
    0,
    0,
    70,
    0,
    0,
    0,
    71,
    0,
    0,
    0,
    32,
    32,
    32,
    32,
    4,
    99,
    16,
    0,
    32,
    0,
    0,
    0,
    50,
    0,
    0,
    0,
    33,
    0,
    0,
    0,
    4,
    99,
    16,
    0,
    32,
    0,
    0,
    0,
    51,
    0,
    0,
    0,
    18,
    0,
    0,
    0,
    32,
    123,
    10,
    44,
    10,
    44,
    32,
    32,
    123,
    32,
    125,
    32,
    125,
    40,
    10,
    40,
    44,
    41,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    47,
    110,
    117,
    109,
    46,
    114,
    115,
    0,
    0,
    0,
    114,
    99,
    16,
    0,
    27,
    0,
    0,
    0,
    101,
    0,
    0,
    0,
    20,
    0,
    0,
    0,
    48,
    120,
    48,
    48,
    48,
    49,
    48,
    50,
    48,
    51,
    48,
    52,
    48,
    53,
    48,
    54,
    48,
    55,
    48,
    56,
    48,
    57,
    49,
    48,
    49,
    49,
    49,
    50,
    49,
    51,
    49,
    52,
    49,
    53,
    49,
    54,
    49,
    55,
    49,
    56,
    49,
    57,
    50,
    48,
    50,
    49,
    50,
    50,
    50,
    51,
    50,
    52,
    50,
    53,
    50,
    54,
    50,
    55,
    50,
    56,
    50,
    57,
    51,
    48,
    51,
    49,
    51,
    50,
    51,
    51,
    51,
    52,
    51,
    53,
    51,
    54,
    51,
    55,
    51,
    56,
    51,
    57,
    52,
    48,
    52,
    49,
    52,
    50,
    52,
    51,
    52,
    52,
    52,
    53,
    52,
    54,
    52,
    55,
    52,
    56,
    52,
    57,
    53,
    48,
    53,
    49,
    53,
    50,
    53,
    51,
    53,
    52,
    53,
    53,
    53,
    54,
    53,
    55,
    53,
    56,
    53,
    57,
    54,
    48,
    54,
    49,
    54,
    50,
    54,
    51,
    54,
    52,
    54,
    53,
    54,
    54,
    54,
    55,
    54,
    56,
    54,
    57,
    55,
    48,
    55,
    49,
    55,
    50,
    55,
    51,
    55,
    52,
    55,
    53,
    55,
    54,
    55,
    55,
    55,
    56,
    55,
    57,
    56,
    48,
    56,
    49,
    56,
    50,
    56,
    51,
    56,
    52,
    56,
    53,
    56,
    54,
    56,
    55,
    56,
    56,
    56,
    57,
    57,
    48,
    57,
    49,
    57,
    50,
    57,
    51,
    57,
    52,
    57,
    53,
    57,
    54,
    57,
    55,
    57,
    56,
    57,
    57,
    0,
    0,
    67,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    72,
    0,
    0,
    0,
    73,
    0,
    0,
    0,
    74,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    132,
    100,
    16,
    0,
    27,
    0,
    0,
    0,
    16,
    8,
    0,
    0,
    30,
    0,
    0,
    0,
    132,
    100,
    16,
    0,
    27,
    0,
    0,
    0,
    23,
    8,
    0,
    0,
    22,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    115,
    108,
    105,
    99,
    101,
    47,
    109,
    101,
    109,
    99,
    104,
    114,
    46,
    114,
    115,
    192,
    100,
    16,
    0,
    32,
    0,
    0,
    0,
    90,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    114,
    97,
    110,
    103,
    101,
    32,
    115,
    116,
    97,
    114,
    116,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    32,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    114,
    97,
    110,
    103,
    101,
    32,
    102,
    111,
    114,
    32,
    115,
    108,
    105,
    99,
    101,
    32,
    111,
    102,
    32,
    108,
    101,
    110,
    103,
    116,
    104,
    32,
    240,
    100,
    16,
    0,
    18,
    0,
    0,
    0,
    2,
    101,
    16,
    0,
    34,
    0,
    0,
    0,
    114,
    97,
    110,
    103,
    101,
    32,
    101,
    110,
    100,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    52,
    101,
    16,
    0,
    16,
    0,
    0,
    0,
    2,
    101,
    16,
    0,
    34,
    0,
    0,
    0,
    115,
    108,
    105,
    99,
    101,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    115,
    116,
    97,
    114,
    116,
    115,
    32,
    97,
    116,
    32,
    32,
    98,
    117,
    116,
    32,
    101,
    110,
    100,
    115,
    32,
    97,
    116,
    32,
    0,
    84,
    101,
    16,
    0,
    22,
    0,
    0,
    0,
    106,
    101,
    16,
    0,
    13,
    0,
    0,
    0,
    91,
    46,
    46,
    46,
    93,
    98,
    121,
    116,
    101,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    32,
    105,
    115,
    32,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    98,
    111,
    117,
    110,
    100,
    115,
    32,
    111,
    102,
    32,
    96,
    0,
    0,
    141,
    101,
    16,
    0,
    11,
    0,
    0,
    0,
    152,
    101,
    16,
    0,
    22,
    0,
    0,
    0,
    100,
    98,
    16,
    0,
    1,
    0,
    0,
    0,
    98,
    101,
    103,
    105,
    110,
    32,
    60,
    61,
    32,
    101,
    110,
    100,
    32,
    40,
    32,
    60,
    61,
    32,
    41,
    32,
    119,
    104,
    101,
    110,
    32,
    115,
    108,
    105,
    99,
    105,
    110,
    103,
    32,
    96,
    0,
    0,
    200,
    101,
    16,
    0,
    14,
    0,
    0,
    0,
    214,
    101,
    16,
    0,
    4,
    0,
    0,
    0,
    218,
    101,
    16,
    0,
    16,
    0,
    0,
    0,
    100,
    98,
    16,
    0,
    1,
    0,
    0,
    0,
    32,
    105,
    115,
    32,
    110,
    111,
    116,
    32,
    97,
    32,
    99,
    104,
    97,
    114,
    32,
    98,
    111,
    117,
    110,
    100,
    97,
    114,
    121,
    59,
    32,
    105,
    116,
    32,
    105,
    115,
    32,
    105,
    110,
    115,
    105,
    100,
    101,
    32,
    32,
    40,
    98,
    121,
    116,
    101,
    115,
    32,
    41,
    32,
    111,
    102,
    32,
    96,
    141,
    101,
    16,
    0,
    11,
    0,
    0,
    0,
    12,
    102,
    16,
    0,
    38,
    0,
    0,
    0,
    50,
    102,
    16,
    0,
    8,
    0,
    0,
    0,
    58,
    102,
    16,
    0,
    6,
    0,
    0,
    0,
    100,
    98,
    16,
    0,
    1,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    117,
    110,
    105,
    99,
    111,
    100,
    101,
    47,
    112,
    114,
    105,
    110,
    116,
    97,
    98,
    108,
    101,
    46,
    114,
    115,
    0,
    0,
    0,
    104,
    102,
    16,
    0,
    37,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    28,
    0,
    0,
    0,
    104,
    102,
    16,
    0,
    37,
    0,
    0,
    0,
    26,
    0,
    0,
    0,
    54,
    0,
    0,
    0,
    0,
    1,
    3,
    5,
    5,
    6,
    6,
    3,
    7,
    6,
    8,
    8,
    9,
    17,
    10,
    28,
    11,
    25,
    12,
    20,
    13,
    16,
    14,
    13,
    15,
    4,
    16,
    3,
    18,
    18,
    19,
    9,
    22,
    1,
    23,
    5,
    24,
    2,
    25,
    3,
    26,
    7,
    28,
    2,
    29,
    1,
    31,
    22,
    32,
    3,
    43,
    3,
    44,
    2,
    45,
    11,
    46,
    1,
    48,
    3,
    49,
    2,
    50,
    1,
    167,
    2,
    169,
    2,
    170,
    4,
    171,
    8,
    250,
    2,
    251,
    5,
    253,
    4,
    254,
    3,
    255,
    9,
    173,
    120,
    121,
    139,
    141,
    162,
    48,
    87,
    88,
    139,
    140,
    144,
    28,
    29,
    221,
    14,
    15,
    75,
    76,
    251,
    252,
    46,
    47,
    63,
    92,
    93,
    95,
    181,
    226,
    132,
    141,
    142,
    145,
    146,
    169,
    177,
    186,
    187,
    197,
    198,
    201,
    202,
    222,
    228,
    229,
    255,
    0,
    4,
    17,
    18,
    41,
    49,
    52,
    55,
    58,
    59,
    61,
    73,
    74,
    93,
    132,
    142,
    146,
    169,
    177,
    180,
    186,
    187,
    198,
    202,
    206,
    207,
    228,
    229,
    0,
    4,
    13,
    14,
    17,
    18,
    41,
    49,
    52,
    58,
    59,
    69,
    70,
    73,
    74,
    94,
    100,
    101,
    132,
    145,
    155,
    157,
    201,
    206,
    207,
    13,
    17,
    41,
    69,
    73,
    87,
    100,
    101,
    141,
    145,
    169,
    180,
    186,
    187,
    197,
    201,
    223,
    228,
    229,
    240,
    13,
    17,
    69,
    73,
    100,
    101,
    128,
    132,
    178,
    188,
    190,
    191,
    213,
    215,
    240,
    241,
    131,
    133,
    139,
    164,
    166,
    190,
    191,
    197,
    199,
    206,
    207,
    218,
    219,
    72,
    152,
    189,
    205,
    198,
    206,
    207,
    73,
    78,
    79,
    87,
    89,
    94,
    95,
    137,
    142,
    143,
    177,
    182,
    183,
    191,
    193,
    198,
    199,
    215,
    17,
    22,
    23,
    91,
    92,
    246,
    247,
    254,
    255,
    128,
    13,
    109,
    113,
    222,
    223,
    14,
    15,
    31,
    110,
    111,
    28,
    29,
    95,
    125,
    126,
    174,
    175,
    187,
    188,
    250,
    22,
    23,
    30,
    31,
    70,
    71,
    78,
    79,
    88,
    90,
    92,
    94,
    126,
    127,
    181,
    197,
    212,
    213,
    220,
    240,
    241,
    245,
    114,
    115,
    143,
    116,
    117,
    150,
    47,
    95,
    38,
    46,
    47,
    167,
    175,
    183,
    191,
    199,
    207,
    215,
    223,
    154,
    64,
    151,
    152,
    48,
    143,
    31,
    192,
    193,
    206,
    255,
    78,
    79,
    90,
    91,
    7,
    8,
    15,
    16,
    39,
    47,
    238,
    239,
    110,
    111,
    55,
    61,
    63,
    66,
    69,
    144,
    145,
    254,
    255,
    83,
    103,
    117,
    200,
    201,
    208,
    209,
    216,
    217,
    231,
    254,
    255,
    0,
    32,
    95,
    34,
    130,
    223,
    4,
    130,
    68,
    8,
    27,
    4,
    6,
    17,
    129,
    172,
    14,
    128,
    171,
    53,
    40,
    11,
    128,
    224,
    3,
    25,
    8,
    1,
    4,
    47,
    4,
    52,
    4,
    7,
    3,
    1,
    7,
    6,
    7,
    17,
    10,
    80,
    15,
    18,
    7,
    85,
    7,
    3,
    4,
    28,
    10,
    9,
    3,
    8,
    3,
    7,
    3,
    2,
    3,
    3,
    3,
    12,
    4,
    5,
    3,
    11,
    6,
    1,
    14,
    21,
    5,
    58,
    3,
    17,
    7,
    6,
    5,
    16,
    7,
    87,
    7,
    2,
    7,
    21,
    13,
    80,
    4,
    67,
    3,
    45,
    3,
    1,
    4,
    17,
    6,
    15,
    12,
    58,
    4,
    29,
    37,
    95,
    32,
    109,
    4,
    106,
    37,
    128,
    200,
    5,
    130,
    176,
    3,
    26,
    6,
    130,
    253,
    3,
    89,
    7,
    21,
    11,
    23,
    9,
    20,
    12,
    20,
    12,
    106,
    6,
    10,
    6,
    26,
    6,
    89,
    7,
    43,
    5,
    70,
    10,
    44,
    4,
    12,
    4,
    1,
    3,
    49,
    11,
    44,
    4,
    26,
    6,
    11,
    3,
    128,
    172,
    6,
    10,
    6,
    33,
    63,
    76,
    4,
    45,
    3,
    116,
    8,
    60,
    3,
    15,
    3,
    60,
    7,
    56,
    8,
    43,
    5,
    130,
    255,
    17,
    24,
    8,
    47,
    17,
    45,
    3,
    32,
    16,
    33,
    15,
    128,
    140,
    4,
    130,
    151,
    25,
    11,
    21,
    136,
    148,
    5,
    47,
    5,
    59,
    7,
    2,
    14,
    24,
    9,
    128,
    179,
    45,
    116,
    12,
    128,
    214,
    26,
    12,
    5,
    128,
    255,
    5,
    128,
    223,
    12,
    238,
    13,
    3,
    132,
    141,
    3,
    55,
    9,
    129,
    92,
    20,
    128,
    184,
    8,
    128,
    203,
    42,
    56,
    3,
    10,
    6,
    56,
    8,
    70,
    8,
    12,
    6,
    116,
    11,
    30,
    3,
    90,
    4,
    89,
    9,
    128,
    131,
    24,
    28,
    10,
    22,
    9,
    76,
    4,
    128,
    138,
    6,
    171,
    164,
    12,
    23,
    4,
    49,
    161,
    4,
    129,
    218,
    38,
    7,
    12,
    5,
    5,
    128,
    165,
    17,
    129,
    109,
    16,
    120,
    40,
    42,
    6,
    76,
    4,
    128,
    141,
    4,
    128,
    190,
    3,
    27,
    3,
    15,
    13,
    0,
    6,
    1,
    1,
    3,
    1,
    4,
    2,
    8,
    8,
    9,
    2,
    10,
    5,
    11,
    2,
    14,
    4,
    16,
    1,
    17,
    2,
    18,
    5,
    19,
    17,
    20,
    1,
    21,
    2,
    23,
    2,
    25,
    13,
    28,
    5,
    29,
    8,
    36,
    1,
    106,
    3,
    107,
    2,
    188,
    2,
    209,
    2,
    212,
    12,
    213,
    9,
    214,
    2,
    215,
    2,
    218,
    1,
    224,
    5,
    225,
    2,
    232,
    2,
    238,
    32,
    240,
    4,
    248,
    2,
    249,
    2,
    250,
    2,
    251,
    1,
    12,
    39,
    59,
    62,
    78,
    79,
    143,
    158,
    158,
    159,
    6,
    7,
    9,
    54,
    61,
    62,
    86,
    243,
    208,
    209,
    4,
    20,
    24,
    54,
    55,
    86,
    87,
    127,
    170,
    174,
    175,
    189,
    53,
    224,
    18,
    135,
    137,
    142,
    158,
    4,
    13,
    14,
    17,
    18,
    41,
    49,
    52,
    58,
    69,
    70,
    73,
    74,
    78,
    79,
    100,
    101,
    92,
    182,
    183,
    27,
    28,
    7,
    8,
    10,
    11,
    20,
    23,
    54,
    57,
    58,
    168,
    169,
    216,
    217,
    9,
    55,
    144,
    145,
    168,
    7,
    10,
    59,
    62,
    102,
    105,
    143,
    146,
    111,
    95,
    238,
    239,
    90,
    98,
    154,
    155,
    39,
    40,
    85,
    157,
    160,
    161,
    163,
    164,
    167,
    168,
    173,
    186,
    188,
    196,
    6,
    11,
    12,
    21,
    29,
    58,
    63,
    69,
    81,
    166,
    167,
    204,
    205,
    160,
    7,
    25,
    26,
    34,
    37,
    62,
    63,
    197,
    198,
    4,
    32,
    35,
    37,
    38,
    40,
    51,
    56,
    58,
    72,
    74,
    76,
    80,
    83,
    85,
    86,
    88,
    90,
    92,
    94,
    96,
    99,
    101,
    102,
    107,
    115,
    120,
    125,
    127,
    138,
    164,
    170,
    175,
    176,
    192,
    208,
    174,
    175,
    121,
    204,
    110,
    111,
    147,
    94,
    34,
    123,
    5,
    3,
    4,
    45,
    3,
    102,
    3,
    1,
    47,
    46,
    128,
    130,
    29,
    3,
    49,
    15,
    28,
    4,
    36,
    9,
    30,
    5,
    43,
    5,
    68,
    4,
    14,
    42,
    128,
    170,
    6,
    36,
    4,
    36,
    4,
    40,
    8,
    52,
    11,
    1,
    128,
    144,
    129,
    55,
    9,
    22,
    10,
    8,
    128,
    152,
    57,
    3,
    99,
    8,
    9,
    48,
    22,
    5,
    33,
    3,
    27,
    5,
    1,
    64,
    56,
    4,
    75,
    5,
    47,
    4,
    10,
    7,
    9,
    7,
    64,
    32,
    39,
    4,
    12,
    9,
    54,
    3,
    58,
    5,
    26,
    7,
    4,
    12,
    7,
    80,
    73,
    55,
    51,
    13,
    51,
    7,
    46,
    8,
    10,
    129,
    38,
    82,
    78,
    40,
    8,
    42,
    86,
    28,
    20,
    23,
    9,
    78,
    4,
    30,
    15,
    67,
    14,
    25,
    7,
    10,
    6,
    72,
    8,
    39,
    9,
    117,
    11,
    63,
    65,
    42,
    6,
    59,
    5,
    10,
    6,
    81,
    6,
    1,
    5,
    16,
    3,
    5,
    128,
    139,
    98,
    30,
    72,
    8,
    10,
    128,
    166,
    94,
    34,
    69,
    11,
    10,
    6,
    13,
    19,
    57,
    7,
    10,
    54,
    44,
    4,
    16,
    128,
    192,
    60,
    100,
    83,
    12,
    72,
    9,
    10,
    70,
    69,
    27,
    72,
    8,
    83,
    29,
    57,
    129,
    7,
    70,
    10,
    29,
    3,
    71,
    73,
    55,
    3,
    14,
    8,
    10,
    6,
    57,
    7,
    10,
    129,
    54,
    25,
    128,
    183,
    1,
    15,
    50,
    13,
    131,
    155,
    102,
    117,
    11,
    128,
    196,
    138,
    188,
    132,
    47,
    143,
    209,
    130,
    71,
    161,
    185,
    130,
    57,
    7,
    42,
    4,
    2,
    96,
    38,
    10,
    70,
    10,
    40,
    5,
    19,
    130,
    176,
    91,
    101,
    75,
    4,
    57,
    7,
    17,
    64,
    5,
    11,
    2,
    14,
    151,
    248,
    8,
    132,
    214,
    42,
    9,
    162,
    247,
    129,
    31,
    49,
    3,
    17,
    4,
    8,
    129,
    140,
    137,
    4,
    107,
    5,
    13,
    3,
    9,
    7,
    16,
    147,
    96,
    128,
    246,
    10,
    115,
    8,
    110,
    23,
    70,
    128,
    154,
    20,
    12,
    87,
    9,
    25,
    128,
    135,
    129,
    71,
    3,
    133,
    66,
    15,
    21,
    133,
    80,
    43,
    128,
    213,
    45,
    3,
    26,
    4,
    2,
    129,
    112,
    58,
    5,
    1,
    133,
    0,
    128,
    215,
    41,
    76,
    4,
    10,
    4,
    2,
    131,
    17,
    68,
    76,
    61,
    128,
    194,
    60,
    6,
    1,
    4,
    85,
    5,
    27,
    52,
    2,
    129,
    14,
    44,
    4,
    100,
    12,
    86,
    10,
    128,
    174,
    56,
    29,
    13,
    44,
    4,
    9,
    7,
    2,
    14,
    6,
    128,
    154,
    131,
    216,
    8,
    13,
    3,
    13,
    3,
    116,
    12,
    89,
    7,
    12,
    20,
    12,
    4,
    56,
    8,
    10,
    6,
    40,
    8,
    34,
    78,
    129,
    84,
    12,
    21,
    3,
    3,
    5,
    7,
    9,
    25,
    7,
    7,
    9,
    3,
    13,
    7,
    41,
    128,
    203,
    37,
    10,
    132,
    6,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    117,
    110,
    105,
    99,
    111,
    100,
    101,
    47,
    117,
    110,
    105,
    99,
    111,
    100,
    101,
    95,
    100,
    97,
    116,
    97,
    46,
    114,
    115,
    0,
    247,
    107,
    16,
    0,
    40,
    0,
    0,
    0,
    75,
    0,
    0,
    0,
    40,
    0,
    0,
    0,
    247,
    107,
    16,
    0,
    40,
    0,
    0,
    0,
    87,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    247,
    107,
    16,
    0,
    40,
    0,
    0,
    0,
    82,
    0,
    0,
    0,
    62,
    0,
    0,
    0,
    69,
    114,
    114,
    111,
    114,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    131,
    4,
    32,
    0,
    145,
    5,
    96,
    0,
    93,
    19,
    160,
    0,
    18,
    23,
    160,
    30,
    12,
    32,
    224,
    30,
    239,
    44,
    32,
    43,
    42,
    48,
    160,
    43,
    111,
    166,
    96,
    44,
    2,
    168,
    224,
    44,
    30,
    251,
    224,
    45,
    0,
    254,
    160,
    53,
    158,
    255,
    224,
    53,
    253,
    1,
    97,
    54,
    1,
    10,
    161,
    54,
    36,
    13,
    97,
    55,
    171,
    14,
    225,
    56,
    47,
    24,
    33,
    57,
    48,
    28,
    97,
    70,
    243,
    30,
    161,
    74,
    240,
    106,
    97,
    78,
    79,
    111,
    161,
    78,
    157,
    188,
    33,
    79,
    101,
    209,
    225,
    79,
    0,
    218,
    33,
    80,
    0,
    224,
    225,
    81,
    48,
    225,
    97,
    83,
    236,
    226,
    161,
    84,
    208,
    232,
    225,
    84,
    32,
    0,
    46,
    85,
    240,
    1,
    191,
    85,
    0,
    112,
    0,
    7,
    0,
    45,
    1,
    1,
    1,
    2,
    1,
    2,
    1,
    1,
    72,
    11,
    48,
    21,
    16,
    1,
    101,
    7,
    2,
    6,
    2,
    2,
    1,
    4,
    35,
    1,
    30,
    27,
    91,
    11,
    58,
    9,
    9,
    1,
    24,
    4,
    1,
    9,
    1,
    3,
    1,
    5,
    43,
    3,
    119,
    15,
    1,
    32,
    55,
    1,
    1,
    1,
    4,
    8,
    4,
    1,
    3,
    7,
    10,
    2,
    29,
    1,
    58,
    1,
    1,
    1,
    2,
    4,
    8,
    1,
    9,
    1,
    10,
    2,
    26,
    1,
    2,
    2,
    57,
    1,
    4,
    2,
    4,
    2,
    2,
    3,
    3,
    1,
    30,
    2,
    3,
    1,
    11,
    2,
    57,
    1,
    4,
    5,
    1,
    2,
    4,
    1,
    20,
    2,
    22,
    6,
    1,
    1,
    58,
    1,
    1,
    2,
    1,
    4,
    8,
    1,
    7,
    3,
    10,
    2,
    30,
    1,
    59,
    1,
    1,
    1,
    12,
    1,
    9,
    1,
    40,
    1,
    3,
    1,
    57,
    3,
    5,
    3,
    1,
    4,
    7,
    2,
    11,
    2,
    29,
    1,
    58,
    1,
    2,
    1,
    2,
    1,
    3,
    1,
    5,
    2,
    7,
    2,
    11,
    2,
    28,
    2,
    57,
    2,
    1,
    1,
    2,
    4,
    8,
    1,
    9,
    1,
    10,
    2,
    29,
    1,
    72,
    1,
    4,
    1,
    2,
    3,
    1,
    1,
    8,
    1,
    81,
    1,
    2,
    7,
    12,
    8,
    98,
    1,
    2,
    9,
    11,
    6,
    74,
    2,
    27,
    1,
    1,
    1,
    1,
    1,
    55,
    14,
    1,
    5,
    1,
    2,
    5,
    11,
    1,
    36,
    9,
    1,
    102,
    4,
    1,
    6,
    1,
    2,
    2,
    2,
    25,
    2,
    4,
    3,
    16,
    4,
    13,
    1,
    2,
    2,
    6,
    1,
    15,
    1,
    0,
    3,
    0,
    3,
    29,
    3,
    29,
    2,
    30,
    2,
    64,
    2,
    1,
    7,
    8,
    1,
    2,
    11,
    9,
    1,
    45,
    3,
    119,
    2,
    34,
    1,
    118,
    3,
    4,
    2,
    9,
    1,
    6,
    3,
    219,
    2,
    2,
    1,
    58,
    1,
    1,
    7,
    1,
    1,
    1,
    1,
    2,
    8,
    6,
    10,
    2,
    1,
    48,
    17,
    63,
    4,
    48,
    7,
    1,
    1,
    5,
    1,
    40,
    9,
    12,
    2,
    32,
    4,
    2,
    2,
    1,
    3,
    56,
    1,
    1,
    2,
    3,
    1,
    1,
    3,
    58,
    8,
    2,
    2,
    152,
    3,
    1,
    13,
    1,
    7,
    4,
    1,
    6,
    1,
    3,
    2,
    198,
    58,
    1,
    5,
    0,
    1,
    195,
    33,
    0,
    3,
    141,
    1,
    96,
    32,
    0,
    6,
    105,
    2,
    0,
    4,
    1,
    10,
    32,
    2,
    80,
    2,
    0,
    1,
    3,
    1,
    4,
    1,
    25,
    2,
    5,
    1,
    151,
    2,
    26,
    18,
    13,
    1,
    38,
    8,
    25,
    11,
    46,
    3,
    48,
    1,
    2,
    4,
    2,
    2,
    39,
    1,
    67,
    6,
    2,
    2,
    2,
    2,
    12,
    1,
    8,
    1,
    47,
    1,
    51,
    1,
    1,
    3,
    2,
    2,
    5,
    2,
    1,
    1,
    42,
    2,
    8,
    1,
    238,
    1,
    2,
    1,
    4,
    1,
    0,
    1,
    0,
    16,
    16,
    16,
    0,
    2,
    0,
    1,
    226,
    1,
    149,
    5,
    0,
    3,
    1,
    2,
    5,
    4,
    40,
    3,
    4,
    1,
    165,
    2,
    0,
    4,
    0,
    2,
    153,
    11,
    176,
    1,
    54,
    15,
    56,
    3,
    49,
    4,
    2,
    2,
    69,
    3,
    36,
    5,
    1,
    8,
    62,
    1,
    12,
    2,
    52,
    9,
    10,
    4,
    2,
    1,
    95,
    3,
    2,
    1,
    1,
    2,
    6,
    1,
    160,
    1,
    3,
    8,
    21,
    2,
    57,
    2,
    1,
    1,
    1,
    1,
    22,
    1,
    14,
    7,
    3,
    5,
    195,
    8,
    2,
    3,
    1,
    1,
    23,
    1,
    81,
    1,
    2,
    6,
    1,
    1,
    2,
    1,
    1,
    2,
    1,
    2,
    235,
    1,
    2,
    4,
    6,
    2,
    1,
    2,
    27,
    2,
    85,
    8,
    2,
    1,
    1,
    2,
    106,
    1,
    1,
    1,
    2,
    6,
    1,
    1,
    101,
    3,
    2,
    4,
    1,
    5,
    0,
    9,
    1,
    2,
    245,
    1,
    10,
    2,
    1,
    1,
    4,
    1,
    144,
    4,
    2,
    2,
    4,
    1,
    32,
    10,
    40,
    6,
    2,
    4,
    8,
    1,
    9,
    6,
    2,
    3,
    46,
    13,
    1,
    2,
    0,
    7,
    1,
    6,
    1,
    1,
    82,
    22,
    2,
    7,
    1,
    2,
    1,
    2,
    122,
    6,
    3,
    1,
    1,
    2,
    1,
    7,
    1,
    1,
    72,
    2,
    3,
    1,
    1,
    1,
    0,
    2,
    0,
    5,
    59,
    7,
    0,
    1,
    63,
    4,
    81,
    1,
    0,
    2,
    0,
    1,
    1,
    3,
    4,
    5,
    8,
    8,
    2,
    7,
    30,
    4,
    148,
    3,
    0,
    55,
    4,
    50,
    8,
    1,
    14,
    1,
    22,
    5,
    1,
    15,
    0,
    7,
    1,
    17,
    2,
    7,
    1,
    2,
    1,
    5,
    0,
    7,
    0,
    4,
    0,
    7,
    109,
    7,
    0,
    96,
    128,
    240,
    0,
    123,
    9,
    112,
    114,
    111,
    100,
    117,
    99,
    101,
    114,
    115,
    2,
    8,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    1,
    4,
    82,
    117,
    115,
    116,
    0,
    12,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    101,
    100,
    45,
    98,
    121,
    3,
    5,
    114,
    117,
    115,
    116,
    99,
    29,
    49,
    46,
    53,
    49,
    46,
    48,
    32,
    40,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    32,
    50,
    48,
    50,
    49,
    45,
    48,
    51,
    45,
    50,
    51,
    41,
    6,
    119,
    97,
    108,
    114,
    117,
    115,
    6,
    48,
    46,
    49,
    56,
    46,
    48,
    12,
    119,
    97,
    115,
    109,
    45,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    18,
    48,
    46,
    50,
    46,
    55,
    51,
    32,
    40,
    51,
    99,
    101,
    102,
    101,
    50,
    99,
    56,
    50,
    41
]);
await init1(wasm1);
function encodePacket(packet) {
    let visit = (value)=>{
        if (value === null) {
            bb.write8(0);
        } else if (typeof value === "boolean") {
            bb.write8(1);
            bb.write8(+value);
        } else if (typeof value === "number") {
            bb.write8(2);
            bb.write32(value | 0);
        } else if (typeof value === "string") {
            bb.write8(3);
            bb.write(encodeUTF8(value));
        } else if (value instanceof Uint8Array) {
            bb.write8(4);
            bb.write(value);
        } else if (value instanceof Array) {
            bb.write8(5);
            bb.write32(value.length);
            for (let item of value){
                visit(item);
            }
        } else {
            let keys = Object.keys(value);
            bb.write8(6);
            bb.write32(keys.length);
            for (let key of keys){
                bb.write(encodeUTF8(key));
                visit(value[key]);
            }
        }
    };
    let bb = new ByteBuffer();
    bb.write32(0);
    bb.write32(packet.id << 1 | +!packet.isRequest);
    visit(packet.value);
    writeUInt32LE(bb.buf, bb.len - 4, 0);
    return bb.buf.subarray(0, bb.len);
}
function decodePacket(bytes) {
    let visit = ()=>{
        switch(bb.read8()){
            case 0:
                return null;
            case 1:
                return !!bb.read8();
            case 2:
                return bb.read32();
            case 3:
                return decodeUTF8(bb.read());
            case 4:
                return bb.read();
            case 5:
                {
                    let count = bb.read32();
                    let value2 = [];
                    for(let i46 = 0; i46 < count; i46++){
                        value2.push(visit());
                    }
                    return value2;
                }
            case 6:
                {
                    let count = bb.read32();
                    let value2 = {};
                    for(let i47 = 0; i47 < count; i47++){
                        value2[decodeUTF8(bb.read())] = visit();
                    }
                    return value2;
                }
            default:
                throw new Error("Invalid packet");
        }
    };
    let bb = new ByteBuffer(bytes);
    let id = bb.read32();
    let isRequest = (id & 1) === 0;
    id >>>= 1;
    let value = visit();
    if (bb.ptr !== bytes.length) {
        throw new Error("Invalid packet");
    }
    return {
        id,
        isRequest,
        value
    };
}
var ByteBuffer = class {
    constructor(buf = new Uint8Array(1024)){
        this.buf = buf;
        this.len = 0;
        this.ptr = 0;
    }
    _write(delta) {
        if (this.len + delta > this.buf.length) {
            let clone = new Uint8Array((this.len + delta) * 2);
            clone.set(this.buf);
            this.buf = clone;
        }
        this.len += delta;
        return this.len - delta;
    }
    write8(value) {
        let offset = this._write(1);
        this.buf[offset] = value;
    }
    write32(value) {
        let offset = this._write(4);
        writeUInt32LE(this.buf, value, offset);
    }
    write(bytes) {
        let offset = this._write(4 + bytes.length);
        writeUInt32LE(this.buf, bytes.length, offset);
        this.buf.set(bytes, offset + 4);
    }
    _read(delta) {
        if (this.ptr + delta > this.buf.length) {
            throw new Error("Invalid packet");
        }
        this.ptr += delta;
        return this.ptr - delta;
    }
    read8() {
        return this.buf[this._read(1)];
    }
    read32() {
        return readUInt32LE(this.buf, this._read(4));
    }
    read() {
        let length = this.read32();
        let bytes = new Uint8Array(length);
        let ptr = this._read(bytes.length);
        bytes.set(this.buf.subarray(ptr, ptr + length));
        return bytes;
    }
};
var encodeUTF8;
var decodeUTF8;
if (typeof TextEncoder !== "undefined" && typeof TextDecoder !== "undefined") {
    let encoder = new TextEncoder();
    let decoder = new TextDecoder();
    encodeUTF8 = (text)=>encoder.encode(text)
    ;
    decodeUTF8 = (bytes)=>decoder.decode(bytes)
    ;
} else if (typeof Buffer !== "undefined") {
    encodeUTF8 = (text)=>{
        let buffer = Buffer.from(text);
        if (!(buffer instanceof Uint8Array)) {
            buffer = new Uint8Array(buffer);
        }
        return buffer;
    };
    decodeUTF8 = (bytes)=>{
        let { buffer , byteOffset , byteLength: byteLength1  } = bytes;
        return Buffer.from(buffer, byteOffset, byteLength1).toString();
    };
} else {
    throw new Error("No UTF-8 codec found");
}
function readUInt32LE(buffer, offset) {
    return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;
}
function writeUInt32LE(buffer, value, offset) {
    buffer[offset++] = value;
    buffer[offset++] = value >> 8;
    buffer[offset++] = value >> 16;
    buffer[offset++] = value >> 24;
}
function validateTarget(target) {
    target += "";
    if (target.indexOf(",") >= 0) throw new Error(`Invalid target: ${target}`);
    return target;
}
var canBeAnything = ()=>null
;
var mustBeBoolean = (value)=>typeof value === "boolean" ? null : "a boolean"
;
var mustBeBooleanOrObject = (value)=>typeof value === "boolean" || typeof value === "object" && !Array.isArray(value) ? null : "a boolean or an object"
;
var mustBeString = (value)=>typeof value === "string" ? null : "a string"
;
var mustBeRegExp = (value)=>value instanceof RegExp ? null : "a RegExp object"
;
var mustBeInteger = (value)=>typeof value === "number" && value === (value | 0) ? null : "an integer"
;
var mustBeFunction = (value)=>typeof value === "function" ? null : "a function"
;
var mustBeArray = (value)=>Array.isArray(value) ? null : "an array"
;
var mustBeObject = (value)=>typeof value === "object" && value !== null && !Array.isArray(value) ? null : "an object"
;
var mustBeArrayOrRecord = (value)=>typeof value === "object" && value !== null ? null : "an array or an object"
;
var mustBeObjectOrNull = (value)=>typeof value === "object" && !Array.isArray(value) ? null : "an object or null"
;
var mustBeStringOrBoolean = (value)=>typeof value === "string" || typeof value === "boolean" ? null : "a string or a boolean"
;
var mustBeStringOrObject = (value)=>typeof value === "string" || typeof value === "object" && value !== null && !Array.isArray(value) ? null : "a string or an object"
;
var mustBeStringOrArray = (value)=>typeof value === "string" || Array.isArray(value) ? null : "a string or an array"
;
var mustBeStringOrUint8Array = (value)=>typeof value === "string" || value instanceof Uint8Array ? null : "a string or a Uint8Array"
;
function getFlag(object, keys, key, mustBeFn) {
    let value = object[key];
    keys[key + ""] = true;
    if (value === void 0) return void 0;
    let mustBe = mustBeFn(value);
    if (mustBe !== null) throw new Error(`"${key}" must be ${mustBe}`);
    return value;
}
function checkForInvalidFlags(object, keys, where) {
    for(let key in object){
        if (!(key in keys)) {
            throw new Error(`Invalid option ${where}: "${key}"`);
        }
    }
}
function validateInitializeOptions(options) {
    let keys = Object.create(null);
    let wasmURL = getFlag(options, keys, "wasmURL", mustBeString);
    let worker = getFlag(options, keys, "worker", mustBeBoolean);
    checkForInvalidFlags(options, keys, "in startService() call");
    return {
        wasmURL,
        worker
    };
}
function pushLogFlags(flags, options, keys, isTTY, logLevelDefault) {
    let color = getFlag(options, keys, "color", mustBeBoolean);
    let logLevel = getFlag(options, keys, "logLevel", mustBeString);
    let logLimit = getFlag(options, keys, "logLimit", mustBeInteger);
    if (color !== void 0) flags.push(`--color=${color}`);
    else if (isTTY) flags.push(`--color=true`);
    flags.push(`--log-level=${logLevel || logLevelDefault}`);
    flags.push(`--log-limit=${logLimit || 0}`);
}
function pushCommonFlags(flags, options, keys) {
    let legalComments = getFlag(options, keys, "legalComments", mustBeString);
    let sourceRoot = getFlag(options, keys, "sourceRoot", mustBeString);
    let sourcesContent = getFlag(options, keys, "sourcesContent", mustBeBoolean);
    let target = getFlag(options, keys, "target", mustBeStringOrArray);
    let format10 = getFlag(options, keys, "format", mustBeString);
    let globalName = getFlag(options, keys, "globalName", mustBeString);
    let minify = getFlag(options, keys, "minify", mustBeBoolean);
    let minifySyntax = getFlag(options, keys, "minifySyntax", mustBeBoolean);
    let minifyWhitespace = getFlag(options, keys, "minifyWhitespace", mustBeBoolean);
    let minifyIdentifiers = getFlag(options, keys, "minifyIdentifiers", mustBeBoolean);
    let charset = getFlag(options, keys, "charset", mustBeString);
    let treeShaking = getFlag(options, keys, "treeShaking", mustBeBoolean);
    let ignoreAnnotations = getFlag(options, keys, "ignoreAnnotations", mustBeBoolean);
    let jsx = getFlag(options, keys, "jsx", mustBeString);
    let jsxFactory = getFlag(options, keys, "jsxFactory", mustBeString);
    let jsxFragment = getFlag(options, keys, "jsxFragment", mustBeString);
    let define = getFlag(options, keys, "define", mustBeObject);
    let pure = getFlag(options, keys, "pure", mustBeArray);
    let keepNames = getFlag(options, keys, "keepNames", mustBeBoolean);
    if (legalComments) flags.push(`--legal-comments=${legalComments}`);
    if (sourceRoot !== void 0) flags.push(`--source-root=${sourceRoot}`);
    if (sourcesContent !== void 0) flags.push(`--sources-content=${sourcesContent}`);
    if (target) {
        if (Array.isArray(target)) flags.push(`--target=${Array.from(target).map(validateTarget).join(",")}`);
        else flags.push(`--target=${validateTarget(target)}`);
    }
    if (format10) flags.push(`--format=${format10}`);
    if (globalName) flags.push(`--global-name=${globalName}`);
    if (minify) flags.push("--minify");
    if (minifySyntax) flags.push("--minify-syntax");
    if (minifyWhitespace) flags.push("--minify-whitespace");
    if (minifyIdentifiers) flags.push("--minify-identifiers");
    if (charset) flags.push(`--charset=${charset}`);
    if (treeShaking !== void 0) flags.push(`--tree-shaking=${treeShaking}`);
    if (ignoreAnnotations) flags.push(`--ignore-annotations`);
    if (jsx) flags.push(`--jsx=${jsx}`);
    if (jsxFactory) flags.push(`--jsx-factory=${jsxFactory}`);
    if (jsxFragment) flags.push(`--jsx-fragment=${jsxFragment}`);
    if (define) {
        for(let key in define){
            if (key.indexOf("=") >= 0) throw new Error(`Invalid define: ${key}`);
            flags.push(`--define:${key}=${define[key]}`);
        }
    }
    if (pure) for (let fn of pure)flags.push(`--pure:${fn}`);
    if (keepNames) flags.push(`--keep-names`);
}
function flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault) {
    let flags = [];
    let entries = [];
    let keys = Object.create(null);
    let stdinContents = null;
    let stdinResolveDir = null;
    let watchMode = null;
    pushLogFlags(flags, options, keys, isTTY, logLevelDefault);
    pushCommonFlags(flags, options, keys);
    let sourcemap = getFlag(options, keys, "sourcemap", mustBeStringOrBoolean);
    let bundle = getFlag(options, keys, "bundle", mustBeBoolean);
    let watch = getFlag(options, keys, "watch", mustBeBooleanOrObject);
    let splitting = getFlag(options, keys, "splitting", mustBeBoolean);
    let preserveSymlinks = getFlag(options, keys, "preserveSymlinks", mustBeBoolean);
    let metafile = getFlag(options, keys, "metafile", mustBeBoolean);
    let outfile = getFlag(options, keys, "outfile", mustBeString);
    let outdir = getFlag(options, keys, "outdir", mustBeString);
    let outbase = getFlag(options, keys, "outbase", mustBeString);
    let platform = getFlag(options, keys, "platform", mustBeString);
    let tsconfig = getFlag(options, keys, "tsconfig", mustBeString);
    let resolveExtensions = getFlag(options, keys, "resolveExtensions", mustBeArray);
    let nodePathsInput = getFlag(options, keys, "nodePaths", mustBeArray);
    let mainFields = getFlag(options, keys, "mainFields", mustBeArray);
    let conditions = getFlag(options, keys, "conditions", mustBeArray);
    let external = getFlag(options, keys, "external", mustBeArray);
    let loader = getFlag(options, keys, "loader", mustBeObject);
    let outExtension = getFlag(options, keys, "outExtension", mustBeObject);
    let publicPath = getFlag(options, keys, "publicPath", mustBeString);
    let entryNames = getFlag(options, keys, "entryNames", mustBeString);
    let chunkNames = getFlag(options, keys, "chunkNames", mustBeString);
    let assetNames = getFlag(options, keys, "assetNames", mustBeString);
    let inject = getFlag(options, keys, "inject", mustBeArray);
    let banner = getFlag(options, keys, "banner", mustBeObject);
    let footer = getFlag(options, keys, "footer", mustBeObject);
    let entryPoints = getFlag(options, keys, "entryPoints", mustBeArrayOrRecord);
    let absWorkingDir = getFlag(options, keys, "absWorkingDir", mustBeString);
    let stdin = getFlag(options, keys, "stdin", mustBeObject);
    let write1 = getFlag(options, keys, "write", mustBeBoolean) ?? writeDefault;
    let allowOverwrite = getFlag(options, keys, "allowOverwrite", mustBeBoolean);
    let incremental = getFlag(options, keys, "incremental", mustBeBoolean) === true;
    keys.plugins = true;
    checkForInvalidFlags(options, keys, `in ${callName}() call`);
    if (sourcemap) flags.push(`--sourcemap${sourcemap === true ? "" : `=${sourcemap}`}`);
    if (bundle) flags.push("--bundle");
    if (allowOverwrite) flags.push("--allow-overwrite");
    if (watch) {
        flags.push("--watch");
        if (typeof watch === "boolean") {
            watchMode = {};
        } else {
            let watchKeys = Object.create(null);
            let onRebuild = getFlag(watch, watchKeys, "onRebuild", mustBeFunction);
            checkForInvalidFlags(watch, watchKeys, `on "watch" in ${callName}() call`);
            watchMode = {
                onRebuild
            };
        }
    }
    if (splitting) flags.push("--splitting");
    if (preserveSymlinks) flags.push("--preserve-symlinks");
    if (metafile) flags.push(`--metafile`);
    if (outfile) flags.push(`--outfile=${outfile}`);
    if (outdir) flags.push(`--outdir=${outdir}`);
    if (outbase) flags.push(`--outbase=${outbase}`);
    if (platform) flags.push(`--platform=${platform}`);
    if (tsconfig) flags.push(`--tsconfig=${tsconfig}`);
    if (resolveExtensions) {
        let values = [];
        for (let value of resolveExtensions){
            value += "";
            if (value.indexOf(",") >= 0) throw new Error(`Invalid resolve extension: ${value}`);
            values.push(value);
        }
        flags.push(`--resolve-extensions=${values.join(",")}`);
    }
    if (publicPath) flags.push(`--public-path=${publicPath}`);
    if (entryNames) flags.push(`--entry-names=${entryNames}`);
    if (chunkNames) flags.push(`--chunk-names=${chunkNames}`);
    if (assetNames) flags.push(`--asset-names=${assetNames}`);
    if (mainFields) {
        let values = [];
        for (let value of mainFields){
            value += "";
            if (value.indexOf(",") >= 0) throw new Error(`Invalid main field: ${value}`);
            values.push(value);
        }
        flags.push(`--main-fields=${values.join(",")}`);
    }
    if (conditions) {
        let values = [];
        for (let value of conditions){
            value += "";
            if (value.indexOf(",") >= 0) throw new Error(`Invalid condition: ${value}`);
            values.push(value);
        }
        flags.push(`--conditions=${values.join(",")}`);
    }
    if (external) for (let name of external)flags.push(`--external:${name}`);
    if (banner) {
        for(let type in banner){
            if (type.indexOf("=") >= 0) throw new Error(`Invalid banner file type: ${type}`);
            flags.push(`--banner:${type}=${banner[type]}`);
        }
    }
    if (footer) {
        for(let type in footer){
            if (type.indexOf("=") >= 0) throw new Error(`Invalid footer file type: ${type}`);
            flags.push(`--footer:${type}=${footer[type]}`);
        }
    }
    if (inject) for (let path10 of inject)flags.push(`--inject:${path10}`);
    if (loader) {
        for(let ext in loader){
            if (ext.indexOf("=") >= 0) throw new Error(`Invalid loader extension: ${ext}`);
            flags.push(`--loader:${ext}=${loader[ext]}`);
        }
    }
    if (outExtension) {
        for(let ext in outExtension){
            if (ext.indexOf("=") >= 0) throw new Error(`Invalid out extension: ${ext}`);
            flags.push(`--out-extension:${ext}=${outExtension[ext]}`);
        }
    }
    if (entryPoints) {
        if (Array.isArray(entryPoints)) {
            for (let entryPoint of entryPoints){
                entries.push([
                    "",
                    entryPoint + ""
                ]);
            }
        } else {
            for (let [key, value] of Object.entries(entryPoints)){
                entries.push([
                    key + "",
                    value + ""
                ]);
            }
        }
    }
    if (stdin) {
        let stdinKeys = Object.create(null);
        let contents = getFlag(stdin, stdinKeys, "contents", mustBeString);
        let resolveDir = getFlag(stdin, stdinKeys, "resolveDir", mustBeString);
        let sourcefile = getFlag(stdin, stdinKeys, "sourcefile", mustBeString);
        let loader2 = getFlag(stdin, stdinKeys, "loader", mustBeString);
        checkForInvalidFlags(stdin, stdinKeys, 'in "stdin" object');
        if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
        if (loader2) flags.push(`--loader=${loader2}`);
        if (resolveDir) stdinResolveDir = resolveDir + "";
        stdinContents = contents ? contents + "" : "";
    }
    let nodePaths = [];
    if (nodePathsInput) {
        for (let value of nodePathsInput){
            value += "";
            nodePaths.push(value);
        }
    }
    return {
        entries,
        flags,
        write: write1,
        stdinContents,
        stdinResolveDir,
        absWorkingDir,
        incremental,
        nodePaths,
        watch: watchMode
    };
}
function flagsForTransformOptions(callName, options, isTTY, logLevelDefault) {
    let flags = [];
    let keys = Object.create(null);
    pushLogFlags(flags, options, keys, isTTY, logLevelDefault);
    pushCommonFlags(flags, options, keys);
    let sourcemap = getFlag(options, keys, "sourcemap", mustBeStringOrBoolean);
    let tsconfigRaw = getFlag(options, keys, "tsconfigRaw", mustBeStringOrObject);
    let sourcefile = getFlag(options, keys, "sourcefile", mustBeString);
    let loader = getFlag(options, keys, "loader", mustBeString);
    let banner = getFlag(options, keys, "banner", mustBeString);
    let footer = getFlag(options, keys, "footer", mustBeString);
    checkForInvalidFlags(options, keys, `in ${callName}() call`);
    if (sourcemap) flags.push(`--sourcemap=${sourcemap === true ? "external" : sourcemap}`);
    if (tsconfigRaw) flags.push(`--tsconfig-raw=${typeof tsconfigRaw === "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`);
    if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
    if (loader) flags.push(`--loader=${loader}`);
    if (banner) flags.push(`--banner=${banner}`);
    if (footer) flags.push(`--footer=${footer}`);
    return flags;
}
function createChannel(streamIn) {
    let responseCallbacks = new Map();
    let pluginCallbacks = new Map();
    let watchCallbacks = new Map();
    let serveCallbacks = new Map();
    let nextServeID = 0;
    let isClosed = false;
    let nextRequestID = 0;
    let nextBuildKey = 0;
    let stdout = new Uint8Array(16 * 1024);
    let stdoutUsed = 0;
    let readFromStdout = (chunk)=>{
        let limit = stdoutUsed + chunk.length;
        if (limit > stdout.length) {
            let swap1 = new Uint8Array(limit * 2);
            swap1.set(stdout);
            stdout = swap1;
        }
        stdout.set(chunk, stdoutUsed);
        stdoutUsed += chunk.length;
        let offset = 0;
        while(offset + 4 <= stdoutUsed){
            let length = readUInt32LE(stdout, offset);
            if (offset + 4 + length > stdoutUsed) {
                break;
            }
            offset += 4;
            handleIncomingPacket(stdout.subarray(offset, offset + length));
            offset += length;
        }
        if (offset > 0) {
            stdout.copyWithin(0, offset, stdoutUsed);
            stdoutUsed -= offset;
        }
    };
    let afterClose = ()=>{
        isClosed = true;
        for (let callback of responseCallbacks.values()){
            callback("The service was stopped", null);
        }
        responseCallbacks.clear();
        for (let callbacks of serveCallbacks.values()){
            callbacks.onWait("The service was stopped");
        }
        serveCallbacks.clear();
        for (let callback1 of watchCallbacks.values()){
            try {
                callback1(new Error("The service was stopped"), null);
            } catch (e) {
                console.error(e);
            }
        }
        watchCallbacks.clear();
    };
    let sendRequest = (refs, value, callback)=>{
        if (isClosed) return callback("The service is no longer running", null);
        let id = nextRequestID++;
        responseCallbacks.set(id, (error, response)=>{
            try {
                callback(error, response);
            } finally{
                if (refs) refs.unref();
            }
        });
        if (refs) refs.ref();
        streamIn.writeToStdin(encodePacket({
            id,
            isRequest: true,
            value
        }));
    };
    let sendResponse = (id, value)=>{
        if (isClosed) throw new Error("The service is no longer running");
        streamIn.writeToStdin(encodePacket({
            id,
            isRequest: false,
            value
        }));
    };
    let handleRequest = async (id, request)=>{
        try {
            switch(request.command){
                case "ping":
                    {
                        sendResponse(id, {});
                        break;
                    }
                case "start":
                    {
                        let callback = pluginCallbacks.get(request.key);
                        if (!callback) sendResponse(id, {});
                        else sendResponse(id, await callback(request));
                        break;
                    }
                case "resolve":
                    {
                        let callback = pluginCallbacks.get(request.key);
                        if (!callback) sendResponse(id, {});
                        else sendResponse(id, await callback(request));
                        break;
                    }
                case "load":
                    {
                        let callback = pluginCallbacks.get(request.key);
                        if (!callback) sendResponse(id, {});
                        else sendResponse(id, await callback(request));
                        break;
                    }
                case "serve-request":
                    {
                        let callbacks = serveCallbacks.get(request.serveID);
                        if (callbacks && callbacks.onRequest) callbacks.onRequest(request.args);
                        sendResponse(id, {});
                        break;
                    }
                case "serve-wait":
                    {
                        let callbacks = serveCallbacks.get(request.serveID);
                        if (callbacks) callbacks.onWait(request.error);
                        sendResponse(id, {});
                        break;
                    }
                case "watch-rebuild":
                    {
                        let callback = watchCallbacks.get(request.watchID);
                        try {
                            if (callback) callback(null, request.args);
                        } catch (err) {
                            console.error(err);
                        }
                        sendResponse(id, {});
                        break;
                    }
                default:
                    throw new Error(`Invalid command: ` + request.command);
            }
        } catch (e) {
            sendResponse(id, {
                errors: [
                    extractErrorMessageV8(e, streamIn, null, void 0, "")
                ]
            });
        }
    };
    let isFirstPacket = true;
    let handleIncomingPacket = (bytes)=>{
        if (isFirstPacket) {
            isFirstPacket = false;
            let binaryVersion = String.fromCharCode(...bytes);
            if (binaryVersion !== "0.13.2") {
                throw new Error(`Cannot start service: Host version "${"0.13.2"}" does not match binary version ${JSON.stringify(binaryVersion)}`);
            }
            return;
        }
        let packet = decodePacket(bytes);
        if (packet.isRequest) {
            handleRequest(packet.id, packet.value);
        } else {
            let callback = responseCallbacks.get(packet.id);
            responseCallbacks.delete(packet.id);
            if (packet.value.error) callback(packet.value.error, {});
            else callback(null, packet.value);
        }
    };
    let handlePlugins = async (initialOptions, plugins, buildKey, stash)=>{
        let onStartCallbacks = [];
        let onEndCallbacks = [];
        let onResolveCallbacks = {};
        let onLoadCallbacks = {};
        let nextCallbackID = 0;
        let i48 = 0;
        let requestPlugins = [];
        plugins = [
            ...plugins
        ];
        for (let item of plugins){
            let keys = {};
            if (typeof item !== "object") throw new Error(`Plugin at index ${i48} must be an object`);
            let name = getFlag(item, keys, "name", mustBeString);
            if (typeof name !== "string" || name === "") throw new Error(`Plugin at index ${i48} is missing a name`);
            try {
                let setup = getFlag(item, keys, "setup", mustBeFunction);
                if (typeof setup !== "function") throw new Error(`Plugin is missing a setup function`);
                checkForInvalidFlags(item, keys, `on plugin ${JSON.stringify(name)}`);
                let plugin = {
                    name,
                    onResolve: [],
                    onLoad: []
                };
                i48++;
                let promise = setup({
                    initialOptions,
                    onStart (callback2) {
                        let registeredText = `This error came from the "onStart" callback registered here`;
                        let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onStart");
                        onStartCallbacks.push({
                            name,
                            callback: callback2,
                            note: registeredNote
                        });
                    },
                    onEnd (callback2) {
                        let registeredText = `This error came from the "onEnd" callback registered here`;
                        let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onEnd");
                        onEndCallbacks.push({
                            name,
                            callback: callback2,
                            note: registeredNote
                        });
                    },
                    onResolve (options, callback2) {
                        let registeredText = `This error came from the "onResolve" callback registered here`;
                        let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onResolve");
                        let keys2 = {};
                        let filter = getFlag(options, keys2, "filter", mustBeRegExp);
                        let namespace = getFlag(options, keys2, "namespace", mustBeString);
                        checkForInvalidFlags(options, keys2, `in onResolve() call for plugin ${JSON.stringify(name)}`);
                        if (filter == null) throw new Error(`onResolve() call is missing a filter`);
                        let id = nextCallbackID++;
                        onResolveCallbacks[id] = {
                            name,
                            callback: callback2,
                            note: registeredNote
                        };
                        plugin.onResolve.push({
                            id,
                            filter: filter.source,
                            namespace: namespace || ""
                        });
                    },
                    onLoad (options, callback2) {
                        let registeredText = `This error came from the "onLoad" callback registered here`;
                        let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onLoad");
                        let keys2 = {};
                        let filter = getFlag(options, keys2, "filter", mustBeRegExp);
                        let namespace = getFlag(options, keys2, "namespace", mustBeString);
                        checkForInvalidFlags(options, keys2, `in onLoad() call for plugin ${JSON.stringify(name)}`);
                        if (filter == null) throw new Error(`onLoad() call is missing a filter`);
                        let id = nextCallbackID++;
                        onLoadCallbacks[id] = {
                            name,
                            callback: callback2,
                            note: registeredNote
                        };
                        plugin.onLoad.push({
                            id,
                            filter: filter.source,
                            namespace: namespace || ""
                        });
                    }
                });
                if (promise) await promise;
                requestPlugins.push(plugin);
            } catch (e) {
                return {
                    ok: false,
                    error: e,
                    pluginName: name
                };
            }
        }
        const callback = async (request)=>{
            switch(request.command){
                case "start":
                    {
                        let response = {
                            errors: [],
                            warnings: []
                        };
                        await Promise.all(onStartCallbacks.map(async ({ name , callback: callback2 , note  })=>{
                            try {
                                let result = await callback2();
                                if (result != null) {
                                    if (typeof result !== "object") throw new Error(`Expected onStart() callback in plugin ${JSON.stringify(name)} to return an object`);
                                    let keys = {};
                                    let errors = getFlag(result, keys, "errors", mustBeArray);
                                    let warnings = getFlag(result, keys, "warnings", mustBeArray);
                                    checkForInvalidFlags(result, keys, `from onStart() callback in plugin ${JSON.stringify(name)}`);
                                    if (errors != null) response.errors.push(...sanitizeMessages(errors, "errors", stash, name));
                                    if (warnings != null) response.warnings.push(...sanitizeMessages(warnings, "warnings", stash, name));
                                }
                            } catch (e) {
                                response.errors.push(extractErrorMessageV8(e, streamIn, stash, note && note(), name));
                            }
                        }));
                        return response;
                    }
                case "resolve":
                    {
                        let response = {}, name = "", callback2, note;
                        for (let id of request.ids){
                            try {
                                ({ name , callback: callback2 , note  } = onResolveCallbacks[id]);
                                let result = await callback2({
                                    path: request.path,
                                    importer: request.importer,
                                    namespace: request.namespace,
                                    resolveDir: request.resolveDir,
                                    kind: request.kind,
                                    pluginData: stash.load(request.pluginData)
                                });
                                if (result != null) {
                                    if (typeof result !== "object") throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(name)} to return an object`);
                                    let keys = {};
                                    let pluginName = getFlag(result, keys, "pluginName", mustBeString);
                                    let path11 = getFlag(result, keys, "path", mustBeString);
                                    let namespace = getFlag(result, keys, "namespace", mustBeString);
                                    let external = getFlag(result, keys, "external", mustBeBoolean);
                                    let sideEffects = getFlag(result, keys, "sideEffects", mustBeBoolean);
                                    let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
                                    let errors = getFlag(result, keys, "errors", mustBeArray);
                                    let warnings = getFlag(result, keys, "warnings", mustBeArray);
                                    let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
                                    let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
                                    checkForInvalidFlags(result, keys, `from onResolve() callback in plugin ${JSON.stringify(name)}`);
                                    response.id = id;
                                    if (pluginName != null) response.pluginName = pluginName;
                                    if (path11 != null) response.path = path11;
                                    if (namespace != null) response.namespace = namespace;
                                    if (external != null) response.external = external;
                                    if (sideEffects != null) response.sideEffects = sideEffects;
                                    if (pluginData != null) response.pluginData = stash.store(pluginData);
                                    if (errors != null) response.errors = sanitizeMessages(errors, "errors", stash, name);
                                    if (warnings != null) response.warnings = sanitizeMessages(warnings, "warnings", stash, name);
                                    if (watchFiles != null) response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
                                    if (watchDirs != null) response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
                                    break;
                                }
                            } catch (e) {
                                return {
                                    id,
                                    errors: [
                                        extractErrorMessageV8(e, streamIn, stash, note && note(), name)
                                    ]
                                };
                            }
                        }
                        return response;
                    }
                case "load":
                    {
                        let response = {}, name = "", callback2, note;
                        for (let id of request.ids){
                            try {
                                ({ name , callback: callback2 , note  } = onLoadCallbacks[id]);
                                let result = await callback2({
                                    path: request.path,
                                    namespace: request.namespace,
                                    pluginData: stash.load(request.pluginData)
                                });
                                if (result != null) {
                                    if (typeof result !== "object") throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(name)} to return an object`);
                                    let keys = {};
                                    let pluginName = getFlag(result, keys, "pluginName", mustBeString);
                                    let contents = getFlag(result, keys, "contents", mustBeStringOrUint8Array);
                                    let resolveDir = getFlag(result, keys, "resolveDir", mustBeString);
                                    let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
                                    let loader = getFlag(result, keys, "loader", mustBeString);
                                    let errors = getFlag(result, keys, "errors", mustBeArray);
                                    let warnings = getFlag(result, keys, "warnings", mustBeArray);
                                    let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
                                    let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
                                    checkForInvalidFlags(result, keys, `from onLoad() callback in plugin ${JSON.stringify(name)}`);
                                    response.id = id;
                                    if (pluginName != null) response.pluginName = pluginName;
                                    if (contents instanceof Uint8Array) response.contents = contents;
                                    else if (contents != null) response.contents = encodeUTF8(contents);
                                    if (resolveDir != null) response.resolveDir = resolveDir;
                                    if (pluginData != null) response.pluginData = stash.store(pluginData);
                                    if (loader != null) response.loader = loader;
                                    if (errors != null) response.errors = sanitizeMessages(errors, "errors", stash, name);
                                    if (warnings != null) response.warnings = sanitizeMessages(warnings, "warnings", stash, name);
                                    if (watchFiles != null) response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
                                    if (watchDirs != null) response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
                                    break;
                                }
                            } catch (e) {
                                return {
                                    id,
                                    errors: [
                                        extractErrorMessageV8(e, streamIn, stash, note && note(), name)
                                    ]
                                };
                            }
                        }
                        return response;
                    }
                default:
                    throw new Error(`Invalid command: ` + request.command);
            }
        };
        let runOnEndCallbacks = (result, logPluginError, done)=>done()
        ;
        if (onEndCallbacks.length > 0) {
            runOnEndCallbacks = (result, logPluginError, done)=>{
                (async ()=>{
                    for (const { name , callback: callback2 , note  } of onEndCallbacks){
                        try {
                            await callback2(result);
                        } catch (e) {
                            result.errors.push(await new Promise((resolve16)=>logPluginError(e, name, note && note(), resolve16)
                            ));
                        }
                    }
                })().then(done);
            };
        }
        let refCount = 0;
        return {
            ok: true,
            requestPlugins,
            runOnEndCallbacks,
            pluginRefs: {
                ref () {
                    if (++refCount === 1) pluginCallbacks.set(buildKey, callback);
                },
                unref () {
                    if (--refCount === 0) pluginCallbacks.delete(buildKey);
                }
            }
        };
    };
    let buildServeData = (refs, options, request)=>{
        let keys = {};
        let port = getFlag(options, keys, "port", mustBeInteger);
        let host = getFlag(options, keys, "host", mustBeString);
        let servedir = getFlag(options, keys, "servedir", mustBeString);
        let onRequest = getFlag(options, keys, "onRequest", mustBeFunction);
        let serveID = nextServeID++;
        let onWait;
        let wait = new Promise((resolve17, reject)=>{
            onWait = (error)=>{
                serveCallbacks.delete(serveID);
                if (error !== null) reject(new Error(error));
                else resolve17();
            };
        });
        request.serve = {
            serveID
        };
        checkForInvalidFlags(options, keys, `in serve() call`);
        if (port !== void 0) request.serve.port = port;
        if (host !== void 0) request.serve.host = host;
        if (servedir !== void 0) request.serve.servedir = servedir;
        serveCallbacks.set(serveID, {
            onRequest,
            onWait
        });
        return {
            wait,
            stop () {
                sendRequest(refs, {
                    command: "serve-stop",
                    serveID
                }, ()=>{});
            }
        };
    };
    const buildLogLevelDefault = "warning";
    const transformLogLevelDefault = "silent";
    let buildOrServe = (args)=>{
        let key = nextBuildKey++;
        const details = createObjectStash();
        let plugins;
        let { refs , options , isTTY , callback  } = args;
        if (typeof options === "object") {
            let value = options.plugins;
            if (value !== void 0) {
                if (!Array.isArray(value)) throw new Error(`"plugins" must be an array`);
                plugins = value;
            }
        }
        let logPluginError = (e, pluginName, note, done)=>{
            let flags = [];
            try {
                pushLogFlags(flags, options, {}, isTTY, buildLogLevelDefault);
            } catch  {}
            const message = extractErrorMessageV8(e, streamIn, details, note, pluginName);
            sendRequest(refs, {
                command: "error",
                flags,
                error: message
            }, ()=>{
                message.detail = details.load(message.detail);
                done(message);
            });
        };
        let handleError = (e, pluginName)=>{
            logPluginError(e, pluginName, void 0, (error)=>{
                callback(failureErrorWithLog("Build failed", [
                    error
                ], []), null);
            });
        };
        if (plugins && plugins.length > 0) {
            if (streamIn.isSync) return handleError(new Error("Cannot use plugins in synchronous API calls"), "");
            handlePlugins(options, plugins, key, details).then((result)=>{
                if (!result.ok) {
                    handleError(result.error, result.pluginName);
                } else {
                    try {
                        buildOrServeContinue({
                            ...args,
                            key,
                            details,
                            logPluginError,
                            requestPlugins: result.requestPlugins,
                            runOnEndCallbacks: result.runOnEndCallbacks,
                            pluginRefs: result.pluginRefs
                        });
                    } catch (e) {
                        handleError(e, "");
                    }
                }
            }, (e)=>handleError(e, "")
            );
        } else {
            try {
                buildOrServeContinue({
                    ...args,
                    key,
                    details,
                    logPluginError,
                    requestPlugins: null,
                    runOnEndCallbacks: (result, logPluginError2, done)=>done()
                    ,
                    pluginRefs: null
                });
            } catch (e) {
                handleError(e, "");
            }
        }
    };
    let buildOrServeContinue = ({ callName , refs: callerRefs , serveOptions , options , isTTY , defaultWD: defaultWD2 , callback , key , details , logPluginError , requestPlugins , runOnEndCallbacks , pluginRefs  })=>{
        const refs = {
            ref () {
                if (pluginRefs) pluginRefs.ref();
                if (callerRefs) callerRefs.ref();
            },
            unref () {
                if (pluginRefs) pluginRefs.unref();
                if (callerRefs) callerRefs.unref();
            }
        };
        let writeDefault = !streamIn.isBrowser;
        let { entries , flags , write: write2 , stdinContents , stdinResolveDir , absWorkingDir , incremental , nodePaths , watch  } = flagsForBuildOptions(callName, options, isTTY, buildLogLevelDefault, writeDefault);
        let request = {
            command: "build",
            key,
            entries,
            flags,
            write: write2,
            stdinContents,
            stdinResolveDir,
            absWorkingDir: absWorkingDir || defaultWD2,
            incremental,
            nodePaths
        };
        if (requestPlugins) request.plugins = requestPlugins;
        let serve2 = serveOptions && buildServeData(refs, serveOptions, request);
        let rebuild;
        let stop2;
        let copyResponseToResult = (response, result)=>{
            if (response.outputFiles) result.outputFiles = response.outputFiles.map(convertOutputFiles);
            if (response.metafile) result.metafile = JSON.parse(response.metafile);
            if (response.writeToStdout !== void 0) console.log(decodeUTF8(response.writeToStdout).replace(/\n$/, ""));
        };
        let buildResponseToResult = (response, callback2)=>{
            let result = {
                errors: replaceDetailsInMessages(response.errors, details),
                warnings: replaceDetailsInMessages(response.warnings, details)
            };
            copyResponseToResult(response, result);
            runOnEndCallbacks(result, logPluginError, ()=>{
                if (result.errors.length > 0) {
                    return callback2(failureErrorWithLog("Build failed", result.errors, result.warnings), null);
                }
                if (response.rebuildID !== void 0) {
                    if (!rebuild) {
                        let isDisposed = false;
                        rebuild = ()=>new Promise((resolve18, reject)=>{
                                if (isDisposed || isClosed) throw new Error("Cannot rebuild");
                                sendRequest(refs, {
                                    command: "rebuild",
                                    rebuildID: response.rebuildID
                                }, (error2, response2)=>{
                                    if (error2) {
                                        const message = {
                                            pluginName: "",
                                            text: error2,
                                            location: null,
                                            notes: [],
                                            detail: void 0
                                        };
                                        return callback2(failureErrorWithLog("Build failed", [
                                            message
                                        ], []), null);
                                    }
                                    buildResponseToResult(response2, (error3, result3)=>{
                                        if (error3) reject(error3);
                                        else resolve18(result3);
                                    });
                                });
                            })
                        ;
                        refs.ref();
                        rebuild.dispose = ()=>{
                            if (isDisposed) return;
                            isDisposed = true;
                            sendRequest(refs, {
                                command: "rebuild-dispose",
                                rebuildID: response.rebuildID
                            }, ()=>{});
                            refs.unref();
                        };
                    }
                    result.rebuild = rebuild;
                }
                if (response.watchID !== void 0) {
                    if (!stop2) {
                        let isStopped = false;
                        refs.ref();
                        stop2 = ()=>{
                            if (isStopped) return;
                            isStopped = true;
                            watchCallbacks.delete(response.watchID);
                            sendRequest(refs, {
                                command: "watch-stop",
                                watchID: response.watchID
                            }, ()=>{});
                            refs.unref();
                        };
                        if (watch) {
                            watchCallbacks.set(response.watchID, (serviceStopError, watchResponse)=>{
                                if (serviceStopError) {
                                    if (watch.onRebuild) watch.onRebuild(serviceStopError, null);
                                    return;
                                }
                                let result2 = {
                                    errors: replaceDetailsInMessages(watchResponse.errors, details),
                                    warnings: replaceDetailsInMessages(watchResponse.warnings, details)
                                };
                                copyResponseToResult(watchResponse, result2);
                                runOnEndCallbacks(result2, logPluginError, ()=>{
                                    if (result2.errors.length > 0) {
                                        if (watch.onRebuild) watch.onRebuild(failureErrorWithLog("Build failed", result2.errors, result2.warnings), null);
                                        return;
                                    }
                                    if (watchResponse.rebuildID !== void 0) result2.rebuild = rebuild;
                                    result2.stop = stop2;
                                    if (watch.onRebuild) watch.onRebuild(null, result2);
                                });
                            });
                        }
                    }
                    result.stop = stop2;
                }
                callback2(null, result);
            });
        };
        if (write2 && streamIn.isBrowser) throw new Error(`Cannot enable "write" in the browser`);
        if (incremental && streamIn.isSync) throw new Error(`Cannot use "incremental" with a synchronous build`);
        if (watch && streamIn.isSync) throw new Error(`Cannot use "watch" with a synchronous build`);
        sendRequest(refs, request, (error, response)=>{
            if (error) return callback(new Error(error), null);
            if (serve2) {
                let serveResponse = response;
                let isStopped = false;
                refs.ref();
                let result = {
                    port: serveResponse.port,
                    host: serveResponse.host,
                    wait: serve2.wait,
                    stop () {
                        if (isStopped) return;
                        isStopped = true;
                        serve2.stop();
                        refs.unref();
                    }
                };
                refs.ref();
                serve2.wait.then(refs.unref, refs.unref);
                return callback(null, result);
            }
            return buildResponseToResult(response, callback);
        });
    };
    let transform2 = ({ callName , refs , input , options , isTTY , fs , callback  })=>{
        const details = createObjectStash();
        let start14 = (inputPath)=>{
            try {
                if (typeof input !== "string") throw new Error('The input to "transform" must be a string');
                let flags = flagsForTransformOptions(callName, options, isTTY, transformLogLevelDefault);
                let request = {
                    command: "transform",
                    flags,
                    inputFS: inputPath !== null,
                    input: inputPath !== null ? inputPath : input
                };
                sendRequest(refs, request, (error, response)=>{
                    if (error) return callback(new Error(error), null);
                    let errors = replaceDetailsInMessages(response.errors, details);
                    let warnings = replaceDetailsInMessages(response.warnings, details);
                    let outstanding = 1;
                    let next = ()=>--outstanding === 0 && callback(null, {
                            warnings,
                            code: response.code,
                            map: response.map
                        })
                    ;
                    if (errors.length > 0) return callback(failureErrorWithLog("Transform failed", errors, warnings), null);
                    if (response.codeFS) {
                        outstanding++;
                        fs.readFile(response.code, (err, contents)=>{
                            if (err !== null) {
                                callback(err, null);
                            } else {
                                response.code = contents;
                                next();
                            }
                        });
                    }
                    if (response.mapFS) {
                        outstanding++;
                        fs.readFile(response.map, (err, contents)=>{
                            if (err !== null) {
                                callback(err, null);
                            } else {
                                response.map = contents;
                                next();
                            }
                        });
                    }
                    next();
                });
            } catch (e) {
                let flags = [];
                try {
                    pushLogFlags(flags, options, {}, isTTY, transformLogLevelDefault);
                } catch  {}
                const error = extractErrorMessageV8(e, streamIn, details, void 0, "");
                sendRequest(refs, {
                    command: "error",
                    flags,
                    error
                }, ()=>{
                    error.detail = details.load(error.detail);
                    callback(failureErrorWithLog("Transform failed", [
                        error
                    ], []), null);
                });
            }
        };
        if (typeof input === "string" && input.length > 1024 * 1024) {
            let next = start14;
            start14 = ()=>fs.writeFile(input, next)
            ;
        }
        start14(null);
    };
    let formatMessages2 = ({ callName , refs , messages , options , callback  })=>{
        let result = sanitizeMessages(messages, "messages", null, "");
        if (!options) throw new Error(`Missing second argument in ${callName}() call`);
        let keys = {};
        let kind = getFlag(options, keys, "kind", mustBeString);
        let color = getFlag(options, keys, "color", mustBeBoolean);
        let terminalWidth = getFlag(options, keys, "terminalWidth", mustBeInteger);
        checkForInvalidFlags(options, keys, `in ${callName}() call`);
        if (kind === void 0) throw new Error(`Missing "kind" in ${callName}() call`);
        if (kind !== "error" && kind !== "warning") throw new Error(`Expected "kind" to be "error" or "warning" in ${callName}() call`);
        let request = {
            command: "format-msgs",
            messages: result,
            isWarning: kind === "warning"
        };
        if (color !== void 0) request.color = color;
        if (terminalWidth !== void 0) request.terminalWidth = terminalWidth;
        sendRequest(refs, request, (error, response)=>{
            if (error) return callback(new Error(error), null);
            callback(null, response.messages);
        });
    };
    let analyzeMetafile = ({ callName , refs , metafile , options , callback  })=>{
        if (options === void 0) options = {};
        let keys = {};
        let color = getFlag(options, keys, "color", mustBeBoolean);
        let verbose = getFlag(options, keys, "verbose", mustBeBoolean);
        checkForInvalidFlags(options, keys, `in ${callName}() call`);
        let request = {
            command: "analyze-metafile",
            metafile
        };
        if (color !== void 0) request.color = color;
        if (verbose !== void 0) request.verbose = verbose;
        sendRequest(refs, request, (error, response)=>{
            if (error) return callback(new Error(error), null);
            callback(null, response.result);
        });
    };
    return {
        readFromStdout,
        afterClose,
        service: {
            buildOrServe,
            transform: transform2,
            formatMessages: formatMessages2,
            analyzeMetafile
        }
    };
}
function createObjectStash() {
    const map = new Map();
    let nextID = 0;
    return {
        load (id) {
            return map.get(id);
        },
        store (value) {
            if (value === void 0) return -1;
            const id = nextID++;
            map.set(id, value);
            return id;
        }
    };
}
function extractCallerV8(e, streamIn, ident) {
    let note;
    let tried = false;
    return ()=>{
        if (tried) return note;
        tried = true;
        try {
            let lines = (e.stack + "").split("\n");
            lines.splice(1, 1);
            let location = parseStackLinesV8(streamIn, lines, ident);
            if (location) {
                note = {
                    text: e.message,
                    location
                };
                return note;
            }
        } catch  {}
    };
}
function extractErrorMessageV8(e, streamIn, stash, note, pluginName) {
    let text = "Internal error";
    let location = null;
    try {
        text = (e && e.message || e) + "";
    } catch  {}
    try {
        location = parseStackLinesV8(streamIn, (e.stack + "").split("\n"), "");
    } catch  {}
    return {
        pluginName,
        text,
        location,
        notes: note ? [
            note
        ] : [],
        detail: stash ? stash.store(e) : -1
    };
}
function parseStackLinesV8(streamIn, lines, ident) {
    let at = "    at ";
    if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at)) {
        for(let i49 = 1; i49 < lines.length; i49++){
            let line = lines[i49];
            if (!line.startsWith(at)) continue;
            line = line.slice(at.length);
            while(true){
                let match = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
                if (match) {
                    line = match[1];
                    continue;
                }
                match = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line);
                if (match) {
                    line = match[1];
                    continue;
                }
                match = /^(\S+):(\d+):(\d+)$/.exec(line);
                if (match) {
                    let contents;
                    try {
                        contents = streamIn.readFileSync(match[1], "utf8");
                    } catch  {
                        break;
                    }
                    let lineText = contents.split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2] - 1] || "";
                    let column = +match[3] - 1;
                    let length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
                    return {
                        file: match[1],
                        namespace: "file",
                        line: +match[2],
                        column: encodeUTF8(lineText.slice(0, column)).length,
                        length: encodeUTF8(lineText.slice(column, column + length)).length,
                        lineText: lineText + "\n" + lines.slice(1).join("\n"),
                        suggestion: ""
                    };
                }
                break;
            }
        }
    }
    return null;
}
function failureErrorWithLog(text, errors, warnings) {
    let limit = 5;
    let summary = errors.length < 1 ? "" : ` with ${errors.length} error${errors.length < 2 ? "" : "s"}:` + errors.slice(0, limit + 1).map((e, i50)=>{
        if (i50 === limit) return "\n...";
        if (!e.location) return `
error: ${e.text}`;
        let { file , line , column  } = e.location;
        let pluginText = e.pluginName ? `[plugin: ${e.pluginName}] ` : "";
        return `
${file}:${line}:${column}: error: ${pluginText}${e.text}`;
    }).join("");
    let error = new Error(`${text}${summary}`);
    error.errors = errors;
    error.warnings = warnings;
    return error;
}
function replaceDetailsInMessages(messages, stash) {
    for (const message of messages){
        message.detail = stash.load(message.detail);
    }
    return messages;
}
function sanitizeLocation(location, where) {
    if (location == null) return null;
    let keys = {};
    let file = getFlag(location, keys, "file", mustBeString);
    let namespace = getFlag(location, keys, "namespace", mustBeString);
    let line = getFlag(location, keys, "line", mustBeInteger);
    let column = getFlag(location, keys, "column", mustBeInteger);
    let length = getFlag(location, keys, "length", mustBeInteger);
    let lineText = getFlag(location, keys, "lineText", mustBeString);
    let suggestion = getFlag(location, keys, "suggestion", mustBeString);
    checkForInvalidFlags(location, keys, where);
    return {
        file: file || "",
        namespace: namespace || "",
        line: line || 0,
        column: column || 0,
        length: length || 0,
        lineText: lineText || "",
        suggestion: suggestion || ""
    };
}
function sanitizeMessages(messages, property, stash, fallbackPluginName) {
    let messagesClone = [];
    let index = 0;
    for (const message of messages){
        let keys = {};
        let pluginName = getFlag(message, keys, "pluginName", mustBeString);
        let text = getFlag(message, keys, "text", mustBeString);
        let location = getFlag(message, keys, "location", mustBeObjectOrNull);
        let notes = getFlag(message, keys, "notes", mustBeArray);
        let detail = getFlag(message, keys, "detail", canBeAnything);
        let where = `in element ${index} of "${property}"`;
        checkForInvalidFlags(message, keys, where);
        let notesClone = [];
        if (notes) {
            for (const note of notes){
                let noteKeys = {};
                let noteText = getFlag(note, noteKeys, "text", mustBeString);
                let noteLocation = getFlag(note, noteKeys, "location", mustBeObjectOrNull);
                checkForInvalidFlags(note, noteKeys, where);
                notesClone.push({
                    text: noteText || "",
                    location: sanitizeLocation(noteLocation, where)
                });
            }
        }
        messagesClone.push({
            pluginName: pluginName || fallbackPluginName,
            text: text || "",
            location: sanitizeLocation(location, where),
            notes: notesClone,
            detail: stash ? stash.store(detail) : -1
        });
        index++;
    }
    return messagesClone;
}
function sanitizeStringArray(values, property) {
    const result = [];
    for (const value of values){
        if (typeof value !== "string") throw new Error(`${JSON.stringify(property)} must be an array of strings`);
        result.push(value);
    }
    return result;
}
function convertOutputFiles({ path: path12 , contents  }) {
    let text = null;
    return {
        path: path12,
        contents,
        get text () {
            if (text === null) text = decodeUTF8(contents);
            return text;
        }
    };
}
var version1 = "0.13.2";
var build1 = (options)=>ensureServiceIsRunning().then((service)=>service.build(options)
    )
;
var serve1 = (serveOptions, buildOptions)=>ensureServiceIsRunning().then((service)=>service.serve(serveOptions, buildOptions)
    )
;
var transform1 = (input, options)=>ensureServiceIsRunning().then((service)=>service.transform(input, options)
    )
;
var formatMessages1 = (messages, options)=>ensureServiceIsRunning().then((service)=>service.formatMessages(messages, options)
    )
;
var buildSync1 = ()=>{
    throw new Error(`The "buildSync" API does not work in Deno`);
};
var transformSync1 = ()=>{
    throw new Error(`The "transformSync" API does not work in Deno`);
};
var formatMessagesSync1 = ()=>{
    throw new Error(`The "formatMessagesSync" API does not work in Deno`);
};
var stop = ()=>{
    if (stopService) stopService();
};
var initializeWasCalled = false;
var initialize1 = async (options)=>{
    options = validateInitializeOptions(options || {});
    if (options.wasmURL) throw new Error(`The "wasmURL" option only works in the browser`);
    if (options.worker) throw new Error(`The "worker" option only works in the browser`);
    if (initializeWasCalled) throw new Error('Cannot call "initialize" more than once');
    await ensureServiceIsRunning();
    initializeWasCalled = true;
};
async function installFromNPM(name, subpath) {
    const { finalPath , finalDir  } = getCachePath(name);
    try {
        await Deno.stat(finalPath);
        return finalPath;
    } catch (e) {}
    const url = `https://registry.npmjs.org/${name}/-/${name}-${version1}.tgz`;
    const buffer = await fetch(url).then((r1)=>r1.arrayBuffer()
    );
    const executable = extractFileFromTarGzip(new Uint8Array(buffer), subpath);
    await Deno.mkdir(finalDir, {
        recursive: true,
        mode: 448
    });
    await Deno.writeFile(finalPath, executable, {
        mode: 493
    });
    return finalPath;
}
function getCachePath(name) {
    let baseDir;
    switch(Deno.build.os){
        case "darwin":
            baseDir = Deno.env.get("HOME");
            if (baseDir) baseDir += "/Library/Caches";
            break;
        case "windows":
            baseDir = Deno.env.get("LOCALAPPDATA");
            if (!baseDir) {
                baseDir = Deno.env.get("USERPROFILE");
                if (baseDir) baseDir += "/AppData/Local";
            }
            if (baseDir) baseDir += "/Cache";
            break;
        case "linux":
            const xdg = Deno.env.get("XDG_CACHE_HOME");
            if (xdg && xdg[0] === "/") baseDir = xdg;
            break;
    }
    if (!baseDir) {
        baseDir = Deno.env.get("HOME");
        if (baseDir) baseDir += "/.cache";
    }
    if (!baseDir) throw new Error("Failed to find cache directory");
    const finalDir = baseDir + `/esbuild/bin`;
    const finalPath = finalDir + `/${name}@${version1}`;
    return {
        finalPath,
        finalDir
    };
}
function extractFileFromTarGzip(buffer, file) {
    try {
        buffer = gunzip(buffer);
    } catch (err) {
        throw new Error(`Invalid gzip data in archive: ${err && err.message || err}`);
    }
    let str = (i51, n)=>String.fromCharCode(...buffer.subarray(i51, i51 + n)).replace(/\0.*$/, "")
    ;
    let offset = 0;
    file = `package/${file}`;
    while(offset < buffer.length){
        let name = str(offset, 100);
        let size = parseInt(str(offset + 124, 12), 8);
        offset += 512;
        if (!isNaN(size)) {
            if (name === file) return buffer.subarray(offset, offset + size);
            offset += size + 511 & ~511;
        }
    }
    throw new Error(`Could not find ${JSON.stringify(file)} in archive`);
}
async function install() {
    const overridePath = Deno.env.get("ESBUILD_BINARY_PATH");
    if (overridePath) return overridePath;
    const platformKey = Deno.build.target;
    const knownWindowsPackages = {
        "x86_64-pc-windows-msvc": "esbuild-windows-64"
    };
    const knownUnixlikePackages = {
        "aarch64-apple-darwin": "esbuild-darwin-arm64",
        "x86_64-apple-darwin": "esbuild-darwin-64",
        "x86_64-unknown-linux-gnu": "esbuild-linux-64"
    };
    if (platformKey in knownWindowsPackages) {
        return await installFromNPM(knownWindowsPackages[platformKey], "esbuild.exe");
    } else if (platformKey in knownUnixlikePackages) {
        return await installFromNPM(knownUnixlikePackages[platformKey], "bin/esbuild");
    } else {
        throw new Error(`Unsupported platform: ${platformKey}`);
    }
}
var defaultWD = Deno.cwd();
var longLivedService;
var stopService;
var ensureServiceIsRunning = ()=>{
    if (!longLivedService) {
        longLivedService = (async ()=>{
            const binPath = await install();
            const isTTY = Deno.isatty(Deno.stderr.rid);
            const child = Deno.run({
                cmd: [
                    binPath,
                    `--service=${version1}`
                ],
                cwd: defaultWD,
                stdin: "piped",
                stdout: "piped",
                stderr: "inherit"
            });
            stopService = ()=>{
                child.stdin.close();
                child.stdout.close();
                child.close();
                initializeWasCalled = false;
                longLivedService = void 0;
                stopService = void 0;
            };
            let writeQueue = [];
            let isQueueLocked = false;
            const startWriteFromQueueWorker = ()=>{
                if (isQueueLocked || writeQueue.length === 0) return;
                isQueueLocked = true;
                child.stdin.write(writeQueue[0]).then((bytesWritten)=>{
                    isQueueLocked = false;
                    if (bytesWritten === writeQueue[0].length) writeQueue.shift();
                    else writeQueue[0] = writeQueue[0].subarray(bytesWritten);
                    startWriteFromQueueWorker();
                });
            };
            const { readFromStdout , afterClose , service  } = createChannel({
                writeToStdin (bytes) {
                    writeQueue.push(bytes);
                    startWriteFromQueueWorker();
                },
                isSync: false,
                isBrowser: false
            });
            const stdoutBuffer = new Uint8Array(4 * 1024 * 1024);
            const readMoreStdout = ()=>child.stdout.read(stdoutBuffer).then((n)=>{
                    if (n === null) {
                        afterClose();
                    } else {
                        readFromStdout(stdoutBuffer.subarray(0, n));
                        readMoreStdout();
                    }
                }).catch((e)=>{
                    if (e instanceof Deno.errors.Interrupted || e instanceof Deno.errors.BadResource) {
                        afterClose();
                    } else {
                        throw e;
                    }
                })
            ;
            readMoreStdout();
            return {
                build: (options)=>{
                    return new Promise((resolve19, reject)=>{
                        service.buildOrServe({
                            callName: "build",
                            refs: null,
                            serveOptions: null,
                            options,
                            isTTY,
                            defaultWD,
                            callback: (err, res)=>err ? reject(err) : resolve19(res)
                        });
                    });
                },
                serve: (serveOptions, buildOptions)=>{
                    if (serveOptions === null || typeof serveOptions !== "object") throw new Error("The first argument must be an object");
                    return new Promise((resolve20, reject)=>service.buildOrServe({
                            callName: "serve",
                            refs: null,
                            serveOptions,
                            options: buildOptions,
                            isTTY,
                            defaultWD,
                            callback: (err, res)=>err ? reject(err) : resolve20(res)
                        })
                    );
                },
                transform: (input, options)=>{
                    return new Promise((resolve21, reject)=>service.transform({
                            callName: "transform",
                            refs: null,
                            input,
                            options: options || {},
                            isTTY,
                            fs: {
                                readFile (tempFile, callback) {
                                    Deno.readFile(tempFile).then((bytes)=>{
                                        let text = new TextDecoder().decode(bytes);
                                        try {
                                            Deno.remove(tempFile);
                                        } catch (e) {}
                                        callback(null, text);
                                    }, (err)=>callback(err, null)
                                    );
                                },
                                writeFile (contents, callback) {
                                    Deno.makeTempFile().then((tempFile)=>Deno.writeFile(tempFile, new TextEncoder().encode(contents)).then(()=>callback(tempFile)
                                        , ()=>callback(null)
                                        )
                                    , ()=>callback(null)
                                    );
                                }
                            },
                            callback: (err, res)=>err ? reject(err) : resolve21(res)
                        })
                    );
                },
                formatMessages: (messages, options)=>{
                    return new Promise((resolve22, reject)=>service.formatMessages({
                            callName: "formatMessages",
                            refs: null,
                            messages,
                            options,
                            callback: (err, res)=>err ? reject(err) : resolve22(res)
                        })
                    );
                }
            };
        })();
    }
    return longLivedService;
};
const mod1 = {
    build: build1,
    buildSync: buildSync1,
    formatMessages: formatMessages1,
    formatMessagesSync: formatMessagesSync1,
    initialize: initialize1,
    serve: serve1,
    stop: stop,
    transform: transform1,
    transformSync: transformSync1,
    version: version1
};
var S, d, O, x, R, W, B, U = {}, $ = [], Y = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function k(e, t) {
    for(var _ in t)e[_] = t[_];
    return e;
}
function V(e) {
    var t = e.parentNode;
    t && t.removeChild(e);
}
function Z(e, t, _) {
    var r2, l2, o, s3 = {};
    for(o in t)o == "key" ? r2 = t[o] : o == "ref" ? l2 = t[o] : s3[o] = t[o];
    if (arguments.length > 2 && (s3.children = arguments.length > 3 ? S.call(arguments, 2) : _), typeof e == "function" && e.defaultProps != null) for(o in e.defaultProps)s3[o] === void 0 && (s3[o] = e.defaultProps[o]);
    return P(e, s3, r2, l2, null);
}
function P(e, t, _, r3, l3) {
    var o = {
        type: e,
        props: t,
        key: _,
        ref: r3,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: l3 ?? ++O
    };
    return d.vnode != null && d.vnode(o), o;
}
function N(e) {
    return e.children;
}
function A(e, t) {
    this.props = e, this.context = t;
}
function C(e, t) {
    if (t == null) return e.__ ? C(e.__, e.__.__k.indexOf(e) + 1) : null;
    for(var _; t < e.__k.length; t++)if ((_ = e.__k[t]) != null && _.__e != null) return _.__e;
    return typeof e.type == "function" ? C(e) : null;
}
function j(e) {
    var t, _;
    if ((e = e.__) != null && e.__c != null) {
        for(e.__e = e.__c.base = null, t = 0; t < e.__k.length; t++)if ((_ = e.__k[t]) != null && _.__e != null) {
            e.__e = e.__c.base = _.__e;
            break;
        }
        return j(e);
    }
}
function L(e) {
    (!e.__d && (e.__d = !0) && x.push(e) && !D.__r++ || W !== d.debounceRendering) && ((W = d.debounceRendering) || R)(D);
}
function D() {
    for(var e; D.__r = x.length;)e = x.sort(function(t, _) {
        return t.__v.__b - _.__v.__b;
    }), x = [], e.some(function(t) {
        var _, r4, l4, o, s4, u;
        t.__d && (s4 = (o = (_ = t).__v).__e, (u = _.__P) && (r4 = [], (l4 = k({}, o)).__v = o.__v + 1, M(u, o, l4, _.__n, u.ownerSVGElement !== void 0, o.__h != null ? [
            s4
        ] : null, r4, s4 ?? C(o), o.__h), J(r4, o), o.__e != s4 && j(o)));
    });
}
function z(e, t, _, r5, l5, o, s5, u, p2, a4) {
    var n, v, c3, i52, f, b7, h2, y3 = r5 && r5.__k || $, m7 = y3.length;
    for(_.__k = [], n = 0; n < t.length; n++)if ((i52 = _.__k[n] = (i52 = t[n]) == null || typeof i52 == "boolean" ? null : typeof i52 == "string" || typeof i52 == "number" || typeof i52 == "bigint" ? P(null, i52, null, null, i52) : Array.isArray(i52) ? P(N, {
        children: i52
    }, null, null, null) : i52.__b > 0 ? P(i52.type, i52.props, i52.key, null, i52.__v) : i52) != null) {
        if (i52.__ = _, i52.__b = _.__b + 1, (c3 = y3[n]) === null || c3 && i52.key == c3.key && i52.type === c3.type) y3[n] = void 0;
        else for(v = 0; v < m7; v++){
            if ((c3 = y3[v]) && i52.key == c3.key && i52.type === c3.type) {
                y3[v] = void 0;
                break;
            }
            c3 = null;
        }
        M(e, i52, c3 = c3 || U, l5, o, s5, u, p2, a4), f = i52.__e, (v = i52.ref) && c3.ref != v && (h2 || (h2 = []), c3.ref && h2.push(c3.ref, null, i52), h2.push(v, i52.__c || f, i52)), f != null ? (b7 == null && (b7 = f), typeof i52.type == "function" && i52.__k != null && i52.__k === c3.__k ? i52.__d = p2 = G(i52, p2, e) : p2 = q(e, i52, c3, y3, f, p2), a4 || _.type !== "option" ? typeof _.type == "function" && (_.__d = p2) : e.value = "") : p2 && c3.__e == p2 && p2.parentNode != e && (p2 = C(c3));
    }
    for(_.__e = b7, n = m7; n--;)y3[n] != null && (typeof _.type == "function" && y3[n].__e != null && y3[n].__e == _.__d && (_.__d = C(r5, n + 1)), Q(y3[n], y3[n]));
    if (h2) for(n = 0; n < h2.length; n++)K(h2[n], h2[++n], h2[++n]);
}
function G(e, t, _) {
    var r6, l6;
    for(r6 = 0; r6 < e.__k.length; r6++)(l6 = e.__k[r6]) && (l6.__ = e, t = typeof l6.type == "function" ? G(l6, t, _) : q(_, l6, l6, e.__k, l6.__e, t));
    return t;
}
function q(e, t, _, r7, l7, o) {
    var s6, u, p3;
    if (t.__d !== void 0) s6 = t.__d, t.__d = void 0;
    else if (_ == null || l7 != o || l7.parentNode == null) e: if (o == null || o.parentNode !== e) e.appendChild(l7), s6 = null;
    else {
        for(u = o, p3 = 0; (u = u.nextSibling) && p3 < r7.length; p3 += 2)if (u == l7) break e;
        e.insertBefore(l7, o), s6 = o;
    }
    return s6 !== void 0 ? s6 : l7.nextSibling;
}
function te(e, t, _, r8, l8) {
    var o;
    for(o in _)o === "children" || o === "key" || o in t || T(e, o, null, _[o], r8);
    for(o in t)l8 && typeof t[o] != "function" || o === "children" || o === "key" || o === "value" || o === "checked" || _[o] === t[o] || T(e, o, t[o], _[o], r8);
}
function F(e, t, _) {
    t[0] === "-" ? e.setProperty(t, _) : e[t] = _ == null ? "" : typeof _ != "number" || Y.test(t) ? _ : _ + "px";
}
function T(e, t, _, r9, l9) {
    var o;
    e: if (t === "style") if (typeof _ == "string") e.style.cssText = _;
    else {
        if (typeof r9 == "string" && (e.style.cssText = r9 = ""), r9) for(t in r9)_ && t in _ || F(e.style, t, "");
        if (_) for(t in _)r9 && _[t] === r9[t] || F(e.style, t, _[t]);
    }
    else if (t[0] === "o" && t[1] === "n") o = t !== (t = t.replace(/Capture$/, "")), t = t.toLowerCase() in e ? t.toLowerCase().slice(2) : t.slice(2), e.l || (e.l = {}), e.l[t + o] = _, _ ? r9 || e.addEventListener(t, o ? I : H, o) : e.removeEventListener(t, o ? I : H, o);
    else if (t !== "dangerouslySetInnerHTML") {
        if (l9) t = t.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");
        else if (t !== "href" && t !== "list" && t !== "form" && t !== "tabIndex" && t !== "download" && t in e) try {
            e[t] = _ ?? "";
            break e;
        } catch  {}
        typeof _ == "function" || (_ != null && (_ !== !1 || t[0] === "a" && t[1] === "r") ? e.setAttribute(t, _) : e.removeAttribute(t));
    }
}
function H(e) {
    this.l[e.type + !1](d.event ? d.event(e) : e);
}
function I(e) {
    this.l[e.type + !0](d.event ? d.event(e) : e);
}
function M(e, t, _, r10, l10, o, s7, u, p4) {
    var a5, n, v, c4, i53, f, b8, h3, y4, m8, w, g = t.type;
    if (t.constructor !== void 0) return null;
    _.__h != null && (p4 = _.__h, u = t.__e = _.__e, t.__h = null, o = [
        u
    ]), (a5 = d.__b) && a5(t);
    try {
        e: if (typeof g == "function") {
            if (h3 = t.props, y4 = (a5 = g.contextType) && r10[a5.__c], m8 = a5 ? y4 ? y4.props.value : a5.__ : r10, _.__c ? b8 = (n = t.__c = _.__c).__ = n.__E : ("prototype" in g && g.prototype.render ? t.__c = n = new g(h3, m8) : (t.__c = n = new A(h3, m8), n.constructor = g, n.render = ne), y4 && y4.sub(n), n.props = h3, n.state || (n.state = {}), n.context = m8, n.__n = r10, v = n.__d = !0, n.__h = []), n.__s == null && (n.__s = n.state), g.getDerivedStateFromProps != null && (n.__s == n.state && (n.__s = k({}, n.__s)), k(n.__s, g.getDerivedStateFromProps(h3, n.__s))), c4 = n.props, i53 = n.state, v) g.getDerivedStateFromProps == null && n.componentWillMount != null && n.componentWillMount(), n.componentDidMount != null && n.__h.push(n.componentDidMount);
            else {
                if (g.getDerivedStateFromProps == null && h3 !== c4 && n.componentWillReceiveProps != null && n.componentWillReceiveProps(h3, m8), !n.__e && n.shouldComponentUpdate != null && n.shouldComponentUpdate(h3, n.__s, m8) === !1 || t.__v === _.__v) {
                    n.props = h3, n.state = n.__s, t.__v !== _.__v && (n.__d = !1), n.__v = t, t.__e = _.__e, t.__k = _.__k, t.__k.forEach(function(E1) {
                        E1 && (E1.__ = t);
                    }), n.__h.length && s7.push(n);
                    break e;
                }
                n.componentWillUpdate != null && n.componentWillUpdate(h3, n.__s, m8), n.componentDidUpdate != null && n.__h.push(function() {
                    n.componentDidUpdate(c4, i53, f);
                });
            }
            n.context = m8, n.props = h3, n.state = n.__s, (a5 = d.__r) && a5(t), n.__d = !1, n.__v = t, n.__P = e, a5 = n.render(n.props, n.state, n.context), n.state = n.__s, n.getChildContext != null && (r10 = k(k({}, r10), n.getChildContext())), v || n.getSnapshotBeforeUpdate == null || (f = n.getSnapshotBeforeUpdate(c4, i53)), w = a5 != null && a5.type === N && a5.key == null ? a5.props.children : a5, z(e, Array.isArray(w) ? w : [
                w
            ], t, _, r10, l10, o, s7, u, p4), n.base = t.__e, t.__h = null, n.__h.length && s7.push(n), b8 && (n.__E = n.__ = null), n.__e = !1;
        } else o == null && t.__v === _.__v ? (t.__k = _.__k, t.__e = _.__e) : t.__e = _e(_.__e, t, _, r10, l10, o, s7, p4);
        (a5 = d.diffed) && a5(t);
    } catch (E2) {
        t.__v = null, (p4 || o != null) && (t.__e = u, t.__h = !!p4, o[o.indexOf(u)] = null), d.__e(E2, t, _);
    }
}
function J(e, t) {
    d.__c && d.__c(t, e), e.some(function(_) {
        try {
            e = _.__h, _.__h = [], e.some(function(r11) {
                r11.call(_);
            });
        } catch (r12) {
            d.__e(r12, _.__v);
        }
    });
}
function _e(e, t, _, r13, l11, o, s8, u) {
    var p5, a6, n, v = _.props, c5 = t.props, i54 = t.type, f = 0;
    if (i54 === "svg" && (l11 = !0), o != null) {
        for(; f < o.length; f++)if ((p5 = o[f]) && (p5 === e || (i54 ? p5.localName == i54 : p5.nodeType == 3))) {
            e = p5, o[f] = null;
            break;
        }
    }
    if (e == null) {
        if (i54 === null) return document.createTextNode(c5);
        e = l11 ? document.createElementNS("http://www.w3.org/2000/svg", i54) : document.createElement(i54, c5.is && c5), o = null, u = !1;
    }
    if (i54 === null) v === c5 || u && e.data === c5 || (e.data = c5);
    else {
        if (o = o && S.call(e.childNodes), a6 = (v = _.props || U).dangerouslySetInnerHTML, n = c5.dangerouslySetInnerHTML, !u) {
            if (o != null) for(v = {}, f = 0; f < e.attributes.length; f++)v[e.attributes[f].name] = e.attributes[f].value;
            (n || a6) && (n && (a6 && n.__html == a6.__html || n.__html === e.innerHTML) || (e.innerHTML = n && n.__html || ""));
        }
        if (te(e, c5, v, l11, u), n) t.__k = [];
        else if (f = t.props.children, z(e, Array.isArray(f) ? f : [
            f
        ], t, _, r13, l11 && i54 !== "foreignObject", o, s8, o ? o[0] : _.__k && C(_, 0), u), o != null) for(f = o.length; f--;)o[f] != null && V(o[f]);
        u || ("value" in c5 && (f = c5.value) !== void 0 && (f !== e.value || i54 === "progress" && !f) && T(e, "value", f, v.value, !1), "checked" in c5 && (f = c5.checked) !== void 0 && f !== e.checked && T(e, "checked", f, v.checked, !1));
    }
    return e;
}
function K(e, t, _) {
    try {
        typeof e == "function" ? e(t) : e.current = t;
    } catch (r14) {
        d.__e(r14, _);
    }
}
function Q(e, t, _) {
    var r15, l12;
    if (d.unmount && d.unmount(e), (r15 = e.ref) && (r15.current && r15.current !== e.__e || K(r15, null, t)), (r15 = e.__c) != null) {
        if (r15.componentWillUnmount) try {
            r15.componentWillUnmount();
        } catch (o) {
            d.__e(o, t);
        }
        r15.base = r15.__P = null;
    }
    if (r15 = e.__k) for(l12 = 0; l12 < r15.length; l12++)r15[l12] && Q(r15[l12], t, typeof e.type != "function");
    _ || e.__e == null || V(e.__e), e.__e = e.__d = void 0;
}
function ne(e, t, _) {
    return this.constructor(e, _);
}
function se(e, t) {
    var _ = {
        __c: t = "__cC" + B++,
        __: e,
        Consumer: function(r16, l13) {
            return r16.children(l13);
        },
        Provider: function(r17) {
            var l14, o;
            return this.getChildContext || (l14 = [], (o = {})[t] = this, this.getChildContext = function() {
                return o;
            }, this.shouldComponentUpdate = function(s9) {
                this.props.value !== s9.value && l14.some(L);
            }, this.sub = function(s10) {
                l14.push(s10);
                var u = s10.componentWillUnmount;
                s10.componentWillUnmount = function() {
                    l14.splice(l14.indexOf(s10), 1), u && u.call(s10);
                };
            }), r17.children;
        }
    };
    return _.Provider.__ = _.Consumer.contextType = _;
}
S = $.slice, d = {
    __e: function(e, t) {
        for(var _, r18, l15; t = t.__;)if ((_ = t.__c) && !_.__) try {
            if ((r18 = _.constructor) && r18.getDerivedStateFromError != null && (_.setState(r18.getDerivedStateFromError(e)), l15 = _.__d), _.componentDidCatch != null && (_.componentDidCatch(e), l15 = _.__d), l15) return _.__E = _;
        } catch (o) {
            e = o;
        }
        throw e;
    }
}, O = 0, A.prototype.setState = function(e, t) {
    var _;
    _ = this.__s != null && this.__s !== this.state ? this.__s : this.__s = k({}, this.state), typeof e == "function" && (e = e(k({}, _), this.props)), e && k(_, e), e != null && this.__v && (t && this.__h.push(t), L(this));
}, A.prototype.forceUpdate = function(e) {
    this.__v && (this.__e = !0, e && this.__h.push(e), L(this));
}, A.prototype.render = N, x = [], R = typeof Promise == "function" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, D.__r = 0, B = 0;
var ae = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|^--/i, ie = /[&<>"]/;
function Q1(t) {
    var e = String(t);
    return ie.test(e) ? e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") : e;
}
var W1 = function(t, e) {
    return String(t).replace(/(\n+)/g, "$1" + (e || "	"));
}, U1 = function(t, e, r19) {
    return String(t).length > (e || 40) || !r19 && String(t).indexOf(`
`) !== -1 || String(t).indexOf("<") !== -1;
}, j1 = {};
function se1(t) {
    var e = "";
    for(var r20 in t){
        var u = t[r20];
        u != null && u !== "" && (e && (e += " "), e += r20[0] == "-" ? r20 : j1[r20] || (j1[r20] = r20.replace(/([A-Z])/g, "-$1").toLowerCase()), e += ": ", e += u, typeof u == "number" && ae.test(r20) === !1 && (e += "px"), e += ";");
    }
    return e || void 0;
}
function A1(t, e) {
    for(var r21 in e)t[r21] = e[r21];
    return t;
}
function q1(t, e) {
    return Array.isArray(e) ? e.reduce(q1, t) : e != null && e !== !1 && t.push(e), t;
}
var le = {
    shallow: !0
}, P1 = [], fe = /^(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)$/, ee = /[\s\n\\/='"\0<>]/, te1 = function() {};
m.render = m;
var ue = function(t, e) {
    return m(t, e, le);
}, re = [];
function m(t, e, r22) {
    e = e || {}, r22 = r22 || {};
    var u = d.__s;
    d.__s = !0;
    var v = h(t, e, r22);
    return d.__c && d.__c(t, re), re.length = 0, d.__s = u, v;
}
function h(t, e, r23, u, v, g) {
    if (t == null || typeof t == "boolean") return "";
    if (typeof t != "object") return Q1(t);
    var l16 = r23.pretty, x6 = l16 && typeof l16 == "string" ? l16 : "	";
    if (Array.isArray(t)) {
        for(var T1 = "", y5 = 0; y5 < t.length; y5++)l16 && y5 > 0 && (T1 += `
`), T1 += h(t[y5], e, r23, u, v, g);
        return T1;
    }
    var b9, a7 = t.type, c6 = t.props, z1 = !1;
    if (typeof a7 == "function") {
        if (z1 = !0, !r23.shallow || !u && r23.renderRootComponent !== !1) {
            if (a7 === N) {
                var G1 = [];
                return q1(G1, t.props.children), h(G1, e, r23, r23.shallowHighOrder !== !1, v, g);
            }
            var E3, n = t.__c = {
                __v: t,
                context: e,
                props: t.props,
                setState: te1,
                forceUpdate: te1,
                __h: []
            };
            if (d.__b && d.__b(t), d.__r && d.__r(t), a7.prototype && typeof a7.prototype.render == "function") {
                var w = a7.contextType, X = w && e[w.__c], B1 = w != null ? X ? X.props.value : w.__ : e;
                (n = t.__c = new a7(c6, B1)).__v = t, n._dirty = n.__d = !0, n.props = c6, n.state == null && (n.state = {}), n._nextState == null && n.__s == null && (n._nextState = n.__s = n.state), n.context = B1, a7.getDerivedStateFromProps ? n.state = A1(A1({}, n.state), a7.getDerivedStateFromProps(n.props, n.state)) : n.componentWillMount && (n.componentWillMount(), n.state = n._nextState !== n.state ? n._nextState : n.__s !== n.state ? n.__s : n.state), E3 = n.render(n.props, n.state, n.context);
            } else {
                var S1 = a7.contextType, J1 = S1 && e[S1.__c];
                E3 = a7.call(t.__c, c6, S1 != null ? J1 ? J1.props.value : S1.__ : e);
            }
            return n.getChildContext && (e = A1(A1({}, e), n.getChildContext())), d.diffed && d.diffed(t), h(E3, e, r23, r23.shallowHighOrder !== !1, v, g);
        }
        a7 = (b9 = a7).displayName || b9 !== Function && b9.name || (function(Z1) {
            var $1 = (Function.prototype.toString.call(Z1).match(/^\s*function\s+([^( ]+)/) || "")[1];
            if (!$1) {
                for(var C1 = -1, R1 = P1.length; R1--;)if (P1[R1] === Z1) {
                    C1 = R1;
                    break;
                }
                C1 < 0 && (C1 = P1.push(Z1) - 1), $1 = "UnnamedComponent" + C1;
            }
            return $1;
        })(b9);
    }
    var k2, _, i55 = "<" + a7;
    if (c6) {
        var H2 = Object.keys(c6);
        r23 && r23.sortAttributes === !0 && H2.sort();
        for(var M1 = 0; M1 < H2.length; M1++){
            var o = H2[M1], s11 = c6[o];
            if (o !== "children") {
                if (!ee.test(o) && (r23 && r23.allAttributes || o !== "key" && o !== "ref" && o !== "__self" && o !== "__source" && o !== "defaultValue")) {
                    if (o === "className") {
                        if (c6.class) continue;
                        o = "class";
                    } else v && o.match(/^xlink:?./) && (o = o.toLowerCase().replace(/^xlink:?/, "xlink:"));
                    if (o === "htmlFor") {
                        if (c6.for) continue;
                        o = "for";
                    }
                    o === "style" && s11 && typeof s11 == "object" && (s11 = se1(s11)), o[0] === "a" && o[1] === "r" && typeof s11 == "boolean" && (s11 = String(s11));
                    var D1 = r23.attributeHook && r23.attributeHook(o, s11, e, r23, z1);
                    if (D1 || D1 === "") i55 += D1;
                    else if (o === "dangerouslySetInnerHTML") _ = s11 && s11.__html;
                    else if (a7 === "textarea" && o === "value") k2 = s11;
                    else if ((s11 || s11 === 0 || s11 === "") && typeof s11 != "function") {
                        if (!(s11 !== !0 && s11 !== "" || (s11 = o, r23 && r23.xml))) {
                            i55 += " " + o;
                            continue;
                        }
                        if (o === "value") {
                            if (a7 === "select") {
                                g = s11;
                                continue;
                            }
                            a7 === "option" && g == s11 && (i55 += " selected");
                        }
                        i55 += " " + o + '="' + Q1(s11) + '"';
                    }
                }
            } else k2 = s11;
        }
    }
    if (l16) {
        var F2 = i55.replace(/\n\s*/, " ");
        F2 === i55 || ~F2.indexOf(`
`) ? l16 && ~i55.indexOf(`
`) && (i55 += `
`) : i55 = F2;
    }
    if (i55 += ">", ee.test(a7)) throw new Error(a7 + " is not a valid HTML tag name in " + i55);
    var O1, ne1 = fe.test(a7) || r23.voidElements && r23.voidElements.test(a7), p6 = [];
    if (_) l16 && U1(_) && (_ = `
` + x6 + W1(_, x6)), i55 += _;
    else if (k2 != null && q1(O1 = [], k2).length) {
        for(var L2 = l16 && ~i55.indexOf(`
`), K1 = !1, N1 = 0; N1 < O1.length; N1++){
            var I1 = O1[N1];
            if (I1 != null && I1 !== !1) {
                var d4 = h(I1, e, r23, !0, a7 === "svg" || a7 !== "foreignObject" && v, g);
                if (l16 && !L2 && U1(d4) && (L2 = !0), d4) if (l16) {
                    var Y1 = d4.length > 0 && d4[0] != "<";
                    K1 && Y1 ? p6[p6.length - 1] += d4 : p6.push(d4), K1 = Y1;
                } else p6.push(d4);
            }
        }
        if (l16 && L2) for(var V1 = p6.length; V1--;)p6[V1] = `
` + x6 + W1(p6[V1], x6);
    }
    if (p6.length || _) i55 += p6.join("");
    else if (r23 && r23.xml) return i55.substring(0, i55.length - 1) + " />";
    return !ne1 || O1 || _ ? (l16 && ~i55.indexOf(`
`) && (i55 += `
`), i55 += "</" + a7 + ">") : i55 = i55.replace(/>$/, " />"), i55;
}
m.shallowRender = ue;
const osType = (()=>{
    const { Deno  } = globalThis;
    if (typeof Deno?.build?.os === "string") {
        return Deno.build.os;
    }
    const { navigator  } = globalThis;
    if (navigator?.appVersion?.includes?.("Win") ?? false) {
        return "windows";
    }
    return "linux";
})();
const isWindows = osType === "windows";
const CHAR_FORWARD_SLASH = 47;
function assertPath(path13) {
    if (typeof path13 !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path13)}`);
    }
}
function isPosixPathSeparator(code) {
    return code === 47;
}
function isPathSeparator(code) {
    return isPosixPathSeparator(code) || code === 92;
}
function isWindowsDeviceRoot(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString(path14, allowAboveRoot, separator, isPathSeparator1) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i56 = 0, len = path14.length; i56 <= len; ++i56){
        if (i56 < len) code = path14.charCodeAt(i56);
        else if (isPathSeparator1(code)) break;
        else code = CHAR_FORWARD_SLASH;
        if (isPathSeparator1(code)) {
            if (lastSlash === i56 - 1 || dots === 1) {} else if (lastSlash !== i56 - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i56;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i56;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path14.slice(lastSlash + 1, i56);
                else res = path14.slice(lastSlash + 1, i56);
                lastSegmentLength = i56 - lastSlash - 1;
            }
            lastSlash = i56;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format(sep9, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep9 + base;
}
const WHITESPACE_ENCODINGS = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace(string) {
    return string.replaceAll(/[\s]/g, (c7)=>{
        return WHITESPACE_ENCODINGS[c7] ?? c7;
    });
}
class DenoStdInternalError extends Error {
    constructor(message){
        super(message);
        this.name = "DenoStdInternalError";
    }
}
function assert(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError(msg);
    }
}
const sep = "\\";
const delimiter = ";";
function resolve(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i57 = pathSegments.length - 1; i57 >= -1; i57--){
        let path15;
        const { Deno  } = globalThis;
        if (i57 >= 0) {
            path15 = pathSegments[i57];
        } else if (!resolvedDevice) {
            if (typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path15 = Deno.cwd();
        } else {
            if (typeof Deno?.env?.get !== "function" || typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path15 = Deno.env.get(`=${resolvedDevice}`) || Deno.cwd();
            if (path15 === undefined || path15.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path15 = `${resolvedDevice}\\`;
            }
        }
        assertPath(path15);
        const len = path15.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute1 = false;
        const code = path15.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator(code)) {
                isAbsolute1 = true;
                if (isPathSeparator(path15.charCodeAt(1))) {
                    let j6 = 2;
                    let last = j6;
                    for(; j6 < len; ++j6){
                        if (isPathSeparator(path15.charCodeAt(j6))) break;
                    }
                    if (j6 < len && j6 !== last) {
                        const firstPart = path15.slice(last, j6);
                        last = j6;
                        for(; j6 < len; ++j6){
                            if (!isPathSeparator(path15.charCodeAt(j6))) break;
                        }
                        if (j6 < len && j6 !== last) {
                            last = j6;
                            for(; j6 < len; ++j6){
                                if (isPathSeparator(path15.charCodeAt(j6))) break;
                            }
                            if (j6 === len) {
                                device = `\\\\${firstPart}\\${path15.slice(last)}`;
                                rootEnd = j6;
                            } else if (j6 !== last) {
                                device = `\\\\${firstPart}\\${path15.slice(last, j6)}`;
                                rootEnd = j6;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot(code)) {
                if (path15.charCodeAt(1) === 58) {
                    device = path15.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator(path15.charCodeAt(2))) {
                            isAbsolute1 = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator(code)) {
            rootEnd = 1;
            isAbsolute1 = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path15.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute1;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize(path16) {
    assertPath(path16);
    const len = path16.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute2 = false;
    const code = path16.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            isAbsolute2 = true;
            if (isPathSeparator(path16.charCodeAt(1))) {
                let j7 = 2;
                let last = j7;
                for(; j7 < len; ++j7){
                    if (isPathSeparator(path16.charCodeAt(j7))) break;
                }
                if (j7 < len && j7 !== last) {
                    const firstPart = path16.slice(last, j7);
                    last = j7;
                    for(; j7 < len; ++j7){
                        if (!isPathSeparator(path16.charCodeAt(j7))) break;
                    }
                    if (j7 < len && j7 !== last) {
                        last = j7;
                        for(; j7 < len; ++j7){
                            if (isPathSeparator(path16.charCodeAt(j7))) break;
                        }
                        if (j7 === len) {
                            return `\\\\${firstPart}\\${path16.slice(last)}\\`;
                        } else if (j7 !== last) {
                            device = `\\\\${firstPart}\\${path16.slice(last, j7)}`;
                            rootEnd = j7;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path16.charCodeAt(1) === 58) {
                device = path16.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path16.charCodeAt(2))) {
                        isAbsolute2 = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString(path16.slice(rootEnd), !isAbsolute2, "\\", isPathSeparator);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute2) tail = ".";
    if (tail.length > 0 && isPathSeparator(path16.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute2) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute2) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute(path17) {
    assertPath(path17);
    const len = path17.length;
    if (len === 0) return false;
    const code = path17.charCodeAt(0);
    if (isPathSeparator(code)) {
        return true;
    } else if (isWindowsDeviceRoot(code)) {
        if (len > 2 && path17.charCodeAt(1) === 58) {
            if (isPathSeparator(path17.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i58 = 0; i58 < pathsCount; ++i58){
        const path18 = paths[i58];
        assertPath(path18);
        if (path18.length > 0) {
            if (joined === undefined) joined = firstPart = path18;
            else joined += `\\${path18}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert(firstPart != null);
    if (isPathSeparator(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize(joined);
}
function relative(from1, to) {
    assertPath(from1);
    assertPath(to);
    if (from1 === to) return "";
    const fromOrig = resolve(from1);
    const toOrig = resolve(to);
    if (fromOrig === toOrig) return "";
    from1 = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from1 === to) return "";
    let fromStart = 0;
    let fromEnd = from1.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from1.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from1.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i59 = 0;
    for(; i59 <= length; ++i59){
        if (i59 === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i59) === 92) {
                    return toOrig.slice(toStart + i59 + 1);
                } else if (i59 === 2) {
                    return toOrig.slice(toStart + i59);
                }
            }
            if (fromLen > length) {
                if (from1.charCodeAt(fromStart + i59) === 92) {
                    lastCommonSep = i59;
                } else if (i59 === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from1.charCodeAt(fromStart + i59);
        const toCode = to.charCodeAt(toStart + i59);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i59;
    }
    if (i59 !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i59 = fromStart + lastCommonSep + 1; i59 <= fromEnd; ++i59){
        if (i59 === fromEnd || from1.charCodeAt(i59) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath(path19) {
    if (typeof path19 !== "string") return path19;
    if (path19.length === 0) return "";
    const resolvedPath = resolve(path19);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path19;
}
function dirname(path20) {
    assertPath(path20);
    const len = path20.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path20.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator(path20.charCodeAt(1))) {
                let j8 = 2;
                let last = j8;
                for(; j8 < len; ++j8){
                    if (isPathSeparator(path20.charCodeAt(j8))) break;
                }
                if (j8 < len && j8 !== last) {
                    last = j8;
                    for(; j8 < len; ++j8){
                        if (!isPathSeparator(path20.charCodeAt(j8))) break;
                    }
                    if (j8 < len && j8 !== last) {
                        last = j8;
                        for(; j8 < len; ++j8){
                            if (isPathSeparator(path20.charCodeAt(j8))) break;
                        }
                        if (j8 === len) {
                            return path20;
                        }
                        if (j8 !== last) {
                            rootEnd = offset = j8 + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path20.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator(path20.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return path20;
    }
    for(let i60 = len - 1; i60 >= offset; --i60){
        if (isPathSeparator(path20.charCodeAt(i60))) {
            if (!matchedSlash) {
                end = i60;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return path20.slice(0, end);
}
function basename(path21, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path21);
    let start15 = 0;
    let end = -1;
    let matchedSlash = true;
    let i61;
    if (path21.length >= 2) {
        const drive = path21.charCodeAt(0);
        if (isWindowsDeviceRoot(drive)) {
            if (path21.charCodeAt(1) === 58) start15 = 2;
        }
    }
    if (ext !== undefined && ext.length > 0 && ext.length <= path21.length) {
        if (ext.length === path21.length && ext === path21) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i61 = path21.length - 1; i61 >= start15; --i61){
            const code = path21.charCodeAt(i61);
            if (isPathSeparator(code)) {
                if (!matchedSlash) {
                    start15 = i61 + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i61 + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i61;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start15 === end) end = firstNonSlashEnd;
        else if (end === -1) end = path21.length;
        return path21.slice(start15, end);
    } else {
        for(i61 = path21.length - 1; i61 >= start15; --i61){
            if (isPathSeparator(path21.charCodeAt(i61))) {
                if (!matchedSlash) {
                    start15 = i61 + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i61 + 1;
            }
        }
        if (end === -1) return "";
        return path21.slice(start15, end);
    }
}
function extname(path22) {
    assertPath(path22);
    let start16 = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path22.length >= 2 && path22.charCodeAt(1) === 58 && isWindowsDeviceRoot(path22.charCodeAt(0))) {
        start16 = startPart = 2;
    }
    for(let i62 = path22.length - 1; i62 >= start16; --i62){
        const code = path22.charCodeAt(i62);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i62 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i62 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i62;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path22.slice(startDot, end);
}
function format(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("\\", pathObject);
}
function parse(path23) {
    assertPath(path23);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path23.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path23.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = 1;
            if (isPathSeparator(path23.charCodeAt(1))) {
                let j9 = 2;
                let last = j9;
                for(; j9 < len; ++j9){
                    if (isPathSeparator(path23.charCodeAt(j9))) break;
                }
                if (j9 < len && j9 !== last) {
                    last = j9;
                    for(; j9 < len; ++j9){
                        if (!isPathSeparator(path23.charCodeAt(j9))) break;
                    }
                    if (j9 < len && j9 !== last) {
                        last = j9;
                        for(; j9 < len; ++j9){
                            if (isPathSeparator(path23.charCodeAt(j9))) break;
                        }
                        if (j9 === len) {
                            rootEnd = j9;
                        } else if (j9 !== last) {
                            rootEnd = j9 + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path23.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path23.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path23;
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path23;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        ret.root = ret.dir = path23;
        return ret;
    }
    if (rootEnd > 0) ret.root = path23.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i63 = path23.length - 1;
    let preDotState = 0;
    for(; i63 >= rootEnd; --i63){
        code = path23.charCodeAt(i63);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i63 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i63 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i63;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path23.slice(startPart, end);
        }
    } else {
        ret.name = path23.slice(startPart, startDot);
        ret.base = path23.slice(startPart, end);
        ret.ext = path23.slice(startDot, end);
    }
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path23.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path24 = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path24 = `\\\\${url.hostname}${path24}`;
    }
    return path24;
}
function toFileUrl(path25) {
    if (!isAbsolute(path25)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path25.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod2 = {
    sep: sep,
    delimiter: delimiter,
    resolve: resolve,
    normalize: normalize,
    isAbsolute: isAbsolute,
    join: join,
    relative: relative,
    toNamespacedPath: toNamespacedPath,
    dirname: dirname,
    basename: basename,
    extname: extname,
    format: format,
    parse: parse,
    fromFileUrl: fromFileUrl,
    toFileUrl: toFileUrl
};
const sep1 = "/";
const delimiter1 = ":";
function resolve1(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i64 = pathSegments.length - 1; i64 >= -1 && !resolvedAbsolute; i64--){
        let path26;
        if (i64 >= 0) path26 = pathSegments[i64];
        else {
            const { Deno  } = globalThis;
            if (typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path26 = Deno.cwd();
        }
        assertPath(path26);
        if (path26.length === 0) {
            continue;
        }
        resolvedPath = `${path26}/${resolvedPath}`;
        resolvedAbsolute = path26.charCodeAt(0) === CHAR_FORWARD_SLASH;
    }
    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize1(path27) {
    assertPath(path27);
    if (path27.length === 0) return ".";
    const isAbsolute1 = path27.charCodeAt(0) === 47;
    const trailingSeparator = path27.charCodeAt(path27.length - 1) === 47;
    path27 = normalizeString(path27, !isAbsolute1, "/", isPosixPathSeparator);
    if (path27.length === 0 && !isAbsolute1) path27 = ".";
    if (path27.length > 0 && trailingSeparator) path27 += "/";
    if (isAbsolute1) return `/${path27}`;
    return path27;
}
function isAbsolute1(path28) {
    assertPath(path28);
    return path28.length > 0 && path28.charCodeAt(0) === 47;
}
function join1(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i65 = 0, len = paths.length; i65 < len; ++i65){
        const path29 = paths[i65];
        assertPath(path29);
        if (path29.length > 0) {
            if (!joined) joined = path29;
            else joined += `/${path29}`;
        }
    }
    if (!joined) return ".";
    return normalize1(joined);
}
function relative1(from2, to) {
    assertPath(from2);
    assertPath(to);
    if (from2 === to) return "";
    from2 = resolve1(from2);
    to = resolve1(to);
    if (from2 === to) return "";
    let fromStart = 1;
    const fromEnd = from2.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from2.charCodeAt(fromStart) !== 47) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 47) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i66 = 0;
    for(; i66 <= length; ++i66){
        if (i66 === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i66) === 47) {
                    return to.slice(toStart + i66 + 1);
                } else if (i66 === 0) {
                    return to.slice(toStart + i66);
                }
            } else if (fromLen > length) {
                if (from2.charCodeAt(fromStart + i66) === 47) {
                    lastCommonSep = i66;
                } else if (i66 === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from2.charCodeAt(fromStart + i66);
        const toCode = to.charCodeAt(toStart + i66);
        if (fromCode !== toCode) break;
        else if (fromCode === 47) lastCommonSep = i66;
    }
    let out = "";
    for(i66 = fromStart + lastCommonSep + 1; i66 <= fromEnd; ++i66){
        if (i66 === fromEnd || from2.charCodeAt(i66) === 47) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath1(path30) {
    return path30;
}
function dirname1(path31) {
    assertPath(path31);
    if (path31.length === 0) return ".";
    const hasRoot = path31.charCodeAt(0) === 47;
    let end = -1;
    let matchedSlash = true;
    for(let i67 = path31.length - 1; i67 >= 1; --i67){
        if (path31.charCodeAt(i67) === 47) {
            if (!matchedSlash) {
                end = i67;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) return hasRoot ? "/" : ".";
    if (hasRoot && end === 1) return "//";
    return path31.slice(0, end);
}
function basename1(path32, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path32);
    let start17 = 0;
    let end = -1;
    let matchedSlash = true;
    let i68;
    if (ext !== undefined && ext.length > 0 && ext.length <= path32.length) {
        if (ext.length === path32.length && ext === path32) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i68 = path32.length - 1; i68 >= 0; --i68){
            const code = path32.charCodeAt(i68);
            if (code === 47) {
                if (!matchedSlash) {
                    start17 = i68 + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i68 + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i68;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start17 === end) end = firstNonSlashEnd;
        else if (end === -1) end = path32.length;
        return path32.slice(start17, end);
    } else {
        for(i68 = path32.length - 1; i68 >= 0; --i68){
            if (path32.charCodeAt(i68) === 47) {
                if (!matchedSlash) {
                    start17 = i68 + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i68 + 1;
            }
        }
        if (end === -1) return "";
        return path32.slice(start17, end);
    }
}
function extname1(path33) {
    assertPath(path33);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i69 = path33.length - 1; i69 >= 0; --i69){
        const code = path33.charCodeAt(i69);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i69 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i69 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i69;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path33.slice(startDot, end);
}
function format1(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("/", pathObject);
}
function parse1(path34) {
    assertPath(path34);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path34.length === 0) return ret;
    const isAbsolute2 = path34.charCodeAt(0) === 47;
    let start18;
    if (isAbsolute2) {
        ret.root = "/";
        start18 = 1;
    } else {
        start18 = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i70 = path34.length - 1;
    let preDotState = 0;
    for(; i70 >= start18; --i70){
        const code = path34.charCodeAt(i70);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i70 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i70 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i70;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute2) {
                ret.base = ret.name = path34.slice(1, end);
            } else {
                ret.base = ret.name = path34.slice(startPart, end);
            }
        }
    } else {
        if (startPart === 0 && isAbsolute2) {
            ret.name = path34.slice(1, startDot);
            ret.base = path34.slice(1, end);
        } else {
            ret.name = path34.slice(startPart, startDot);
            ret.base = path34.slice(startPart, end);
        }
        ret.ext = path34.slice(startDot, end);
    }
    if (startPart > 0) ret.dir = path34.slice(0, startPart - 1);
    else if (isAbsolute2) ret.dir = "/";
    return ret;
}
function fromFileUrl1(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl1(path35) {
    if (!isAbsolute1(path35)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(path35.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod3 = {
    sep: sep1,
    delimiter: delimiter1,
    resolve: resolve1,
    normalize: normalize1,
    isAbsolute: isAbsolute1,
    join: join1,
    relative: relative1,
    toNamespacedPath: toNamespacedPath1,
    dirname: dirname1,
    basename: basename1,
    extname: extname1,
    format: format1,
    parse: parse1,
    fromFileUrl: fromFileUrl1,
    toFileUrl: toFileUrl1
};
const path = isWindows ? mod2 : mod3;
const { join: join2 , normalize: normalize2  } = path;
const path1 = isWindows ? mod2 : mod3;
const { basename: basename2 , delimiter: delimiter2 , dirname: dirname2 , extname: extname2 , format: format2 , fromFileUrl: fromFileUrl2 , isAbsolute: isAbsolute2 , join: join3 , normalize: normalize3 , parse: parse2 , relative: relative2 , resolve: resolve2 , sep: sep2 , toFileUrl: toFileUrl2 , toNamespacedPath: toNamespacedPath2 ,  } = path1;
async function _createWalkEntry(path36) {
    path36 = normalize3(path36);
    const name = basename2(path36);
    const info1 = await Deno.stat(path36);
    return {
        path: path36,
        name,
        isFile: info1.isFile,
        isDirectory: info1.isDirectory,
        isSymlink: info1.isSymlink
    };
}
function include(path37, exts, match, skip) {
    if (exts && !exts.some((ext)=>path37.endsWith(ext)
    )) {
        return false;
    }
    if (match && !match.some((pattern)=>!!path37.match(pattern)
    )) {
        return false;
    }
    if (skip && skip.some((pattern)=>!!path37.match(pattern)
    )) {
        return false;
    }
    return true;
}
function wrapErrorWithRootPath(err, root) {
    if (err instanceof Error && "root" in err) return err;
    const e = new Error();
    e.root = root;
    e.message = err instanceof Error ? `${err.message} for path "${root}"` : `[non-error thrown] for path "${root}"`;
    e.stack = err instanceof Error ? err.stack : undefined;
    e.cause = err instanceof Error ? err.cause : undefined;
    return e;
}
async function* walk(root, { maxDepth =Infinity , includeFiles =true , includeDirs =true , followSymlinks =false , exts =undefined , match =undefined , skip =undefined  } = {}) {
    if (maxDepth < 0) {
        return;
    }
    if (includeDirs && include(root, exts, match, skip)) {
        yield await _createWalkEntry(root);
    }
    if (maxDepth < 1 || !include(root, undefined, undefined, skip)) {
        return;
    }
    try {
        for await (const entry of Deno.readDir(root)){
            assert(entry.name != null);
            let path38 = join3(root, entry.name);
            if (entry.isSymlink) {
                if (followSymlinks) {
                    path38 = await Deno.realPath(path38);
                } else {
                    continue;
                }
            }
            if (entry.isFile) {
                if (includeFiles && include(path38, exts, match, skip)) {
                    yield {
                        path: path38,
                        ...entry
                    };
                }
            } else {
                yield* walk(path38, {
                    maxDepth: maxDepth - 1,
                    includeFiles,
                    includeDirs,
                    followSymlinks,
                    exts,
                    match,
                    skip
                });
            }
        }
    } catch (err) {
        throw wrapErrorWithRootPath(err, normalize3(root));
    }
}
function delay(ms, options = {}) {
    const { signal  } = options;
    return new Promise((resolve23, reject)=>{
        const abort = ()=>{
            clearTimeout(i71);
            reject(new DOMException("Delay was aborted.", "AbortError"));
        };
        const done = ()=>{
            signal?.removeEventListener("abort", abort);
            resolve23();
        };
        const i71 = setTimeout(done, ms);
        signal?.addEventListener("abort", abort, {
            once: true
        });
    });
}
const ERROR_SERVER_CLOSED = "Server closed";
const ERROR_ADDRESS_INVALID = "Invalid address";
const INITIAL_ACCEPT_BACKOFF_DELAY = 5;
const MAX_ACCEPT_BACKOFF_DELAY = 1000;
function _parseAddrFromStr(addr, defaultPort = 80) {
    const host = addr.startsWith(":") ? `0.0.0.0${addr}` : addr;
    let url;
    try {
        url = new URL(`http://${host}`);
    } catch  {
        throw new TypeError(ERROR_ADDRESS_INVALID);
    }
    if (url.username || url.password || url.pathname != "/" || url.search || url.hash) {
        throw new TypeError(ERROR_ADDRESS_INVALID);
    }
    return {
        hostname: url.hostname,
        port: url.port === "" ? defaultPort : Number(url.port)
    };
}
class Server {
    #addr;
    #handler;
    #closed = false;
    #listeners = new Set();
    #httpConnections = new Set();
    constructor(serverInit){
        this.#addr = serverInit.addr;
        this.#handler = serverInit.handler;
    }
    async serve(listener) {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        this.#trackListener(listener);
        try {
            return await this.#accept(listener);
        } finally{
            this.#untrackListener(listener);
            try {
                listener.close();
            } catch  {}
        }
    }
    async listenAndServe() {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        const addr = this.#addr ?? `:${80}`;
        const listenOptions = _parseAddrFromStr(addr, 80);
        const listener = Deno.listen({
            ...listenOptions,
            transport: "tcp"
        });
        return await this.serve(listener);
    }
    async listenAndServeTls(certFile, keyFile) {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        const addr = this.#addr ?? `:${443}`;
        const listenOptions = _parseAddrFromStr(addr, 443);
        const listener = Deno.listenTls({
            ...listenOptions,
            certFile,
            keyFile,
            transport: "tcp"
        });
        return await this.serve(listener);
    }
    close() {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        this.#closed = true;
        for (const listener of this.#listeners){
            try {
                listener.close();
            } catch  {}
        }
        this.#listeners.clear();
        for (const httpConn of this.#httpConnections){
            this.#closeHttpConn(httpConn);
        }
        this.#httpConnections.clear();
    }
    get closed() {
        return this.#closed;
    }
    get addrs() {
        return Array.from(this.#listeners).map((listener)=>listener.addr
        );
    }
    async #respond(requestEvent, httpCon, connInfo) {
        try {
            const response = await this.#handler(requestEvent.request, connInfo);
            await requestEvent.respondWith(response);
        } catch  {
            return this.#closeHttpConn(httpCon);
        }
    }
    async #serveHttp(httpConn, connInfo1) {
        while(!this.#closed){
            let requestEvent;
            try {
                requestEvent = await httpConn.nextRequest();
            } catch  {
                break;
            }
            if (requestEvent === null) {
                break;
            }
            this.#respond(requestEvent, httpConn, connInfo1);
        }
        this.#closeHttpConn(httpConn);
    }
    async #accept(listener) {
        let acceptBackoffDelay;
        while(!this.#closed){
            let conn;
            try {
                conn = await listener.accept();
            } catch (error) {
                if (error instanceof Deno.errors.BadResource || error instanceof Deno.errors.InvalidData || error instanceof Deno.errors.UnexpectedEof || error instanceof Deno.errors.ConnectionReset || error instanceof Deno.errors.NotConnected) {
                    if (!acceptBackoffDelay) {
                        acceptBackoffDelay = INITIAL_ACCEPT_BACKOFF_DELAY;
                    } else {
                        acceptBackoffDelay *= 2;
                    }
                    if (acceptBackoffDelay >= 1000) {
                        acceptBackoffDelay = MAX_ACCEPT_BACKOFF_DELAY;
                    }
                    await delay(acceptBackoffDelay);
                    continue;
                }
                throw error;
            }
            acceptBackoffDelay = undefined;
            let httpConn;
            try {
                httpConn = Deno.serveHttp(conn);
            } catch  {
                continue;
            }
            this.#trackHttpConnection(httpConn);
            const connInfo = {
                localAddr: conn.localAddr,
                remoteAddr: conn.remoteAddr
            };
            this.#serveHttp(httpConn, connInfo);
        }
    }
     #closeHttpConn(httpConn1) {
        this.#untrackHttpConnection(httpConn1);
        try {
            httpConn1.close();
        } catch  {}
    }
     #trackListener(listener1) {
        this.#listeners.add(listener1);
    }
     #untrackListener(listener2) {
        this.#listeners.delete(listener2);
    }
     #trackHttpConnection(httpConn2) {
        this.#httpConnections.add(httpConn2);
    }
     #untrackHttpConnection(httpConn3) {
        this.#httpConnections.delete(httpConn3);
    }
}
async function listenAndServe(addr, handler1, options) {
    const server = new Server({
        addr,
        handler: handler1
    });
    if (options?.signal) {
        options.signal.onabort = ()=>server.close()
        ;
    }
    return await server.listenAndServe();
}
function defaultOtherHandler(_req) {
    return new Response(null, {
        status: 404
    });
}
function defaultErrorHandler(_req, err) {
    console.error(err);
    return new Response(null, {
        status: 500
    });
}
function defaultUnknownMethodHandler(_req, knownMethods) {
    return new Response(null, {
        status: 405,
        headers: {
            Accept: knownMethods.join(", ")
        }
    });
}
const METHODS = [
    "GET",
    "HEAD",
    "POST",
    "PUT",
    "DELETE",
    "OPTIONS",
    "PATCH", 
];
const methodRegex = new RegExp(`(?<=^(?:${METHODS.join("|")}))@`);
function router(routes1, other = defaultOtherHandler, error = defaultErrorHandler, unknownMethod = defaultUnknownMethodHandler) {
    return async (req)=>{
        try {
            const internalRoutes = {};
            for (const [route, handler2] of Object.entries(routes1)){
                const [methodOrPath, path39] = route.split(methodRegex);
                if (path39) {
                    internalRoutes[path39] ??= {};
                    internalRoutes[path39][methodOrPath] = handler2;
                } else {
                    internalRoutes[methodOrPath] ??= {};
                    internalRoutes[methodOrPath]["any"] = handler2;
                }
            }
            for (const [path40, methods] of Object.entries(internalRoutes)){
                const pattern = new URLPattern({
                    pathname: path40
                });
                const res = pattern.exec(req.url);
                if (res !== null) {
                    for (const [method, handler3] of Object.entries(methods)){
                        if (req.method === method) {
                            return await handler3(req, res.pathname.groups);
                        }
                    }
                    if (methods["any"]) {
                        return await methods["any"](req, res.pathname.groups);
                    } else {
                        return await unknownMethod(req, Object.keys(methods));
                    }
                }
            }
            return await other(req);
        } catch (err) {
            return error(req, err);
        }
    };
}
const mod4 = {
    defaultOtherHandler: defaultOtherHandler,
    defaultErrorHandler: defaultErrorHandler,
    defaultUnknownMethodHandler: defaultUnknownMethodHandler,
    METHODS: METHODS,
    router: router
};
const db = JSON.parse(`{
  "application/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/3gpp-ims+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/3gpphal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/3gpphalforms+json": {
    "source": "iana",
    "compressible": true
  },
  "application/a2l": {
    "source": "iana"
  },
  "application/activemessage": {
    "source": "iana"
  },
  "application/activity+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-directory+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcost+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcostparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointprop+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointpropparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-error+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-updatestreamcontrol+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-updatestreamparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/aml": {
    "source": "iana"
  },
  "application/andrew-inset": {
    "source": "iana",
    "extensions": ["ez"]
  },
  "application/applefile": {
    "source": "iana"
  },
  "application/applixware": {
    "source": "apache",
    "extensions": ["aw"]
  },
  "application/atf": {
    "source": "iana"
  },
  "application/atfx": {
    "source": "iana"
  },
  "application/atom+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atom"]
  },
  "application/atomcat+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomcat"]
  },
  "application/atomdeleted+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomdeleted"]
  },
  "application/atomicmail": {
    "source": "iana"
  },
  "application/atomsvc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomsvc"]
  },
  "application/atsc-dwd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dwd"]
  },
  "application/atsc-dynamic-event-message": {
    "source": "iana"
  },
  "application/atsc-held+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["held"]
  },
  "application/atsc-rdt+json": {
    "source": "iana",
    "compressible": true
  },
  "application/atsc-rsat+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rsat"]
  },
  "application/atxml": {
    "source": "iana"
  },
  "application/auth-policy+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/bacnet-xdd+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/batch-smtp": {
    "source": "iana"
  },
  "application/bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/beep+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/calendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/calendar+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xcs"]
  },
  "application/call-completion": {
    "source": "iana"
  },
  "application/cals-1840": {
    "source": "iana"
  },
  "application/captive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cbor": {
    "source": "iana"
  },
  "application/cbor-seq": {
    "source": "iana"
  },
  "application/cccex": {
    "source": "iana"
  },
  "application/ccmp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ccxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ccxml"]
  },
  "application/cdfx+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cdfx"]
  },
  "application/cdmi-capability": {
    "source": "iana",
    "extensions": ["cdmia"]
  },
  "application/cdmi-container": {
    "source": "iana",
    "extensions": ["cdmic"]
  },
  "application/cdmi-domain": {
    "source": "iana",
    "extensions": ["cdmid"]
  },
  "application/cdmi-object": {
    "source": "iana",
    "extensions": ["cdmio"]
  },
  "application/cdmi-queue": {
    "source": "iana",
    "extensions": ["cdmiq"]
  },
  "application/cdni": {
    "source": "iana"
  },
  "application/cea": {
    "source": "iana"
  },
  "application/cea-2018+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cellml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cfw": {
    "source": "iana"
  },
  "application/clr": {
    "source": "iana"
  },
  "application/clue+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/clue_info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cms": {
    "source": "iana"
  },
  "application/cnrp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-group+json": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-payload": {
    "source": "iana"
  },
  "application/commonground": {
    "source": "iana"
  },
  "application/conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cose": {
    "source": "iana"
  },
  "application/cose-key": {
    "source": "iana"
  },
  "application/cose-key-set": {
    "source": "iana"
  },
  "application/cpl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/csrattrs": {
    "source": "iana"
  },
  "application/csta+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cstadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/csvm+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cu-seeme": {
    "source": "apache",
    "extensions": ["cu"]
  },
  "application/cwt": {
    "source": "iana"
  },
  "application/cybercash": {
    "source": "iana"
  },
  "application/dart": {
    "compressible": true
  },
  "application/dash+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpd"]
  },
  "application/dashdelta": {
    "source": "iana"
  },
  "application/davmount+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["davmount"]
  },
  "application/dca-rft": {
    "source": "iana"
  },
  "application/dcd": {
    "source": "iana"
  },
  "application/dec-dx": {
    "source": "iana"
  },
  "application/dialog-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom": {
    "source": "iana"
  },
  "application/dicom+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dii": {
    "source": "iana"
  },
  "application/dit": {
    "source": "iana"
  },
  "application/dns": {
    "source": "iana"
  },
  "application/dns+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dns-message": {
    "source": "iana"
  },
  "application/docbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dbk"]
  },
  "application/dots+cbor": {
    "source": "iana"
  },
  "application/dskpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dssc+der": {
    "source": "iana",
    "extensions": ["dssc"]
  },
  "application/dssc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdssc"]
  },
  "application/dvcs": {
    "source": "iana"
  },
  "application/ecmascript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["es","ecma"]
  },
  "application/edi-consent": {
    "source": "iana"
  },
  "application/edi-x12": {
    "source": "iana",
    "compressible": false
  },
  "application/edifact": {
    "source": "iana",
    "compressible": false
  },
  "application/efi": {
    "source": "iana"
  },
  "application/elm+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/elm+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.cap+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/emergencycalldata.comment+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.deviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.ecall.msd": {
    "source": "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.serviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.veds+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emma+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["emma"]
  },
  "application/emotionml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["emotionml"]
  },
  "application/encaprtp": {
    "source": "iana"
  },
  "application/epp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/epub+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["epub"]
  },
  "application/eshop": {
    "source": "iana"
  },
  "application/exi": {
    "source": "iana",
    "extensions": ["exi"]
  },
  "application/expect-ct-report+json": {
    "source": "iana",
    "compressible": true
  },
  "application/fastinfoset": {
    "source": "iana"
  },
  "application/fastsoap": {
    "source": "iana"
  },
  "application/fdt+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["fdt"]
  },
  "application/fhir+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/fhir+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/fido.trusted-apps+json": {
    "compressible": true
  },
  "application/fits": {
    "source": "iana"
  },
  "application/flexfec": {
    "source": "iana"
  },
  "application/font-sfnt": {
    "source": "iana"
  },
  "application/font-tdpfr": {
    "source": "iana",
    "extensions": ["pfr"]
  },
  "application/font-woff": {
    "source": "iana",
    "compressible": false
  },
  "application/framework-attributes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/geo+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["geojson"]
  },
  "application/geo+json-seq": {
    "source": "iana"
  },
  "application/geopackage+sqlite3": {
    "source": "iana"
  },
  "application/geoxacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/gltf-buffer": {
    "source": "iana"
  },
  "application/gml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gml"]
  },
  "application/gpx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["gpx"]
  },
  "application/gxf": {
    "source": "apache",
    "extensions": ["gxf"]
  },
  "application/gzip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gz"]
  },
  "application/h224": {
    "source": "iana"
  },
  "application/held+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/hjson": {
    "extensions": ["hjson"]
  },
  "application/http": {
    "source": "iana"
  },
  "application/hyperstudio": {
    "source": "iana",
    "extensions": ["stk"]
  },
  "application/ibe-key-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pkg-reply+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pp-data": {
    "source": "iana"
  },
  "application/iges": {
    "source": "iana"
  },
  "application/im-iscomposing+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/index": {
    "source": "iana"
  },
  "application/index.cmd": {
    "source": "iana"
  },
  "application/index.obj": {
    "source": "iana"
  },
  "application/index.response": {
    "source": "iana"
  },
  "application/index.vnd": {
    "source": "iana"
  },
  "application/inkml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ink","inkml"]
  },
  "application/iotp": {
    "source": "iana"
  },
  "application/ipfix": {
    "source": "iana",
    "extensions": ["ipfix"]
  },
  "application/ipp": {
    "source": "iana"
  },
  "application/isup": {
    "source": "iana"
  },
  "application/its+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["its"]
  },
  "application/java-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jar","war","ear"]
  },
  "application/java-serialized-object": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ser"]
  },
  "application/java-vm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["class"]
  },
  "application/javascript": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["js","mjs"]
  },
  "application/jf2feed+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jose": {
    "source": "iana"
  },
  "application/jose+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jrd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jscalendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["json","map"]
  },
  "application/json-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json-seq": {
    "source": "iana"
  },
  "application/json5": {
    "extensions": ["json5"]
  },
  "application/jsonml+json": {
    "source": "apache",
    "compressible": true,
    "extensions": ["jsonml"]
  },
  "application/jwk+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwk-set+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwt": {
    "source": "iana"
  },
  "application/kpml-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/kpml-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ld+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["jsonld"]
  },
  "application/lgr+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lgr"]
  },
  "application/link-format": {
    "source": "iana"
  },
  "application/load-control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lost+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lostxml"]
  },
  "application/lostsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lpf+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/lxf": {
    "source": "iana"
  },
  "application/mac-binhex40": {
    "source": "iana",
    "extensions": ["hqx"]
  },
  "application/mac-compactpro": {
    "source": "apache",
    "extensions": ["cpt"]
  },
  "application/macwriteii": {
    "source": "iana"
  },
  "application/mads+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mads"]
  },
  "application/manifest+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["webmanifest"]
  },
  "application/marc": {
    "source": "iana",
    "extensions": ["mrc"]
  },
  "application/marcxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mrcx"]
  },
  "application/mathematica": {
    "source": "iana",
    "extensions": ["ma","nb","mb"]
  },
  "application/mathml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mathml"]
  },
  "application/mathml-content+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mathml-presentation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-associated-procedure-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-deregister+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-envelope+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-protection-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-reception-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-schedule+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-user-service-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbox": {
    "source": "iana",
    "extensions": ["mbox"]
  },
  "application/media-policy-dataset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/media_control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mediaservercontrol+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mscml"]
  },
  "application/merge-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/metalink+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["metalink"]
  },
  "application/metalink4+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["meta4"]
  },
  "application/mets+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mets"]
  },
  "application/mf4": {
    "source": "iana"
  },
  "application/mikey": {
    "source": "iana"
  },
  "application/mipc": {
    "source": "iana"
  },
  "application/missing-blocks+cbor-seq": {
    "source": "iana"
  },
  "application/mmt-aei+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["maei"]
  },
  "application/mmt-usd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["musd"]
  },
  "application/mods+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mods"]
  },
  "application/moss-keys": {
    "source": "iana"
  },
  "application/moss-signature": {
    "source": "iana"
  },
  "application/mosskey-data": {
    "source": "iana"
  },
  "application/mosskey-request": {
    "source": "iana"
  },
  "application/mp21": {
    "source": "iana",
    "extensions": ["m21","mp21"]
  },
  "application/mp4": {
    "source": "iana",
    "extensions": ["mp4s","m4p"]
  },
  "application/mpeg4-generic": {
    "source": "iana"
  },
  "application/mpeg4-iod": {
    "source": "iana"
  },
  "application/mpeg4-iod-xmt": {
    "source": "iana"
  },
  "application/mrb-consumer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mrb-publish+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/msc-ivr+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/msc-mixer+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/msword": {
    "source": "iana",
    "compressible": false,
    "extensions": ["doc","dot"]
  },
  "application/mud+json": {
    "source": "iana",
    "compressible": true
  },
  "application/multipart-core": {
    "source": "iana"
  },
  "application/mxf": {
    "source": "iana",
    "extensions": ["mxf"]
  },
  "application/n-quads": {
    "source": "iana",
    "extensions": ["nq"]
  },
  "application/n-triples": {
    "source": "iana",
    "extensions": ["nt"]
  },
  "application/nasdata": {
    "source": "iana"
  },
  "application/news-checkgroups": {
    "source": "iana",
    "charset": "US-ASCII"
  },
  "application/news-groupinfo": {
    "source": "iana",
    "charset": "US-ASCII"
  },
  "application/news-transmission": {
    "source": "iana"
  },
  "application/nlsml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/node": {
    "source": "iana",
    "extensions": ["cjs"]
  },
  "application/nss": {
    "source": "iana"
  },
  "application/oauth-authz-req+jwt": {
    "source": "iana"
  },
  "application/ocsp-request": {
    "source": "iana"
  },
  "application/ocsp-response": {
    "source": "iana"
  },
  "application/octet-stream": {
    "source": "iana",
    "compressible": false,
    "extensions": ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]
  },
  "application/oda": {
    "source": "iana",
    "extensions": ["oda"]
  },
  "application/odm+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/odx": {
    "source": "iana"
  },
  "application/oebps-package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["opf"]
  },
  "application/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogx"]
  },
  "application/omdoc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["omdoc"]
  },
  "application/onenote": {
    "source": "apache",
    "extensions": ["onetoc","onetoc2","onetmp","onepkg"]
  },
  "application/opc-nodeset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/oscore": {
    "source": "iana"
  },
  "application/oxps": {
    "source": "iana",
    "extensions": ["oxps"]
  },
  "application/p21+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/p2p-overlay+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["relo"]
  },
  "application/parityfec": {
    "source": "iana"
  },
  "application/passport": {
    "source": "iana"
  },
  "application/patch-ops-error+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xer"]
  },
  "application/pdf": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pdf"]
  },
  "application/pdx": {
    "source": "iana"
  },
  "application/pem-certificate-chain": {
    "source": "iana"
  },
  "application/pgp-encrypted": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pgp"]
  },
  "application/pgp-keys": {
    "source": "iana"
  },
  "application/pgp-signature": {
    "source": "iana",
    "extensions": ["asc","sig"]
  },
  "application/pics-rules": {
    "source": "apache",
    "extensions": ["prf"]
  },
  "application/pidf+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/pidf-diff+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/pkcs10": {
    "source": "iana",
    "extensions": ["p10"]
  },
  "application/pkcs12": {
    "source": "iana"
  },
  "application/pkcs7-mime": {
    "source": "iana",
    "extensions": ["p7m","p7c"]
  },
  "application/pkcs7-signature": {
    "source": "iana",
    "extensions": ["p7s"]
  },
  "application/pkcs8": {
    "source": "iana",
    "extensions": ["p8"]
  },
  "application/pkcs8-encrypted": {
    "source": "iana"
  },
  "application/pkix-attr-cert": {
    "source": "iana",
    "extensions": ["ac"]
  },
  "application/pkix-cert": {
    "source": "iana",
    "extensions": ["cer"]
  },
  "application/pkix-crl": {
    "source": "iana",
    "extensions": ["crl"]
  },
  "application/pkix-pkipath": {
    "source": "iana",
    "extensions": ["pkipath"]
  },
  "application/pkixcmp": {
    "source": "iana",
    "extensions": ["pki"]
  },
  "application/pls+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pls"]
  },
  "application/poc-settings+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/postscript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ai","eps","ps"]
  },
  "application/ppsp-tracker+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/provenance+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["provx"]
  },
  "application/prs.alvestrand.titrax-sheet": {
    "source": "iana"
  },
  "application/prs.cww": {
    "source": "iana",
    "extensions": ["cww"]
  },
  "application/prs.cyn": {
    "source": "iana",
    "charset": "7-BIT"
  },
  "application/prs.hpub+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/prs.nprend": {
    "source": "iana"
  },
  "application/prs.plucker": {
    "source": "iana"
  },
  "application/prs.rdf-xml-crypt": {
    "source": "iana"
  },
  "application/prs.xsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/pskc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pskcxml"]
  },
  "application/pvd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/qsig": {
    "source": "iana"
  },
  "application/raml+yaml": {
    "compressible": true,
    "extensions": ["raml"]
  },
  "application/raptorfec": {
    "source": "iana"
  },
  "application/rdap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/rdf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rdf","owl"]
  },
  "application/reginfo+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rif"]
  },
  "application/relax-ng-compact-syntax": {
    "source": "iana",
    "extensions": ["rnc"]
  },
  "application/remote-printing": {
    "source": "iana"
  },
  "application/reputon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/resource-lists+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rl"]
  },
  "application/resource-lists-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rld"]
  },
  "application/rfc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/riscos": {
    "source": "iana"
  },
  "application/rlmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/rls-services+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rs"]
  },
  "application/route-apd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rapd"]
  },
  "application/route-s-tsid+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sls"]
  },
  "application/route-usd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rusd"]
  },
  "application/rpki-ghostbusters": {
    "source": "iana",
    "extensions": ["gbr"]
  },
  "application/rpki-manifest": {
    "source": "iana",
    "extensions": ["mft"]
  },
  "application/rpki-publication": {
    "source": "iana"
  },
  "application/rpki-roa": {
    "source": "iana",
    "extensions": ["roa"]
  },
  "application/rpki-updown": {
    "source": "iana"
  },
  "application/rsd+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rsd"]
  },
  "application/rss+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rss"]
  },
  "application/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "application/rtploopback": {
    "source": "iana"
  },
  "application/rtx": {
    "source": "iana"
  },
  "application/samlassertion+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/samlmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sarif+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sarif-external-properties+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sbe": {
    "source": "iana"
  },
  "application/sbml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sbml"]
  },
  "application/scaip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/scim+json": {
    "source": "iana",
    "compressible": true
  },
  "application/scvp-cv-request": {
    "source": "iana",
    "extensions": ["scq"]
  },
  "application/scvp-cv-response": {
    "source": "iana",
    "extensions": ["scs"]
  },
  "application/scvp-vp-request": {
    "source": "iana",
    "extensions": ["spq"]
  },
  "application/scvp-vp-response": {
    "source": "iana",
    "extensions": ["spp"]
  },
  "application/sdp": {
    "source": "iana",
    "extensions": ["sdp"]
  },
  "application/secevent+jwt": {
    "source": "iana"
  },
  "application/senml+cbor": {
    "source": "iana"
  },
  "application/senml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/senml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["senmlx"]
  },
  "application/senml-etch+cbor": {
    "source": "iana"
  },
  "application/senml-etch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/senml-exi": {
    "source": "iana"
  },
  "application/sensml+cbor": {
    "source": "iana"
  },
  "application/sensml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sensml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sensmlx"]
  },
  "application/sensml-exi": {
    "source": "iana"
  },
  "application/sep+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sep-exi": {
    "source": "iana"
  },
  "application/session-info": {
    "source": "iana"
  },
  "application/set-payment": {
    "source": "iana"
  },
  "application/set-payment-initiation": {
    "source": "iana",
    "extensions": ["setpay"]
  },
  "application/set-registration": {
    "source": "iana"
  },
  "application/set-registration-initiation": {
    "source": "iana",
    "extensions": ["setreg"]
  },
  "application/sgml": {
    "source": "iana"
  },
  "application/sgml-open-catalog": {
    "source": "iana"
  },
  "application/shf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["shf"]
  },
  "application/sieve": {
    "source": "iana",
    "extensions": ["siv","sieve"]
  },
  "application/simple-filter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/simple-message-summary": {
    "source": "iana"
  },
  "application/simplesymbolcontainer": {
    "source": "iana"
  },
  "application/sipc": {
    "source": "iana"
  },
  "application/slate": {
    "source": "iana"
  },
  "application/smil": {
    "source": "iana"
  },
  "application/smil+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["smi","smil"]
  },
  "application/smpte336m": {
    "source": "iana"
  },
  "application/soap+fastinfoset": {
    "source": "iana"
  },
  "application/soap+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sparql-query": {
    "source": "iana",
    "extensions": ["rq"]
  },
  "application/sparql-results+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["srx"]
  },
  "application/spirits-event+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sql": {
    "source": "iana"
  },
  "application/srgs": {
    "source": "iana",
    "extensions": ["gram"]
  },
  "application/srgs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["grxml"]
  },
  "application/sru+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sru"]
  },
  "application/ssdl+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ssdl"]
  },
  "application/ssml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ssml"]
  },
  "application/stix+json": {
    "source": "iana",
    "compressible": true
  },
  "application/swid+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["swidtag"]
  },
  "application/tamp-apex-update": {
    "source": "iana"
  },
  "application/tamp-apex-update-confirm": {
    "source": "iana"
  },
  "application/tamp-community-update": {
    "source": "iana"
  },
  "application/tamp-community-update-confirm": {
    "source": "iana"
  },
  "application/tamp-error": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    "source": "iana"
  },
  "application/tamp-status-query": {
    "source": "iana"
  },
  "application/tamp-status-response": {
    "source": "iana"
  },
  "application/tamp-update": {
    "source": "iana"
  },
  "application/tamp-update-confirm": {
    "source": "iana"
  },
  "application/tar": {
    "compressible": true
  },
  "application/taxii+json": {
    "source": "iana",
    "compressible": true
  },
  "application/td+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tei+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tei","teicorpus"]
  },
  "application/tetra_isi": {
    "source": "iana"
  },
  "application/thraud+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tfi"]
  },
  "application/timestamp-query": {
    "source": "iana"
  },
  "application/timestamp-reply": {
    "source": "iana"
  },
  "application/timestamped-data": {
    "source": "iana",
    "extensions": ["tsd"]
  },
  "application/tlsrpt+gzip": {
    "source": "iana"
  },
  "application/tlsrpt+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tnauthlist": {
    "source": "iana"
  },
  "application/toml": {
    "compressible": true,
    "extensions": ["toml"]
  },
  "application/trickle-ice-sdpfrag": {
    "source": "iana"
  },
  "application/trig": {
    "source": "iana",
    "extensions": ["trig"]
  },
  "application/ttml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ttml"]
  },
  "application/tve-trigger": {
    "source": "iana"
  },
  "application/tzif": {
    "source": "iana"
  },
  "application/tzif-leap": {
    "source": "iana"
  },
  "application/ubjson": {
    "compressible": false,
    "extensions": ["ubj"]
  },
  "application/ulpfec": {
    "source": "iana"
  },
  "application/urc-grpsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/urc-ressheet+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rsheet"]
  },
  "application/urc-targetdesc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["td"]
  },
  "application/urc-uisocketdesc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vemmi": {
    "source": "iana"
  },
  "application/vividence.scriptfile": {
    "source": "apache"
  },
  "application/vnd.1000minds.decision-model+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["1km"]
  },
  "application/vnd.3gpp-prose+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-v2x-local-service-information": {
    "source": "iana"
  },
  "application/vnd.3gpp.5gnas": {
    "source": "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.bsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.gmop+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.gtpc": {
    "source": "iana"
  },
  "application/vnd.3gpp.interworking-data": {
    "source": "iana"
  },
  "application/vnd.3gpp.lpp": {
    "source": "iana"
  },
  "application/vnd.3gpp.mc-signalling-ear": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-payload": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-signalling": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-floor-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-signed+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-init-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-transmission-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mid-call+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.ngap": {
    "source": "iana"
  },
  "application/vnd.3gpp.pfcp": {
    "source": "iana"
  },
  "application/vnd.3gpp.pic-bw-large": {
    "source": "iana",
    "extensions": ["plb"]
  },
  "application/vnd.3gpp.pic-bw-small": {
    "source": "iana",
    "extensions": ["psb"]
  },
  "application/vnd.3gpp.pic-bw-var": {
    "source": "iana",
    "extensions": ["pvb"]
  },
  "application/vnd.3gpp.s1ap": {
    "source": "iana"
  },
  "application/vnd.3gpp.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp.sms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.ussd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp2.tcap": {
    "source": "iana",
    "extensions": ["tcap"]
  },
  "application/vnd.3lightssoftware.imagescal": {
    "source": "iana"
  },
  "application/vnd.3m.post-it-notes": {
    "source": "iana",
    "extensions": ["pwn"]
  },
  "application/vnd.accpac.simply.aso": {
    "source": "iana",
    "extensions": ["aso"]
  },
  "application/vnd.accpac.simply.imp": {
    "source": "iana",
    "extensions": ["imp"]
  },
  "application/vnd.acucobol": {
    "source": "iana",
    "extensions": ["acu"]
  },
  "application/vnd.acucorp": {
    "source": "iana",
    "extensions": ["atc","acutc"]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["air"]
  },
  "application/vnd.adobe.flash.movie": {
    "source": "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    "source": "iana",
    "extensions": ["fcdt"]
  },
  "application/vnd.adobe.fxp": {
    "source": "iana",
    "extensions": ["fxp","fxpl"]
  },
  "application/vnd.adobe.partial-upload": {
    "source": "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdp"]
  },
  "application/vnd.adobe.xfdf": {
    "source": "iana",
    "extensions": ["xfdf"]
  },
  "application/vnd.aether.imp": {
    "source": "iana"
  },
  "application/vnd.afpc.afplinedata": {
    "source": "iana"
  },
  "application/vnd.afpc.afplinedata-pagedef": {
    "source": "iana"
  },
  "application/vnd.afpc.cmoca-cmresource": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-charset": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-codedfont": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-codepage": {
    "source": "iana"
  },
  "application/vnd.afpc.modca": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-cmtable": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-formdef": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-mediummap": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-objectcontainer": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-overlay": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-pagesegment": {
    "source": "iana"
  },
  "application/vnd.ah-barcode": {
    "source": "iana"
  },
  "application/vnd.ahead.space": {
    "source": "iana",
    "extensions": ["ahead"]
  },
  "application/vnd.airzip.filesecure.azf": {
    "source": "iana",
    "extensions": ["azf"]
  },
  "application/vnd.airzip.filesecure.azs": {
    "source": "iana",
    "extensions": ["azs"]
  },
  "application/vnd.amadeus+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.amazon.ebook": {
    "source": "apache",
    "extensions": ["azw"]
  },
  "application/vnd.amazon.mobi8-ebook": {
    "source": "iana"
  },
  "application/vnd.americandynamics.acc": {
    "source": "iana",
    "extensions": ["acc"]
  },
  "application/vnd.amiga.ami": {
    "source": "iana",
    "extensions": ["ami"]
  },
  "application/vnd.amundsen.maze+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.android.ota": {
    "source": "iana"
  },
  "application/vnd.android.package-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["apk"]
  },
  "application/vnd.anki": {
    "source": "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    "source": "iana",
    "extensions": ["cii"]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    "source": "apache",
    "extensions": ["fti"]
  },
  "application/vnd.antix.game-component": {
    "source": "iana",
    "extensions": ["atx"]
  },
  "application/vnd.apache.arrow.file": {
    "source": "iana"
  },
  "application/vnd.apache.arrow.stream": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.binary": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.compact": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.json": {
    "source": "iana"
  },
  "application/vnd.api+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.aplextor.warrp+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apothekende.reservation+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apple.installer+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpkg"]
  },
  "application/vnd.apple.keynote": {
    "source": "iana",
    "extensions": ["key"]
  },
  "application/vnd.apple.mpegurl": {
    "source": "iana",
    "extensions": ["m3u8"]
  },
  "application/vnd.apple.numbers": {
    "source": "iana",
    "extensions": ["numbers"]
  },
  "application/vnd.apple.pages": {
    "source": "iana",
    "extensions": ["pages"]
  },
  "application/vnd.apple.pkpass": {
    "compressible": false,
    "extensions": ["pkpass"]
  },
  "application/vnd.arastra.swi": {
    "source": "iana"
  },
  "application/vnd.aristanetworks.swi": {
    "source": "iana",
    "extensions": ["swi"]
  },
  "application/vnd.artisan+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.artsquare": {
    "source": "iana"
  },
  "application/vnd.astraea-software.iota": {
    "source": "iana",
    "extensions": ["iota"]
  },
  "application/vnd.audiograph": {
    "source": "iana",
    "extensions": ["aep"]
  },
  "application/vnd.autopackage": {
    "source": "iana"
  },
  "application/vnd.avalon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.avistar+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.balsamiq.bmml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmml"]
  },
  "application/vnd.balsamiq.bmpr": {
    "source": "iana"
  },
  "application/vnd.banana-accounting": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.error": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bekitzur-stech+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bint.med-content": {
    "source": "iana"
  },
  "application/vnd.biopax.rdf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.blink-idb-value-wrapper": {
    "source": "iana"
  },
  "application/vnd.blueice.multipass": {
    "source": "iana",
    "extensions": ["mpm"]
  },
  "application/vnd.bluetooth.ep.oob": {
    "source": "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    "source": "iana"
  },
  "application/vnd.bmi": {
    "source": "iana",
    "extensions": ["bmi"]
  },
  "application/vnd.bpf": {
    "source": "iana"
  },
  "application/vnd.bpf3": {
    "source": "iana"
  },
  "application/vnd.businessobjects": {
    "source": "iana",
    "extensions": ["rep"]
  },
  "application/vnd.byu.uapi+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cab-jscript": {
    "source": "iana"
  },
  "application/vnd.canon-cpdl": {
    "source": "iana"
  },
  "application/vnd.canon-lips": {
    "source": "iana"
  },
  "application/vnd.capasystems-pg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    "source": "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    "source": "iana"
  },
  "application/vnd.chemdraw+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cdxml"]
  },
  "application/vnd.chess-pgn": {
    "source": "iana"
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    "source": "iana",
    "extensions": ["mmd"]
  },
  "application/vnd.ciedi": {
    "source": "iana"
  },
  "application/vnd.cinderella": {
    "source": "iana",
    "extensions": ["cdy"]
  },
  "application/vnd.cirpack.isdn-ext": {
    "source": "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csl"]
  },
  "application/vnd.claymore": {
    "source": "iana",
    "extensions": ["cla"]
  },
  "application/vnd.cloanto.rp9": {
    "source": "iana",
    "extensions": ["rp9"]
  },
  "application/vnd.clonk.c4group": {
    "source": "iana",
    "extensions": ["c4g","c4d","c4f","c4p","c4u"]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    "source": "iana",
    "extensions": ["c11amc"]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    "source": "iana",
    "extensions": ["c11amz"]
  },
  "application/vnd.coffeescript": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet-template": {
    "source": "iana"
  },
  "application/vnd.collection+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.doc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.next+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.comicbook+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.comicbook-rar": {
    "source": "iana"
  },
  "application/vnd.commerce-battelle": {
    "source": "iana"
  },
  "application/vnd.commonspace": {
    "source": "iana",
    "extensions": ["csp"]
  },
  "application/vnd.contact.cmsg": {
    "source": "iana",
    "extensions": ["cdbcmsg"]
  },
  "application/vnd.coreos.ignition+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cosmocaller": {
    "source": "iana",
    "extensions": ["cmc"]
  },
  "application/vnd.crick.clicker": {
    "source": "iana",
    "extensions": ["clkx"]
  },
  "application/vnd.crick.clicker.keyboard": {
    "source": "iana",
    "extensions": ["clkk"]
  },
  "application/vnd.crick.clicker.palette": {
    "source": "iana",
    "extensions": ["clkp"]
  },
  "application/vnd.crick.clicker.template": {
    "source": "iana",
    "extensions": ["clkt"]
  },
  "application/vnd.crick.clicker.wordbank": {
    "source": "iana",
    "extensions": ["clkw"]
  },
  "application/vnd.criticaltools.wbs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wbs"]
  },
  "application/vnd.cryptii.pipe+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.crypto-shade-file": {
    "source": "iana"
  },
  "application/vnd.cryptomator.encrypted": {
    "source": "iana"
  },
  "application/vnd.cryptomator.vault": {
    "source": "iana"
  },
  "application/vnd.ctc-posml": {
    "source": "iana",
    "extensions": ["pml"]
  },
  "application/vnd.ctct.ws+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cups-pdf": {
    "source": "iana"
  },
  "application/vnd.cups-postscript": {
    "source": "iana"
  },
  "application/vnd.cups-ppd": {
    "source": "iana",
    "extensions": ["ppd"]
  },
  "application/vnd.cups-raster": {
    "source": "iana"
  },
  "application/vnd.cups-raw": {
    "source": "iana"
  },
  "application/vnd.curl": {
    "source": "iana"
  },
  "application/vnd.curl.car": {
    "source": "apache",
    "extensions": ["car"]
  },
  "application/vnd.curl.pcurl": {
    "source": "apache",
    "extensions": ["pcurl"]
  },
  "application/vnd.cyan.dean.root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cybank": {
    "source": "iana"
  },
  "application/vnd.cyclonedx+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cyclonedx+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.d2l.coursepackage1p0+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.d3m-dataset": {
    "source": "iana"
  },
  "application/vnd.d3m-problem": {
    "source": "iana"
  },
  "application/vnd.dart": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dart"]
  },
  "application/vnd.data-vision.rdz": {
    "source": "iana",
    "extensions": ["rdz"]
  },
  "application/vnd.datapackage+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dataresource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dbf": {
    "source": "iana",
    "extensions": ["dbf"]
  },
  "application/vnd.debian.binary-package": {
    "source": "iana"
  },
  "application/vnd.dece.data": {
    "source": "iana",
    "extensions": ["uvf","uvvf","uvd","uvvd"]
  },
  "application/vnd.dece.ttml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uvt","uvvt"]
  },
  "application/vnd.dece.unspecified": {
    "source": "iana",
    "extensions": ["uvx","uvvx"]
  },
  "application/vnd.dece.zip": {
    "source": "iana",
    "extensions": ["uvz","uvvz"]
  },
  "application/vnd.denovo.fcselayout-link": {
    "source": "iana",
    "extensions": ["fe_launch"]
  },
  "application/vnd.desmume.movie": {
    "source": "iana"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    "source": "iana"
  },
  "application/vnd.dm.delegation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dna": {
    "source": "iana",
    "extensions": ["dna"]
  },
  "application/vnd.document+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dolby.mlp": {
    "source": "apache",
    "extensions": ["mlp"]
  },
  "application/vnd.dolby.mobile.1": {
    "source": "iana"
  },
  "application/vnd.dolby.mobile.2": {
    "source": "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    "source": "iana"
  },
  "application/vnd.dpgraph": {
    "source": "iana",
    "extensions": ["dpg"]
  },
  "application/vnd.dreamfactory": {
    "source": "iana",
    "extensions": ["dfac"]
  },
  "application/vnd.drive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ds-keypoint": {
    "source": "apache",
    "extensions": ["kpxx"]
  },
  "application/vnd.dtg.local": {
    "source": "iana"
  },
  "application/vnd.dtg.local.flash": {
    "source": "iana"
  },
  "application/vnd.dtg.local.html": {
    "source": "iana"
  },
  "application/vnd.dvb.ait": {
    "source": "iana",
    "extensions": ["ait"]
  },
  "application/vnd.dvb.dvbisl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.dvbj": {
    "source": "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-container+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-generic+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-init+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.pfr": {
    "source": "iana"
  },
  "application/vnd.dvb.service": {
    "source": "iana",
    "extensions": ["svc"]
  },
  "application/vnd.dxr": {
    "source": "iana"
  },
  "application/vnd.dynageo": {
    "source": "iana",
    "extensions": ["geo"]
  },
  "application/vnd.dzr": {
    "source": "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    "source": "iana"
  },
  "application/vnd.ecdis-update": {
    "source": "iana"
  },
  "application/vnd.ecip.rlp": {
    "source": "iana"
  },
  "application/vnd.ecowin.chart": {
    "source": "iana",
    "extensions": ["mag"]
  },
  "application/vnd.ecowin.filerequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    "source": "iana"
  },
  "application/vnd.ecowin.series": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    "source": "iana"
  },
  "application/vnd.efi.img": {
    "source": "iana"
  },
  "application/vnd.efi.iso": {
    "source": "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.enliven": {
    "source": "iana",
    "extensions": ["nml"]
  },
  "application/vnd.enphase.envoy": {
    "source": "iana"
  },
  "application/vnd.eprints.data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.epson.esf": {
    "source": "iana",
    "extensions": ["esf"]
  },
  "application/vnd.epson.msf": {
    "source": "iana",
    "extensions": ["msf"]
  },
  "application/vnd.epson.quickanime": {
    "source": "iana",
    "extensions": ["qam"]
  },
  "application/vnd.epson.salt": {
    "source": "iana",
    "extensions": ["slt"]
  },
  "application/vnd.epson.ssf": {
    "source": "iana",
    "extensions": ["ssf"]
  },
  "application/vnd.ericsson.quickcall": {
    "source": "iana"
  },
  "application/vnd.espass-espass+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.eszigno3+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["es3","et3"]
  },
  "application/vnd.etsi.aoc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.asic-e+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.asic-s+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.cug+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvcommand+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvservice+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mcid+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mheg5": {
    "source": "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.pstn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.sci+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.simservs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.timestamp-token": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.tsl.der": {
    "source": "iana"
  },
  "application/vnd.eudora.data": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.profile": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.settings": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.theme": {
    "source": "iana"
  },
  "application/vnd.exstream-empower+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.exstream-package": {
    "source": "iana"
  },
  "application/vnd.ezpix-album": {
    "source": "iana",
    "extensions": ["ez2"]
  },
  "application/vnd.ezpix-package": {
    "source": "iana",
    "extensions": ["ez3"]
  },
  "application/vnd.f-secure.mobile": {
    "source": "iana"
  },
  "application/vnd.fastcopy-disk-image": {
    "source": "iana"
  },
  "application/vnd.fdf": {
    "source": "iana",
    "extensions": ["fdf"]
  },
  "application/vnd.fdsn.mseed": {
    "source": "iana",
    "extensions": ["mseed"]
  },
  "application/vnd.fdsn.seed": {
    "source": "iana",
    "extensions": ["seed","dataless"]
  },
  "application/vnd.ffsns": {
    "source": "iana"
  },
  "application/vnd.ficlab.flb+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.filmit.zfc": {
    "source": "iana"
  },
  "application/vnd.fints": {
    "source": "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    "source": "iana"
  },
  "application/vnd.flographit": {
    "source": "iana",
    "extensions": ["gph"]
  },
  "application/vnd.fluxtime.clip": {
    "source": "iana",
    "extensions": ["ftc"]
  },
  "application/vnd.font-fontforge-sfd": {
    "source": "iana"
  },
  "application/vnd.framemaker": {
    "source": "iana",
    "extensions": ["fm","frame","maker","book"]
  },
  "application/vnd.frogans.fnc": {
    "source": "iana",
    "extensions": ["fnc"]
  },
  "application/vnd.frogans.ltf": {
    "source": "iana",
    "extensions": ["ltf"]
  },
  "application/vnd.fsc.weblaunch": {
    "source": "iana",
    "extensions": ["fsc"]
  },
  "application/vnd.fujifilm.fb.docuworks": {
    "source": "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.binder": {
    "source": "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujifilm.fb.jfi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.fujitsu.oasys": {
    "source": "iana",
    "extensions": ["oas"]
  },
  "application/vnd.fujitsu.oasys2": {
    "source": "iana",
    "extensions": ["oa2"]
  },
  "application/vnd.fujitsu.oasys3": {
    "source": "iana",
    "extensions": ["oa3"]
  },
  "application/vnd.fujitsu.oasysgp": {
    "source": "iana",
    "extensions": ["fg5"]
  },
  "application/vnd.fujitsu.oasysprs": {
    "source": "iana",
    "extensions": ["bh2"]
  },
  "application/vnd.fujixerox.art-ex": {
    "source": "iana"
  },
  "application/vnd.fujixerox.art4": {
    "source": "iana"
  },
  "application/vnd.fujixerox.ddd": {
    "source": "iana",
    "extensions": ["ddd"]
  },
  "application/vnd.fujixerox.docuworks": {
    "source": "iana",
    "extensions": ["xdw"]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    "source": "iana",
    "extensions": ["xbd"]
  },
  "application/vnd.fujixerox.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    "source": "iana"
  },
  "application/vnd.fut-misnet": {
    "source": "iana"
  },
  "application/vnd.futoin+cbor": {
    "source": "iana"
  },
  "application/vnd.futoin+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.fuzzysheet": {
    "source": "iana",
    "extensions": ["fzs"]
  },
  "application/vnd.genomatix.tuxedo": {
    "source": "iana",
    "extensions": ["txd"]
  },
  "application/vnd.gentics.grd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geo+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geocube+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geogebra.file": {
    "source": "iana",
    "extensions": ["ggb"]
  },
  "application/vnd.geogebra.slides": {
    "source": "iana"
  },
  "application/vnd.geogebra.tool": {
    "source": "iana",
    "extensions": ["ggt"]
  },
  "application/vnd.geometry-explorer": {
    "source": "iana",
    "extensions": ["gex","gre"]
  },
  "application/vnd.geonext": {
    "source": "iana",
    "extensions": ["gxt"]
  },
  "application/vnd.geoplan": {
    "source": "iana",
    "extensions": ["g2w"]
  },
  "application/vnd.geospace": {
    "source": "iana",
    "extensions": ["g3w"]
  },
  "application/vnd.gerber": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    "source": "iana"
  },
  "application/vnd.gmx": {
    "source": "iana",
    "extensions": ["gmx"]
  },
  "application/vnd.google-apps.document": {
    "compressible": false,
    "extensions": ["gdoc"]
  },
  "application/vnd.google-apps.presentation": {
    "compressible": false,
    "extensions": ["gslides"]
  },
  "application/vnd.google-apps.spreadsheet": {
    "compressible": false,
    "extensions": ["gsheet"]
  },
  "application/vnd.google-earth.kml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["kml"]
  },
  "application/vnd.google-earth.kmz": {
    "source": "iana",
    "compressible": false,
    "extensions": ["kmz"]
  },
  "application/vnd.gov.sk.e-form+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.gov.sk.e-form+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.grafeq": {
    "source": "iana",
    "extensions": ["gqf","gqs"]
  },
  "application/vnd.gridmp": {
    "source": "iana"
  },
  "application/vnd.groove-account": {
    "source": "iana",
    "extensions": ["gac"]
  },
  "application/vnd.groove-help": {
    "source": "iana",
    "extensions": ["ghf"]
  },
  "application/vnd.groove-identity-message": {
    "source": "iana",
    "extensions": ["gim"]
  },
  "application/vnd.groove-injector": {
    "source": "iana",
    "extensions": ["grv"]
  },
  "application/vnd.groove-tool-message": {
    "source": "iana",
    "extensions": ["gtm"]
  },
  "application/vnd.groove-tool-template": {
    "source": "iana",
    "extensions": ["tpl"]
  },
  "application/vnd.groove-vcard": {
    "source": "iana",
    "extensions": ["vcg"]
  },
  "application/vnd.hal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hal+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["hal"]
  },
  "application/vnd.handheld-entertainment+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zmm"]
  },
  "application/vnd.hbci": {
    "source": "iana",
    "extensions": ["hbci"]
  },
  "application/vnd.hc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hcl-bireports": {
    "source": "iana"
  },
  "application/vnd.hdt": {
    "source": "iana"
  },
  "application/vnd.heroku+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hhe.lesson-player": {
    "source": "iana",
    "extensions": ["les"]
  },
  "application/vnd.hp-hpgl": {
    "source": "iana",
    "extensions": ["hpgl"]
  },
  "application/vnd.hp-hpid": {
    "source": "iana",
    "extensions": ["hpid"]
  },
  "application/vnd.hp-hps": {
    "source": "iana",
    "extensions": ["hps"]
  },
  "application/vnd.hp-jlyt": {
    "source": "iana",
    "extensions": ["jlt"]
  },
  "application/vnd.hp-pcl": {
    "source": "iana",
    "extensions": ["pcl"]
  },
  "application/vnd.hp-pclxl": {
    "source": "iana",
    "extensions": ["pclxl"]
  },
  "application/vnd.httphone": {
    "source": "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    "source": "iana",
    "extensions": ["sfd-hdstx"]
  },
  "application/vnd.hyper+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyper-item+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyperdrive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hzn-3d-crossword": {
    "source": "iana"
  },
  "application/vnd.ibm.afplinedata": {
    "source": "iana"
  },
  "application/vnd.ibm.electronic-media": {
    "source": "iana"
  },
  "application/vnd.ibm.minipay": {
    "source": "iana",
    "extensions": ["mpy"]
  },
  "application/vnd.ibm.modcap": {
    "source": "iana",
    "extensions": ["afp","listafp","list3820"]
  },
  "application/vnd.ibm.rights-management": {
    "source": "iana",
    "extensions": ["irm"]
  },
  "application/vnd.ibm.secure-container": {
    "source": "iana",
    "extensions": ["sc"]
  },
  "application/vnd.iccprofile": {
    "source": "iana",
    "extensions": ["icc","icm"]
  },
  "application/vnd.ieee.1905": {
    "source": "iana"
  },
  "application/vnd.igloader": {
    "source": "iana",
    "extensions": ["igl"]
  },
  "application/vnd.imagemeter.folder+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.imagemeter.image+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.immervision-ivp": {
    "source": "iana",
    "extensions": ["ivp"]
  },
  "application/vnd.immervision-ivu": {
    "source": "iana",
    "extensions": ["ivu"]
  },
  "application/vnd.ims.imsccv1p1": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    "source": "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informedcontrol.rms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informix-visionary": {
    "source": "iana"
  },
  "application/vnd.infotech.project": {
    "source": "iana"
  },
  "application/vnd.infotech.project+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.innopath.wamp.notification": {
    "source": "iana"
  },
  "application/vnd.insors.igm": {
    "source": "iana",
    "extensions": ["igm"]
  },
  "application/vnd.intercon.formnet": {
    "source": "iana",
    "extensions": ["xpw","xpx"]
  },
  "application/vnd.intergeo": {
    "source": "iana",
    "extensions": ["i2g"]
  },
  "application/vnd.intertrust.digibox": {
    "source": "iana"
  },
  "application/vnd.intertrust.nncp": {
    "source": "iana"
  },
  "application/vnd.intu.qbo": {
    "source": "iana",
    "extensions": ["qbo"]
  },
  "application/vnd.intu.qfx": {
    "source": "iana",
    "extensions": ["qfx"]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ipunplugged.rcprofile": {
    "source": "iana",
    "extensions": ["rcprofile"]
  },
  "application/vnd.irepository.package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["irp"]
  },
  "application/vnd.is-xpr": {
    "source": "iana",
    "extensions": ["xpr"]
  },
  "application/vnd.isac.fcs": {
    "source": "iana",
    "extensions": ["fcs"]
  },
  "application/vnd.iso11783-10+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.jam": {
    "source": "iana",
    "extensions": ["jam"]
  },
  "application/vnd.japannet-directory-service": {
    "source": "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-registration": {
    "source": "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-verification": {
    "source": "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    "source": "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    "source": "iana",
    "extensions": ["rms"]
  },
  "application/vnd.jisp": {
    "source": "iana",
    "extensions": ["jisp"]
  },
  "application/vnd.joost.joda-archive": {
    "source": "iana",
    "extensions": ["joda"]
  },
  "application/vnd.jsk.isdn-ngn": {
    "source": "iana"
  },
  "application/vnd.kahootz": {
    "source": "iana",
    "extensions": ["ktz","ktr"]
  },
  "application/vnd.kde.karbon": {
    "source": "iana",
    "extensions": ["karbon"]
  },
  "application/vnd.kde.kchart": {
    "source": "iana",
    "extensions": ["chrt"]
  },
  "application/vnd.kde.kformula": {
    "source": "iana",
    "extensions": ["kfo"]
  },
  "application/vnd.kde.kivio": {
    "source": "iana",
    "extensions": ["flw"]
  },
  "application/vnd.kde.kontour": {
    "source": "iana",
    "extensions": ["kon"]
  },
  "application/vnd.kde.kpresenter": {
    "source": "iana",
    "extensions": ["kpr","kpt"]
  },
  "application/vnd.kde.kspread": {
    "source": "iana",
    "extensions": ["ksp"]
  },
  "application/vnd.kde.kword": {
    "source": "iana",
    "extensions": ["kwd","kwt"]
  },
  "application/vnd.kenameaapp": {
    "source": "iana",
    "extensions": ["htke"]
  },
  "application/vnd.kidspiration": {
    "source": "iana",
    "extensions": ["kia"]
  },
  "application/vnd.kinar": {
    "source": "iana",
    "extensions": ["kne","knp"]
  },
  "application/vnd.koan": {
    "source": "iana",
    "extensions": ["skp","skd","skt","skm"]
  },
  "application/vnd.kodak-descriptor": {
    "source": "iana",
    "extensions": ["sse"]
  },
  "application/vnd.las": {
    "source": "iana"
  },
  "application/vnd.las.las+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.las.las+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lasxml"]
  },
  "application/vnd.laszip": {
    "source": "iana"
  },
  "application/vnd.leap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.liberty-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    "source": "iana",
    "extensions": ["lbd"]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lbe"]
  },
  "application/vnd.logipipe.circuit+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.loom": {
    "source": "iana"
  },
  "application/vnd.lotus-1-2-3": {
    "source": "iana",
    "extensions": ["123"]
  },
  "application/vnd.lotus-approach": {
    "source": "iana",
    "extensions": ["apr"]
  },
  "application/vnd.lotus-freelance": {
    "source": "iana",
    "extensions": ["pre"]
  },
  "application/vnd.lotus-notes": {
    "source": "iana",
    "extensions": ["nsf"]
  },
  "application/vnd.lotus-organizer": {
    "source": "iana",
    "extensions": ["org"]
  },
  "application/vnd.lotus-screencam": {
    "source": "iana",
    "extensions": ["scm"]
  },
  "application/vnd.lotus-wordpro": {
    "source": "iana",
    "extensions": ["lwp"]
  },
  "application/vnd.macports.portpkg": {
    "source": "iana",
    "extensions": ["portpkg"]
  },
  "application/vnd.mapbox-vector-tile": {
    "source": "iana",
    "extensions": ["mvt"]
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.license+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.mdcf": {
    "source": "iana"
  },
  "application/vnd.mason+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.maxmind.maxmind-db": {
    "source": "iana"
  },
  "application/vnd.mcd": {
    "source": "iana",
    "extensions": ["mcd"]
  },
  "application/vnd.medcalcdata": {
    "source": "iana",
    "extensions": ["mc1"]
  },
  "application/vnd.mediastation.cdkey": {
    "source": "iana",
    "extensions": ["cdkey"]
  },
  "application/vnd.meridian-slingshot": {
    "source": "iana"
  },
  "application/vnd.mfer": {
    "source": "iana",
    "extensions": ["mwf"]
  },
  "application/vnd.mfmp": {
    "source": "iana",
    "extensions": ["mfm"]
  },
  "application/vnd.micro+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.micrografx.flo": {
    "source": "iana",
    "extensions": ["flo"]
  },
  "application/vnd.micrografx.igx": {
    "source": "iana",
    "extensions": ["igx"]
  },
  "application/vnd.microsoft.portable-executable": {
    "source": "iana"
  },
  "application/vnd.microsoft.windows.thumbnail-cache": {
    "source": "iana"
  },
  "application/vnd.miele+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.mif": {
    "source": "iana",
    "extensions": ["mif"]
  },
  "application/vnd.minisoft-hp3000-save": {
    "source": "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    "source": "iana"
  },
  "application/vnd.mobius.daf": {
    "source": "iana",
    "extensions": ["daf"]
  },
  "application/vnd.mobius.dis": {
    "source": "iana",
    "extensions": ["dis"]
  },
  "application/vnd.mobius.mbk": {
    "source": "iana",
    "extensions": ["mbk"]
  },
  "application/vnd.mobius.mqy": {
    "source": "iana",
    "extensions": ["mqy"]
  },
  "application/vnd.mobius.msl": {
    "source": "iana",
    "extensions": ["msl"]
  },
  "application/vnd.mobius.plc": {
    "source": "iana",
    "extensions": ["plc"]
  },
  "application/vnd.mobius.txf": {
    "source": "iana",
    "extensions": ["txf"]
  },
  "application/vnd.mophun.application": {
    "source": "iana",
    "extensions": ["mpn"]
  },
  "application/vnd.mophun.certificate": {
    "source": "iana",
    "extensions": ["mpc"]
  },
  "application/vnd.motorola.flexsuite": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    "source": "iana"
  },
  "application/vnd.motorola.iprm": {
    "source": "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xul"]
  },
  "application/vnd.ms-3mfdocument": {
    "source": "iana"
  },
  "application/vnd.ms-artgalry": {
    "source": "iana",
    "extensions": ["cil"]
  },
  "application/vnd.ms-asf": {
    "source": "iana"
  },
  "application/vnd.ms-cab-compressed": {
    "source": "iana",
    "extensions": ["cab"]
  },
  "application/vnd.ms-color.iccprofile": {
    "source": "apache"
  },
  "application/vnd.ms-excel": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xls","xlm","xla","xlc","xlt","xlw"]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlam"]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsb"]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsm"]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["xltm"]
  },
  "application/vnd.ms-fontobject": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eot"]
  },
  "application/vnd.ms-htmlhelp": {
    "source": "iana",
    "extensions": ["chm"]
  },
  "application/vnd.ms-ims": {
    "source": "iana",
    "extensions": ["ims"]
  },
  "application/vnd.ms-lrm": {
    "source": "iana",
    "extensions": ["lrm"]
  },
  "application/vnd.ms-office.activex+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-officetheme": {
    "source": "iana",
    "extensions": ["thmx"]
  },
  "application/vnd.ms-opentype": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-outlook": {
    "compressible": false,
    "extensions": ["msg"]
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    "source": "apache"
  },
  "application/vnd.ms-pki.seccat": {
    "source": "apache",
    "extensions": ["cat"]
  },
  "application/vnd.ms-pki.stl": {
    "source": "apache",
    "extensions": ["stl"]
  },
  "application/vnd.ms-playready.initiator+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-powerpoint": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ppt","pps","pot"]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppam"]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    "source": "iana",
    "extensions": ["pptm"]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    "source": "iana",
    "extensions": ["sldm"]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppsm"]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["potm"]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-printing.printticket+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-printschematicket+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-project": {
    "source": "iana",
    "extensions": ["mpp","mpt"]
  },
  "application/vnd.ms-tnef": {
    "source": "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    "source": "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    "source": "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    "source": "iana",
    "extensions": ["docm"]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["dotm"]
  },
  "application/vnd.ms-works": {
    "source": "iana",
    "extensions": ["wps","wks","wcm","wdb"]
  },
  "application/vnd.ms-wpl": {
    "source": "iana",
    "extensions": ["wpl"]
  },
  "application/vnd.ms-xpsdocument": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xps"]
  },
  "application/vnd.msa-disk-image": {
    "source": "iana"
  },
  "application/vnd.mseq": {
    "source": "iana",
    "extensions": ["mseq"]
  },
  "application/vnd.msign": {
    "source": "iana"
  },
  "application/vnd.multiad.creator": {
    "source": "iana"
  },
  "application/vnd.multiad.creator.cif": {
    "source": "iana"
  },
  "application/vnd.music-niff": {
    "source": "iana"
  },
  "application/vnd.musician": {
    "source": "iana",
    "extensions": ["mus"]
  },
  "application/vnd.muvee.style": {
    "source": "iana",
    "extensions": ["msty"]
  },
  "application/vnd.mynfc": {
    "source": "iana",
    "extensions": ["taglet"]
  },
  "application/vnd.ncd.control": {
    "source": "iana"
  },
  "application/vnd.ncd.reference": {
    "source": "iana"
  },
  "application/vnd.nearst.inv+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nebumind.line": {
    "source": "iana"
  },
  "application/vnd.nervana": {
    "source": "iana"
  },
  "application/vnd.netfpx": {
    "source": "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    "source": "iana",
    "extensions": ["nlu"]
  },
  "application/vnd.nimn": {
    "source": "iana"
  },
  "application/vnd.nintendo.nitro.rom": {
    "source": "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    "source": "iana"
  },
  "application/vnd.nitf": {
    "source": "iana",
    "extensions": ["ntf","nitf"]
  },
  "application/vnd.noblenet-directory": {
    "source": "iana",
    "extensions": ["nnd"]
  },
  "application/vnd.noblenet-sealer": {
    "source": "iana",
    "extensions": ["nns"]
  },
  "application/vnd.noblenet-web": {
    "source": "iana",
    "extensions": ["nnw"]
  },
  "application/vnd.nokia.catalogs": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.iptv.config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.isds-radio-presets": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ac"]
  },
  "application/vnd.nokia.n-gage.data": {
    "source": "iana",
    "extensions": ["ngdat"]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    "source": "iana",
    "extensions": ["n-gage"]
  },
  "application/vnd.nokia.ncd": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.radio-preset": {
    "source": "iana",
    "extensions": ["rpst"]
  },
  "application/vnd.nokia.radio-presets": {
    "source": "iana",
    "extensions": ["rpss"]
  },
  "application/vnd.novadigm.edm": {
    "source": "iana",
    "extensions": ["edm"]
  },
  "application/vnd.novadigm.edx": {
    "source": "iana",
    "extensions": ["edx"]
  },
  "application/vnd.novadigm.ext": {
    "source": "iana",
    "extensions": ["ext"]
  },
  "application/vnd.ntt-local.content-share": {
    "source": "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    "source": "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    "source": "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    "source": "iana",
    "extensions": ["odc"]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    "source": "iana",
    "extensions": ["otc"]
  },
  "application/vnd.oasis.opendocument.database": {
    "source": "iana",
    "extensions": ["odb"]
  },
  "application/vnd.oasis.opendocument.formula": {
    "source": "iana",
    "extensions": ["odf"]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    "source": "iana",
    "extensions": ["odft"]
  },
  "application/vnd.oasis.opendocument.graphics": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odg"]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    "source": "iana",
    "extensions": ["otg"]
  },
  "application/vnd.oasis.opendocument.image": {
    "source": "iana",
    "extensions": ["odi"]
  },
  "application/vnd.oasis.opendocument.image-template": {
    "source": "iana",
    "extensions": ["oti"]
  },
  "application/vnd.oasis.opendocument.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odp"]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    "source": "iana",
    "extensions": ["otp"]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ods"]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    "source": "iana",
    "extensions": ["ots"]
  },
  "application/vnd.oasis.opendocument.text": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odt"]
  },
  "application/vnd.oasis.opendocument.text-master": {
    "source": "iana",
    "extensions": ["odm"]
  },
  "application/vnd.oasis.opendocument.text-template": {
    "source": "iana",
    "extensions": ["ott"]
  },
  "application/vnd.oasis.opendocument.text-web": {
    "source": "iana",
    "extensions": ["oth"]
  },
  "application/vnd.obn": {
    "source": "iana"
  },
  "application/vnd.ocf+cbor": {
    "source": "iana"
  },
  "application/vnd.oci.image.manifest.v1+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oftn.l10n+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.cspg-hexbinary": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.pae.gem": {
    "source": "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.spdlist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.ueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.userprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.olpc-sugar": {
    "source": "iana",
    "extensions": ["xo"]
  },
  "application/vnd.oma-scws-config": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-request": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-response": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.imd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.ltkm": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sgdu": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sprov+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.stkm": {
    "source": "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-pcc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.dcd": {
    "source": "iana"
  },
  "application/vnd.oma.dcdc": {
    "source": "iana"
  },
  "application/vnd.oma.dd2+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dd2"]
  },
  "application/vnd.oma.drm.risd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.group-usage-list+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+cbor": {
    "source": "iana"
  },
  "application/vnd.oma.lwm2m+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+tlv": {
    "source": "iana"
  },
  "application/vnd.oma.pal+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.final-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.groups+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.push": {
    "source": "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.xcap-directory+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.omads-email+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omads-file+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omads-folder+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omaloc-supl-init": {
    "source": "iana"
  },
  "application/vnd.onepager": {
    "source": "iana"
  },
  "application/vnd.onepagertamp": {
    "source": "iana"
  },
  "application/vnd.onepagertamx": {
    "source": "iana"
  },
  "application/vnd.onepagertat": {
    "source": "iana"
  },
  "application/vnd.onepagertatp": {
    "source": "iana"
  },
  "application/vnd.onepagertatx": {
    "source": "iana"
  },
  "application/vnd.openblox.game+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["obgx"]
  },
  "application/vnd.openblox.game-binary": {
    "source": "iana"
  },
  "application/vnd.openeye.oeb": {
    "source": "iana"
  },
  "application/vnd.openofficeorg.extension": {
    "source": "apache",
    "extensions": ["oxt"]
  },
  "application/vnd.openstreetmap.data+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["osm"]
  },
  "application/vnd.opentimestamps.ots": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pptx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    "source": "iana",
    "extensions": ["sldx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    "source": "iana",
    "extensions": ["ppsx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    "source": "iana",
    "extensions": ["potx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xlsx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    "source": "iana",
    "extensions": ["xltx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    "source": "iana",
    "compressible": false,
    "extensions": ["docx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    "source": "iana",
    "extensions": ["dotx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oracle.resource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.orange.indata": {
    "source": "iana"
  },
  "application/vnd.osa.netdeploy": {
    "source": "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    "source": "iana",
    "extensions": ["mgp"]
  },
  "application/vnd.osgi.bundle": {
    "source": "iana"
  },
  "application/vnd.osgi.dp": {
    "source": "iana",
    "extensions": ["dp"]
  },
  "application/vnd.osgi.subsystem": {
    "source": "iana",
    "extensions": ["esa"]
  },
  "application/vnd.otps.ct-kip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oxli.countgraph": {
    "source": "iana"
  },
  "application/vnd.pagerduty+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.palm": {
    "source": "iana",
    "extensions": ["pdb","pqa","oprc"]
  },
  "application/vnd.panoply": {
    "source": "iana"
  },
  "application/vnd.paos.xml": {
    "source": "iana"
  },
  "application/vnd.patentdive": {
    "source": "iana"
  },
  "application/vnd.patientecommsdoc": {
    "source": "iana"
  },
  "application/vnd.pawaafile": {
    "source": "iana",
    "extensions": ["paw"]
  },
  "application/vnd.pcos": {
    "source": "iana"
  },
  "application/vnd.pg.format": {
    "source": "iana",
    "extensions": ["str"]
  },
  "application/vnd.pg.osasli": {
    "source": "iana",
    "extensions": ["ei6"]
  },
  "application/vnd.piaccess.application-licence": {
    "source": "iana"
  },
  "application/vnd.picsel": {
    "source": "iana",
    "extensions": ["efif"]
  },
  "application/vnd.pmi.widget": {
    "source": "iana",
    "extensions": ["wg"]
  },
  "application/vnd.poc.group-advertisement+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.pocketlearn": {
    "source": "iana",
    "extensions": ["plf"]
  },
  "application/vnd.powerbuilder6": {
    "source": "iana",
    "extensions": ["pbd"]
  },
  "application/vnd.powerbuilder6-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75-s": {
    "source": "iana"
  },
  "application/vnd.preminet": {
    "source": "iana"
  },
  "application/vnd.previewsystems.box": {
    "source": "iana",
    "extensions": ["box"]
  },
  "application/vnd.proteus.magazine": {
    "source": "iana",
    "extensions": ["mgz"]
  },
  "application/vnd.psfs": {
    "source": "iana"
  },
  "application/vnd.publishare-delta-tree": {
    "source": "iana",
    "extensions": ["qps"]
  },
  "application/vnd.pvi.ptid1": {
    "source": "iana",
    "extensions": ["ptid"]
  },
  "application/vnd.pwg-multiplexed": {
    "source": "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.qualcomm.brew-app-res": {
    "source": "iana"
  },
  "application/vnd.quarantainenet": {
    "source": "iana"
  },
  "application/vnd.quark.quarkxpress": {
    "source": "iana",
    "extensions": ["qxd","qxt","qwd","qwt","qxl","qxb"]
  },
  "application/vnd.quobject-quoxdocument": {
    "source": "iana"
  },
  "application/vnd.radisys.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rainstor.data": {
    "source": "iana"
  },
  "application/vnd.rapid": {
    "source": "iana"
  },
  "application/vnd.rar": {
    "source": "iana",
    "extensions": ["rar"]
  },
  "application/vnd.realvnc.bed": {
    "source": "iana",
    "extensions": ["bed"]
  },
  "application/vnd.recordare.musicxml": {
    "source": "iana",
    "extensions": ["mxl"]
  },
  "application/vnd.recordare.musicxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["musicxml"]
  },
  "application/vnd.renlearn.rlprint": {
    "source": "iana"
  },
  "application/vnd.resilient.logic": {
    "source": "iana"
  },
  "application/vnd.restful+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rig.cryptonote": {
    "source": "iana",
    "extensions": ["cryptonote"]
  },
  "application/vnd.rim.cod": {
    "source": "apache",
    "extensions": ["cod"]
  },
  "application/vnd.rn-realmedia": {
    "source": "apache",
    "extensions": ["rm"]
  },
  "application/vnd.rn-realmedia-vbr": {
    "source": "apache",
    "extensions": ["rmvb"]
  },
  "application/vnd.route66.link66+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["link66"]
  },
  "application/vnd.rs-274x": {
    "source": "iana"
  },
  "application/vnd.ruckus.download": {
    "source": "iana"
  },
  "application/vnd.s3sms": {
    "source": "iana"
  },
  "application/vnd.sailingtracker.track": {
    "source": "iana",
    "extensions": ["st"]
  },
  "application/vnd.sar": {
    "source": "iana"
  },
  "application/vnd.sbm.cid": {
    "source": "iana"
  },
  "application/vnd.sbm.mid2": {
    "source": "iana"
  },
  "application/vnd.scribus": {
    "source": "iana"
  },
  "application/vnd.sealed.3df": {
    "source": "iana"
  },
  "application/vnd.sealed.csf": {
    "source": "iana"
  },
  "application/vnd.sealed.doc": {
    "source": "iana"
  },
  "application/vnd.sealed.eml": {
    "source": "iana"
  },
  "application/vnd.sealed.mht": {
    "source": "iana"
  },
  "application/vnd.sealed.net": {
    "source": "iana"
  },
  "application/vnd.sealed.ppt": {
    "source": "iana"
  },
  "application/vnd.sealed.tiff": {
    "source": "iana"
  },
  "application/vnd.sealed.xls": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    "source": "iana"
  },
  "application/vnd.seemail": {
    "source": "iana",
    "extensions": ["see"]
  },
  "application/vnd.seis+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.sema": {
    "source": "iana",
    "extensions": ["sema"]
  },
  "application/vnd.semd": {
    "source": "iana",
    "extensions": ["semd"]
  },
  "application/vnd.semf": {
    "source": "iana",
    "extensions": ["semf"]
  },
  "application/vnd.shade-save-file": {
    "source": "iana"
  },
  "application/vnd.shana.informed.formdata": {
    "source": "iana",
    "extensions": ["ifm"]
  },
  "application/vnd.shana.informed.formtemplate": {
    "source": "iana",
    "extensions": ["itp"]
  },
  "application/vnd.shana.informed.interchange": {
    "source": "iana",
    "extensions": ["iif"]
  },
  "application/vnd.shana.informed.package": {
    "source": "iana",
    "extensions": ["ipk"]
  },
  "application/vnd.shootproof+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.shopkick+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.shp": {
    "source": "iana"
  },
  "application/vnd.shx": {
    "source": "iana"
  },
  "application/vnd.sigrok.session": {
    "source": "iana"
  },
  "application/vnd.simtech-mindmapper": {
    "source": "iana",
    "extensions": ["twd","twds"]
  },
  "application/vnd.siren+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.smaf": {
    "source": "iana",
    "extensions": ["mmf"]
  },
  "application/vnd.smart.notebook": {
    "source": "iana"
  },
  "application/vnd.smart.teacher": {
    "source": "iana",
    "extensions": ["teacher"]
  },
  "application/vnd.snesdev-page-table": {
    "source": "iana"
  },
  "application/vnd.software602.filler.form+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["fo"]
  },
  "application/vnd.software602.filler.form-xml-zip": {
    "source": "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sdkm","sdkd"]
  },
  "application/vnd.spotfire.dxp": {
    "source": "iana",
    "extensions": ["dxp"]
  },
  "application/vnd.spotfire.sfs": {
    "source": "iana",
    "extensions": ["sfs"]
  },
  "application/vnd.sqlite3": {
    "source": "iana"
  },
  "application/vnd.sss-cod": {
    "source": "iana"
  },
  "application/vnd.sss-dtf": {
    "source": "iana"
  },
  "application/vnd.sss-ntf": {
    "source": "iana"
  },
  "application/vnd.stardivision.calc": {
    "source": "apache",
    "extensions": ["sdc"]
  },
  "application/vnd.stardivision.draw": {
    "source": "apache",
    "extensions": ["sda"]
  },
  "application/vnd.stardivision.impress": {
    "source": "apache",
    "extensions": ["sdd"]
  },
  "application/vnd.stardivision.math": {
    "source": "apache",
    "extensions": ["smf"]
  },
  "application/vnd.stardivision.writer": {
    "source": "apache",
    "extensions": ["sdw","vor"]
  },
  "application/vnd.stardivision.writer-global": {
    "source": "apache",
    "extensions": ["sgl"]
  },
  "application/vnd.stepmania.package": {
    "source": "iana",
    "extensions": ["smzip"]
  },
  "application/vnd.stepmania.stepchart": {
    "source": "iana",
    "extensions": ["sm"]
  },
  "application/vnd.street-stream": {
    "source": "iana"
  },
  "application/vnd.sun.wadl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wadl"]
  },
  "application/vnd.sun.xml.calc": {
    "source": "apache",
    "extensions": ["sxc"]
  },
  "application/vnd.sun.xml.calc.template": {
    "source": "apache",
    "extensions": ["stc"]
  },
  "application/vnd.sun.xml.draw": {
    "source": "apache",
    "extensions": ["sxd"]
  },
  "application/vnd.sun.xml.draw.template": {
    "source": "apache",
    "extensions": ["std"]
  },
  "application/vnd.sun.xml.impress": {
    "source": "apache",
    "extensions": ["sxi"]
  },
  "application/vnd.sun.xml.impress.template": {
    "source": "apache",
    "extensions": ["sti"]
  },
  "application/vnd.sun.xml.math": {
    "source": "apache",
    "extensions": ["sxm"]
  },
  "application/vnd.sun.xml.writer": {
    "source": "apache",
    "extensions": ["sxw"]
  },
  "application/vnd.sun.xml.writer.global": {
    "source": "apache",
    "extensions": ["sxg"]
  },
  "application/vnd.sun.xml.writer.template": {
    "source": "apache",
    "extensions": ["stw"]
  },
  "application/vnd.sus-calendar": {
    "source": "iana",
    "extensions": ["sus","susp"]
  },
  "application/vnd.svd": {
    "source": "iana",
    "extensions": ["svd"]
  },
  "application/vnd.swiftview-ics": {
    "source": "iana"
  },
  "application/vnd.sycle+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.symbian.install": {
    "source": "apache",
    "extensions": ["sis","sisx"]
  },
  "application/vnd.syncml+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["xsm"]
  },
  "application/vnd.syncml.dm+wbxml": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["bdm"]
  },
  "application/vnd.syncml.dm+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["xdm"]
  },
  "application/vnd.syncml.dm.notification": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["ddf"]
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.syncml.ds.notification": {
    "source": "iana"
  },
  "application/vnd.tableschema+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tao.intent-module-archive": {
    "source": "iana",
    "extensions": ["tao"]
  },
  "application/vnd.tcpdump.pcap": {
    "source": "iana",
    "extensions": ["pcap","cap","dmp"]
  },
  "application/vnd.think-cell.ppttc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tml": {
    "source": "iana"
  },
  "application/vnd.tmobile-livetv": {
    "source": "iana",
    "extensions": ["tmo"]
  },
  "application/vnd.tri.onesource": {
    "source": "iana"
  },
  "application/vnd.trid.tpt": {
    "source": "iana",
    "extensions": ["tpt"]
  },
  "application/vnd.triscape.mxs": {
    "source": "iana",
    "extensions": ["mxs"]
  },
  "application/vnd.trueapp": {
    "source": "iana",
    "extensions": ["tra"]
  },
  "application/vnd.truedoc": {
    "source": "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    "source": "iana"
  },
  "application/vnd.ufdl": {
    "source": "iana",
    "extensions": ["ufd","ufdl"]
  },
  "application/vnd.uiq.theme": {
    "source": "iana",
    "extensions": ["utz"]
  },
  "application/vnd.umajin": {
    "source": "iana",
    "extensions": ["umj"]
  },
  "application/vnd.unity": {
    "source": "iana",
    "extensions": ["unityweb"]
  },
  "application/vnd.uoml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uoml"]
  },
  "application/vnd.uplanet.alert": {
    "source": "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.list": {
    "source": "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.signal": {
    "source": "iana"
  },
  "application/vnd.uri-map": {
    "source": "iana"
  },
  "application/vnd.valve.source.material": {
    "source": "iana"
  },
  "application/vnd.vcx": {
    "source": "iana",
    "extensions": ["vcx"]
  },
  "application/vnd.vd-study": {
    "source": "iana"
  },
  "application/vnd.vectorworks": {
    "source": "iana"
  },
  "application/vnd.vel+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.verimatrix.vcas": {
    "source": "iana"
  },
  "application/vnd.veritone.aion+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.veryant.thin": {
    "source": "iana"
  },
  "application/vnd.ves.encrypted": {
    "source": "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    "source": "iana"
  },
  "application/vnd.visio": {
    "source": "iana",
    "extensions": ["vsd","vst","vss","vsw"]
  },
  "application/vnd.visionary": {
    "source": "iana",
    "extensions": ["vis"]
  },
  "application/vnd.vividence.scriptfile": {
    "source": "iana"
  },
  "application/vnd.vsf": {
    "source": "iana",
    "extensions": ["vsf"]
  },
  "application/vnd.wap.sic": {
    "source": "iana"
  },
  "application/vnd.wap.slc": {
    "source": "iana"
  },
  "application/vnd.wap.wbxml": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["wbxml"]
  },
  "application/vnd.wap.wmlc": {
    "source": "iana",
    "extensions": ["wmlc"]
  },
  "application/vnd.wap.wmlscriptc": {
    "source": "iana",
    "extensions": ["wmlsc"]
  },
  "application/vnd.webturbo": {
    "source": "iana",
    "extensions": ["wtb"]
  },
  "application/vnd.wfa.dpp": {
    "source": "iana"
  },
  "application/vnd.wfa.p2p": {
    "source": "iana"
  },
  "application/vnd.wfa.wsc": {
    "source": "iana"
  },
  "application/vnd.windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.wmc": {
    "source": "iana"
  },
  "application/vnd.wmf.bootstrap": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    "source": "iana"
  },
  "application/vnd.wolfram.player": {
    "source": "iana",
    "extensions": ["nbp"]
  },
  "application/vnd.wordperfect": {
    "source": "iana",
    "extensions": ["wpd"]
  },
  "application/vnd.wqd": {
    "source": "iana",
    "extensions": ["wqd"]
  },
  "application/vnd.wrq-hp3000-labelled": {
    "source": "iana"
  },
  "application/vnd.wt.stf": {
    "source": "iana",
    "extensions": ["stf"]
  },
  "application/vnd.wv.csp+wbxml": {
    "source": "iana"
  },
  "application/vnd.wv.csp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.wv.ssp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xacml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xara": {
    "source": "iana",
    "extensions": ["xar"]
  },
  "application/vnd.xfdl": {
    "source": "iana",
    "extensions": ["xfdl"]
  },
  "application/vnd.xfdl.webform": {
    "source": "iana"
  },
  "application/vnd.xmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xmpie.cpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.dpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.plan": {
    "source": "iana"
  },
  "application/vnd.xmpie.ppkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.xlim": {
    "source": "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    "source": "iana",
    "extensions": ["hvd"]
  },
  "application/vnd.yamaha.hv-script": {
    "source": "iana",
    "extensions": ["hvs"]
  },
  "application/vnd.yamaha.hv-voice": {
    "source": "iana",
    "extensions": ["hvp"]
  },
  "application/vnd.yamaha.openscoreformat": {
    "source": "iana",
    "extensions": ["osf"]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["osfpvg"]
  },
  "application/vnd.yamaha.remote-setup": {
    "source": "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    "source": "iana",
    "extensions": ["saf"]
  },
  "application/vnd.yamaha.smaf-phrase": {
    "source": "iana",
    "extensions": ["spf"]
  },
  "application/vnd.yamaha.through-ngn": {
    "source": "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    "source": "iana"
  },
  "application/vnd.yaoweme": {
    "source": "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    "source": "iana",
    "extensions": ["cmp"]
  },
  "application/vnd.youtube.yt": {
    "source": "iana"
  },
  "application/vnd.zul": {
    "source": "iana",
    "extensions": ["zir","zirz"]
  },
  "application/vnd.zzazz.deck+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zaz"]
  },
  "application/voicexml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vxml"]
  },
  "application/voucher-cms+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vq-rtcpxr": {
    "source": "iana"
  },
  "application/wasm": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wasm"]
  },
  "application/watcherinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/webpush-options+json": {
    "source": "iana",
    "compressible": true
  },
  "application/whoispp-query": {
    "source": "iana"
  },
  "application/whoispp-response": {
    "source": "iana"
  },
  "application/widget": {
    "source": "iana",
    "extensions": ["wgt"]
  },
  "application/winhlp": {
    "source": "apache",
    "extensions": ["hlp"]
  },
  "application/wita": {
    "source": "iana"
  },
  "application/wordperfect5.1": {
    "source": "iana"
  },
  "application/wsdl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wsdl"]
  },
  "application/wspolicy+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wspolicy"]
  },
  "application/x-7z-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["7z"]
  },
  "application/x-abiword": {
    "source": "apache",
    "extensions": ["abw"]
  },
  "application/x-ace-compressed": {
    "source": "apache",
    "extensions": ["ace"]
  },
  "application/x-amf": {
    "source": "apache"
  },
  "application/x-apple-diskimage": {
    "source": "apache",
    "extensions": ["dmg"]
  },
  "application/x-arj": {
    "compressible": false,
    "extensions": ["arj"]
  },
  "application/x-authorware-bin": {
    "source": "apache",
    "extensions": ["aab","x32","u32","vox"]
  },
  "application/x-authorware-map": {
    "source": "apache",
    "extensions": ["aam"]
  },
  "application/x-authorware-seg": {
    "source": "apache",
    "extensions": ["aas"]
  },
  "application/x-bcpio": {
    "source": "apache",
    "extensions": ["bcpio"]
  },
  "application/x-bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/x-bittorrent": {
    "source": "apache",
    "extensions": ["torrent"]
  },
  "application/x-blorb": {
    "source": "apache",
    "extensions": ["blb","blorb"]
  },
  "application/x-bzip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz"]
  },
  "application/x-bzip2": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz2","boz"]
  },
  "application/x-cbr": {
    "source": "apache",
    "extensions": ["cbr","cba","cbt","cbz","cb7"]
  },
  "application/x-cdlink": {
    "source": "apache",
    "extensions": ["vcd"]
  },
  "application/x-cfs-compressed": {
    "source": "apache",
    "extensions": ["cfs"]
  },
  "application/x-chat": {
    "source": "apache",
    "extensions": ["chat"]
  },
  "application/x-chess-pgn": {
    "source": "apache",
    "extensions": ["pgn"]
  },
  "application/x-chrome-extension": {
    "extensions": ["crx"]
  },
  "application/x-cocoa": {
    "source": "nginx",
    "extensions": ["cco"]
  },
  "application/x-compress": {
    "source": "apache"
  },
  "application/x-conference": {
    "source": "apache",
    "extensions": ["nsc"]
  },
  "application/x-cpio": {
    "source": "apache",
    "extensions": ["cpio"]
  },
  "application/x-csh": {
    "source": "apache",
    "extensions": ["csh"]
  },
  "application/x-deb": {
    "compressible": false
  },
  "application/x-debian-package": {
    "source": "apache",
    "extensions": ["deb","udeb"]
  },
  "application/x-dgc-compressed": {
    "source": "apache",
    "extensions": ["dgc"]
  },
  "application/x-director": {
    "source": "apache",
    "extensions": ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]
  },
  "application/x-doom": {
    "source": "apache",
    "extensions": ["wad"]
  },
  "application/x-dtbncx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ncx"]
  },
  "application/x-dtbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dtb"]
  },
  "application/x-dtbresource+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["res"]
  },
  "application/x-dvi": {
    "source": "apache",
    "compressible": false,
    "extensions": ["dvi"]
  },
  "application/x-envoy": {
    "source": "apache",
    "extensions": ["evy"]
  },
  "application/x-eva": {
    "source": "apache",
    "extensions": ["eva"]
  },
  "application/x-font-bdf": {
    "source": "apache",
    "extensions": ["bdf"]
  },
  "application/x-font-dos": {
    "source": "apache"
  },
  "application/x-font-framemaker": {
    "source": "apache"
  },
  "application/x-font-ghostscript": {
    "source": "apache",
    "extensions": ["gsf"]
  },
  "application/x-font-libgrx": {
    "source": "apache"
  },
  "application/x-font-linux-psf": {
    "source": "apache",
    "extensions": ["psf"]
  },
  "application/x-font-pcf": {
    "source": "apache",
    "extensions": ["pcf"]
  },
  "application/x-font-snf": {
    "source": "apache",
    "extensions": ["snf"]
  },
  "application/x-font-speedo": {
    "source": "apache"
  },
  "application/x-font-sunos-news": {
    "source": "apache"
  },
  "application/x-font-type1": {
    "source": "apache",
    "extensions": ["pfa","pfb","pfm","afm"]
  },
  "application/x-font-vfont": {
    "source": "apache"
  },
  "application/x-freearc": {
    "source": "apache",
    "extensions": ["arc"]
  },
  "application/x-futuresplash": {
    "source": "apache",
    "extensions": ["spl"]
  },
  "application/x-gca-compressed": {
    "source": "apache",
    "extensions": ["gca"]
  },
  "application/x-glulx": {
    "source": "apache",
    "extensions": ["ulx"]
  },
  "application/x-gnumeric": {
    "source": "apache",
    "extensions": ["gnumeric"]
  },
  "application/x-gramps-xml": {
    "source": "apache",
    "extensions": ["gramps"]
  },
  "application/x-gtar": {
    "source": "apache",
    "extensions": ["gtar"]
  },
  "application/x-gzip": {
    "source": "apache"
  },
  "application/x-hdf": {
    "source": "apache",
    "extensions": ["hdf"]
  },
  "application/x-httpd-php": {
    "compressible": true,
    "extensions": ["php"]
  },
  "application/x-install-instructions": {
    "source": "apache",
    "extensions": ["install"]
  },
  "application/x-iso9660-image": {
    "source": "apache",
    "extensions": ["iso"]
  },
  "application/x-java-archive-diff": {
    "source": "nginx",
    "extensions": ["jardiff"]
  },
  "application/x-java-jnlp-file": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jnlp"]
  },
  "application/x-javascript": {
    "compressible": true
  },
  "application/x-keepass2": {
    "extensions": ["kdbx"]
  },
  "application/x-latex": {
    "source": "apache",
    "compressible": false,
    "extensions": ["latex"]
  },
  "application/x-lua-bytecode": {
    "extensions": ["luac"]
  },
  "application/x-lzh-compressed": {
    "source": "apache",
    "extensions": ["lzh","lha"]
  },
  "application/x-makeself": {
    "source": "nginx",
    "extensions": ["run"]
  },
  "application/x-mie": {
    "source": "apache",
    "extensions": ["mie"]
  },
  "application/x-mobipocket-ebook": {
    "source": "apache",
    "extensions": ["prc","mobi"]
  },
  "application/x-mpegurl": {
    "compressible": false
  },
  "application/x-ms-application": {
    "source": "apache",
    "extensions": ["application"]
  },
  "application/x-ms-shortcut": {
    "source": "apache",
    "extensions": ["lnk"]
  },
  "application/x-ms-wmd": {
    "source": "apache",
    "extensions": ["wmd"]
  },
  "application/x-ms-wmz": {
    "source": "apache",
    "extensions": ["wmz"]
  },
  "application/x-ms-xbap": {
    "source": "apache",
    "extensions": ["xbap"]
  },
  "application/x-msaccess": {
    "source": "apache",
    "extensions": ["mdb"]
  },
  "application/x-msbinder": {
    "source": "apache",
    "extensions": ["obd"]
  },
  "application/x-mscardfile": {
    "source": "apache",
    "extensions": ["crd"]
  },
  "application/x-msclip": {
    "source": "apache",
    "extensions": ["clp"]
  },
  "application/x-msdos-program": {
    "extensions": ["exe"]
  },
  "application/x-msdownload": {
    "source": "apache",
    "extensions": ["exe","dll","com","bat","msi"]
  },
  "application/x-msmediaview": {
    "source": "apache",
    "extensions": ["mvb","m13","m14"]
  },
  "application/x-msmetafile": {
    "source": "apache",
    "extensions": ["wmf","wmz","emf","emz"]
  },
  "application/x-msmoney": {
    "source": "apache",
    "extensions": ["mny"]
  },
  "application/x-mspublisher": {
    "source": "apache",
    "extensions": ["pub"]
  },
  "application/x-msschedule": {
    "source": "apache",
    "extensions": ["scd"]
  },
  "application/x-msterminal": {
    "source": "apache",
    "extensions": ["trm"]
  },
  "application/x-mswrite": {
    "source": "apache",
    "extensions": ["wri"]
  },
  "application/x-netcdf": {
    "source": "apache",
    "extensions": ["nc","cdf"]
  },
  "application/x-ns-proxy-autoconfig": {
    "compressible": true,
    "extensions": ["pac"]
  },
  "application/x-nzb": {
    "source": "apache",
    "extensions": ["nzb"]
  },
  "application/x-perl": {
    "source": "nginx",
    "extensions": ["pl","pm"]
  },
  "application/x-pilot": {
    "source": "nginx",
    "extensions": ["prc","pdb"]
  },
  "application/x-pkcs12": {
    "source": "apache",
    "compressible": false,
    "extensions": ["p12","pfx"]
  },
  "application/x-pkcs7-certificates": {
    "source": "apache",
    "extensions": ["p7b","spc"]
  },
  "application/x-pkcs7-certreqresp": {
    "source": "apache",
    "extensions": ["p7r"]
  },
  "application/x-pki-message": {
    "source": "iana"
  },
  "application/x-rar-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["rar"]
  },
  "application/x-redhat-package-manager": {
    "source": "nginx",
    "extensions": ["rpm"]
  },
  "application/x-research-info-systems": {
    "source": "apache",
    "extensions": ["ris"]
  },
  "application/x-sea": {
    "source": "nginx",
    "extensions": ["sea"]
  },
  "application/x-sh": {
    "source": "apache",
    "compressible": true,
    "extensions": ["sh"]
  },
  "application/x-shar": {
    "source": "apache",
    "extensions": ["shar"]
  },
  "application/x-shockwave-flash": {
    "source": "apache",
    "compressible": false,
    "extensions": ["swf"]
  },
  "application/x-silverlight-app": {
    "source": "apache",
    "extensions": ["xap"]
  },
  "application/x-sql": {
    "source": "apache",
    "extensions": ["sql"]
  },
  "application/x-stuffit": {
    "source": "apache",
    "compressible": false,
    "extensions": ["sit"]
  },
  "application/x-stuffitx": {
    "source": "apache",
    "extensions": ["sitx"]
  },
  "application/x-subrip": {
    "source": "apache",
    "extensions": ["srt"]
  },
  "application/x-sv4cpio": {
    "source": "apache",
    "extensions": ["sv4cpio"]
  },
  "application/x-sv4crc": {
    "source": "apache",
    "extensions": ["sv4crc"]
  },
  "application/x-t3vm-image": {
    "source": "apache",
    "extensions": ["t3"]
  },
  "application/x-tads": {
    "source": "apache",
    "extensions": ["gam"]
  },
  "application/x-tar": {
    "source": "apache",
    "compressible": true,
    "extensions": ["tar"]
  },
  "application/x-tcl": {
    "source": "apache",
    "extensions": ["tcl","tk"]
  },
  "application/x-tex": {
    "source": "apache",
    "extensions": ["tex"]
  },
  "application/x-tex-tfm": {
    "source": "apache",
    "extensions": ["tfm"]
  },
  "application/x-texinfo": {
    "source": "apache",
    "extensions": ["texinfo","texi"]
  },
  "application/x-tgif": {
    "source": "apache",
    "extensions": ["obj"]
  },
  "application/x-ustar": {
    "source": "apache",
    "extensions": ["ustar"]
  },
  "application/x-virtualbox-hdd": {
    "compressible": true,
    "extensions": ["hdd"]
  },
  "application/x-virtualbox-ova": {
    "compressible": true,
    "extensions": ["ova"]
  },
  "application/x-virtualbox-ovf": {
    "compressible": true,
    "extensions": ["ovf"]
  },
  "application/x-virtualbox-vbox": {
    "compressible": true,
    "extensions": ["vbox"]
  },
  "application/x-virtualbox-vbox-extpack": {
    "compressible": false,
    "extensions": ["vbox-extpack"]
  },
  "application/x-virtualbox-vdi": {
    "compressible": true,
    "extensions": ["vdi"]
  },
  "application/x-virtualbox-vhd": {
    "compressible": true,
    "extensions": ["vhd"]
  },
  "application/x-virtualbox-vmdk": {
    "compressible": true,
    "extensions": ["vmdk"]
  },
  "application/x-wais-source": {
    "source": "apache",
    "extensions": ["src"]
  },
  "application/x-web-app-manifest+json": {
    "compressible": true,
    "extensions": ["webapp"]
  },
  "application/x-www-form-urlencoded": {
    "source": "iana",
    "compressible": true
  },
  "application/x-x509-ca-cert": {
    "source": "iana",
    "extensions": ["der","crt","pem"]
  },
  "application/x-x509-ca-ra-cert": {
    "source": "iana"
  },
  "application/x-x509-next-ca-cert": {
    "source": "iana"
  },
  "application/x-xfig": {
    "source": "apache",
    "extensions": ["fig"]
  },
  "application/x-xliff+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xlf"]
  },
  "application/x-xpinstall": {
    "source": "apache",
    "compressible": false,
    "extensions": ["xpi"]
  },
  "application/x-xz": {
    "source": "apache",
    "extensions": ["xz"]
  },
  "application/x-zmachine": {
    "source": "apache",
    "extensions": ["z1","z2","z3","z4","z5","z6","z7","z8"]
  },
  "application/x400-bp": {
    "source": "iana"
  },
  "application/xacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xaml+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xaml"]
  },
  "application/xcap-att+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xav"]
  },
  "application/xcap-caps+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xca"]
  },
  "application/xcap-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdf"]
  },
  "application/xcap-el+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xel"]
  },
  "application/xcap-error+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcap-ns+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xns"]
  },
  "application/xcon-conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcon-conference-info-diff+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xenc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xenc"]
  },
  "application/xhtml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xhtml","xht"]
  },
  "application/xhtml-voice+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/xliff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xlf"]
  },
  "application/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml","xsl","xsd","rng"]
  },
  "application/xml-dtd": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dtd"]
  },
  "application/xml-external-parsed-entity": {
    "source": "iana"
  },
  "application/xml-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xmpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xop+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xop"]
  },
  "application/xproc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xpl"]
  },
  "application/xslt+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xsl","xslt"]
  },
  "application/xspf+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xspf"]
  },
  "application/xv+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mxml","xhvml","xvml","xvm"]
  },
  "application/yang": {
    "source": "iana",
    "extensions": ["yang"]
  },
  "application/yang-data+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yin+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["yin"]
  },
  "application/zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["zip"]
  },
  "application/zlib": {
    "source": "iana"
  },
  "application/zstd": {
    "source": "iana"
  },
  "audio/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "audio/32kadpcm": {
    "source": "iana"
  },
  "audio/3gpp": {
    "source": "iana",
    "compressible": false,
    "extensions": ["3gpp"]
  },
  "audio/3gpp2": {
    "source": "iana"
  },
  "audio/aac": {
    "source": "iana"
  },
  "audio/ac3": {
    "source": "iana"
  },
  "audio/adpcm": {
    "source": "apache",
    "extensions": ["adp"]
  },
  "audio/amr": {
    "source": "iana",
    "extensions": ["amr"]
  },
  "audio/amr-wb": {
    "source": "iana"
  },
  "audio/amr-wb+": {
    "source": "iana"
  },
  "audio/aptx": {
    "source": "iana"
  },
  "audio/asc": {
    "source": "iana"
  },
  "audio/atrac-advanced-lossless": {
    "source": "iana"
  },
  "audio/atrac-x": {
    "source": "iana"
  },
  "audio/atrac3": {
    "source": "iana"
  },
  "audio/basic": {
    "source": "iana",
    "compressible": false,
    "extensions": ["au","snd"]
  },
  "audio/bv16": {
    "source": "iana"
  },
  "audio/bv32": {
    "source": "iana"
  },
  "audio/clearmode": {
    "source": "iana"
  },
  "audio/cn": {
    "source": "iana"
  },
  "audio/dat12": {
    "source": "iana"
  },
  "audio/dls": {
    "source": "iana"
  },
  "audio/dsr-es201108": {
    "source": "iana"
  },
  "audio/dsr-es202050": {
    "source": "iana"
  },
  "audio/dsr-es202211": {
    "source": "iana"
  },
  "audio/dsr-es202212": {
    "source": "iana"
  },
  "audio/dv": {
    "source": "iana"
  },
  "audio/dvi4": {
    "source": "iana"
  },
  "audio/eac3": {
    "source": "iana"
  },
  "audio/encaprtp": {
    "source": "iana"
  },
  "audio/evrc": {
    "source": "iana"
  },
  "audio/evrc-qcp": {
    "source": "iana"
  },
  "audio/evrc0": {
    "source": "iana"
  },
  "audio/evrc1": {
    "source": "iana"
  },
  "audio/evrcb": {
    "source": "iana"
  },
  "audio/evrcb0": {
    "source": "iana"
  },
  "audio/evrcb1": {
    "source": "iana"
  },
  "audio/evrcnw": {
    "source": "iana"
  },
  "audio/evrcnw0": {
    "source": "iana"
  },
  "audio/evrcnw1": {
    "source": "iana"
  },
  "audio/evrcwb": {
    "source": "iana"
  },
  "audio/evrcwb0": {
    "source": "iana"
  },
  "audio/evrcwb1": {
    "source": "iana"
  },
  "audio/evs": {
    "source": "iana"
  },
  "audio/flexfec": {
    "source": "iana"
  },
  "audio/fwdred": {
    "source": "iana"
  },
  "audio/g711-0": {
    "source": "iana"
  },
  "audio/g719": {
    "source": "iana"
  },
  "audio/g722": {
    "source": "iana"
  },
  "audio/g7221": {
    "source": "iana"
  },
  "audio/g723": {
    "source": "iana"
  },
  "audio/g726-16": {
    "source": "iana"
  },
  "audio/g726-24": {
    "source": "iana"
  },
  "audio/g726-32": {
    "source": "iana"
  },
  "audio/g726-40": {
    "source": "iana"
  },
  "audio/g728": {
    "source": "iana"
  },
  "audio/g729": {
    "source": "iana"
  },
  "audio/g7291": {
    "source": "iana"
  },
  "audio/g729d": {
    "source": "iana"
  },
  "audio/g729e": {
    "source": "iana"
  },
  "audio/gsm": {
    "source": "iana"
  },
  "audio/gsm-efr": {
    "source": "iana"
  },
  "audio/gsm-hr-08": {
    "source": "iana"
  },
  "audio/ilbc": {
    "source": "iana"
  },
  "audio/ip-mr_v2.5": {
    "source": "iana"
  },
  "audio/isac": {
    "source": "apache"
  },
  "audio/l16": {
    "source": "iana"
  },
  "audio/l20": {
    "source": "iana"
  },
  "audio/l24": {
    "source": "iana",
    "compressible": false
  },
  "audio/l8": {
    "source": "iana"
  },
  "audio/lpc": {
    "source": "iana"
  },
  "audio/melp": {
    "source": "iana"
  },
  "audio/melp1200": {
    "source": "iana"
  },
  "audio/melp2400": {
    "source": "iana"
  },
  "audio/melp600": {
    "source": "iana"
  },
  "audio/mhas": {
    "source": "iana"
  },
  "audio/midi": {
    "source": "apache",
    "extensions": ["mid","midi","kar","rmi"]
  },
  "audio/mobile-xmf": {
    "source": "iana",
    "extensions": ["mxmf"]
  },
  "audio/mp3": {
    "compressible": false,
    "extensions": ["mp3"]
  },
  "audio/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["m4a","mp4a"]
  },
  "audio/mp4a-latm": {
    "source": "iana"
  },
  "audio/mpa": {
    "source": "iana"
  },
  "audio/mpa-robust": {
    "source": "iana"
  },
  "audio/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpga","mp2","mp2a","mp3","m2a","m3a"]
  },
  "audio/mpeg4-generic": {
    "source": "iana"
  },
  "audio/musepack": {
    "source": "apache"
  },
  "audio/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["oga","ogg","spx","opus"]
  },
  "audio/opus": {
    "source": "iana"
  },
  "audio/parityfec": {
    "source": "iana"
  },
  "audio/pcma": {
    "source": "iana"
  },
  "audio/pcma-wb": {
    "source": "iana"
  },
  "audio/pcmu": {
    "source": "iana"
  },
  "audio/pcmu-wb": {
    "source": "iana"
  },
  "audio/prs.sid": {
    "source": "iana"
  },
  "audio/qcelp": {
    "source": "iana"
  },
  "audio/raptorfec": {
    "source": "iana"
  },
  "audio/red": {
    "source": "iana"
  },
  "audio/rtp-enc-aescm128": {
    "source": "iana"
  },
  "audio/rtp-midi": {
    "source": "iana"
  },
  "audio/rtploopback": {
    "source": "iana"
  },
  "audio/rtx": {
    "source": "iana"
  },
  "audio/s3m": {
    "source": "apache",
    "extensions": ["s3m"]
  },
  "audio/scip": {
    "source": "iana"
  },
  "audio/silk": {
    "source": "apache",
    "extensions": ["sil"]
  },
  "audio/smv": {
    "source": "iana"
  },
  "audio/smv-qcp": {
    "source": "iana"
  },
  "audio/smv0": {
    "source": "iana"
  },
  "audio/sofa": {
    "source": "iana"
  },
  "audio/sp-midi": {
    "source": "iana"
  },
  "audio/speex": {
    "source": "iana"
  },
  "audio/t140c": {
    "source": "iana"
  },
  "audio/t38": {
    "source": "iana"
  },
  "audio/telephone-event": {
    "source": "iana"
  },
  "audio/tetra_acelp": {
    "source": "iana"
  },
  "audio/tetra_acelp_bb": {
    "source": "iana"
  },
  "audio/tone": {
    "source": "iana"
  },
  "audio/tsvcis": {
    "source": "iana"
  },
  "audio/uemclip": {
    "source": "iana"
  },
  "audio/ulpfec": {
    "source": "iana"
  },
  "audio/usac": {
    "source": "iana"
  },
  "audio/vdvi": {
    "source": "iana"
  },
  "audio/vmr-wb": {
    "source": "iana"
  },
  "audio/vnd.3gpp.iufp": {
    "source": "iana"
  },
  "audio/vnd.4sb": {
    "source": "iana"
  },
  "audio/vnd.audiokoz": {
    "source": "iana"
  },
  "audio/vnd.celp": {
    "source": "iana"
  },
  "audio/vnd.cisco.nse": {
    "source": "iana"
  },
  "audio/vnd.cmles.radio-events": {
    "source": "iana"
  },
  "audio/vnd.cns.anp1": {
    "source": "iana"
  },
  "audio/vnd.cns.inf1": {
    "source": "iana"
  },
  "audio/vnd.dece.audio": {
    "source": "iana",
    "extensions": ["uva","uvva"]
  },
  "audio/vnd.digital-winds": {
    "source": "iana",
    "extensions": ["eol"]
  },
  "audio/vnd.dlna.adts": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    "source": "iana"
  },
  "audio/vnd.dolby.mlp": {
    "source": "iana"
  },
  "audio/vnd.dolby.mps": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2x": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2z": {
    "source": "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    "source": "iana"
  },
  "audio/vnd.dra": {
    "source": "iana",
    "extensions": ["dra"]
  },
  "audio/vnd.dts": {
    "source": "iana",
    "extensions": ["dts"]
  },
  "audio/vnd.dts.hd": {
    "source": "iana",
    "extensions": ["dtshd"]
  },
  "audio/vnd.dts.uhd": {
    "source": "iana"
  },
  "audio/vnd.dvb.file": {
    "source": "iana"
  },
  "audio/vnd.everad.plj": {
    "source": "iana"
  },
  "audio/vnd.hns.audio": {
    "source": "iana"
  },
  "audio/vnd.lucent.voice": {
    "source": "iana",
    "extensions": ["lvp"]
  },
  "audio/vnd.ms-playready.media.pya": {
    "source": "iana",
    "extensions": ["pya"]
  },
  "audio/vnd.nokia.mobile-xmf": {
    "source": "iana"
  },
  "audio/vnd.nortel.vbk": {
    "source": "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    "source": "iana",
    "extensions": ["ecelp4800"]
  },
  "audio/vnd.nuera.ecelp7470": {
    "source": "iana",
    "extensions": ["ecelp7470"]
  },
  "audio/vnd.nuera.ecelp9600": {
    "source": "iana",
    "extensions": ["ecelp9600"]
  },
  "audio/vnd.octel.sbc": {
    "source": "iana"
  },
  "audio/vnd.presonus.multitrack": {
    "source": "iana"
  },
  "audio/vnd.qcelp": {
    "source": "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    "source": "iana"
  },
  "audio/vnd.rip": {
    "source": "iana",
    "extensions": ["rip"]
  },
  "audio/vnd.rn-realaudio": {
    "compressible": false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    "source": "iana"
  },
  "audio/vnd.vmx.cvsd": {
    "source": "iana"
  },
  "audio/vnd.wave": {
    "compressible": false
  },
  "audio/vorbis": {
    "source": "iana",
    "compressible": false
  },
  "audio/vorbis-config": {
    "source": "iana"
  },
  "audio/wav": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/wave": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["weba"]
  },
  "audio/x-aac": {
    "source": "apache",
    "compressible": false,
    "extensions": ["aac"]
  },
  "audio/x-aiff": {
    "source": "apache",
    "extensions": ["aif","aiff","aifc"]
  },
  "audio/x-caf": {
    "source": "apache",
    "compressible": false,
    "extensions": ["caf"]
  },
  "audio/x-flac": {
    "source": "apache",
    "extensions": ["flac"]
  },
  "audio/x-m4a": {
    "source": "nginx",
    "extensions": ["m4a"]
  },
  "audio/x-matroska": {
    "source": "apache",
    "extensions": ["mka"]
  },
  "audio/x-mpegurl": {
    "source": "apache",
    "extensions": ["m3u"]
  },
  "audio/x-ms-wax": {
    "source": "apache",
    "extensions": ["wax"]
  },
  "audio/x-ms-wma": {
    "source": "apache",
    "extensions": ["wma"]
  },
  "audio/x-pn-realaudio": {
    "source": "apache",
    "extensions": ["ram","ra"]
  },
  "audio/x-pn-realaudio-plugin": {
    "source": "apache",
    "extensions": ["rmp"]
  },
  "audio/x-realaudio": {
    "source": "nginx",
    "extensions": ["ra"]
  },
  "audio/x-tta": {
    "source": "apache"
  },
  "audio/x-wav": {
    "source": "apache",
    "extensions": ["wav"]
  },
  "audio/xm": {
    "source": "apache",
    "extensions": ["xm"]
  },
  "chemical/x-cdx": {
    "source": "apache",
    "extensions": ["cdx"]
  },
  "chemical/x-cif": {
    "source": "apache",
    "extensions": ["cif"]
  },
  "chemical/x-cmdf": {
    "source": "apache",
    "extensions": ["cmdf"]
  },
  "chemical/x-cml": {
    "source": "apache",
    "extensions": ["cml"]
  },
  "chemical/x-csml": {
    "source": "apache",
    "extensions": ["csml"]
  },
  "chemical/x-pdb": {
    "source": "apache"
  },
  "chemical/x-xyz": {
    "source": "apache",
    "extensions": ["xyz"]
  },
  "font/collection": {
    "source": "iana",
    "extensions": ["ttc"]
  },
  "font/otf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["otf"]
  },
  "font/sfnt": {
    "source": "iana"
  },
  "font/ttf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ttf"]
  },
  "font/woff": {
    "source": "iana",
    "extensions": ["woff"]
  },
  "font/woff2": {
    "source": "iana",
    "extensions": ["woff2"]
  },
  "image/aces": {
    "source": "iana",
    "extensions": ["exr"]
  },
  "image/apng": {
    "compressible": false,
    "extensions": ["apng"]
  },
  "image/avci": {
    "source": "iana"
  },
  "image/avcs": {
    "source": "iana"
  },
  "image/avif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["avif"]
  },
  "image/bmp": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/cgm": {
    "source": "iana",
    "extensions": ["cgm"]
  },
  "image/dicom-rle": {
    "source": "iana",
    "extensions": ["drle"]
  },
  "image/emf": {
    "source": "iana",
    "extensions": ["emf"]
  },
  "image/fits": {
    "source": "iana",
    "extensions": ["fits"]
  },
  "image/g3fax": {
    "source": "iana",
    "extensions": ["g3"]
  },
  "image/gif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gif"]
  },
  "image/heic": {
    "source": "iana",
    "extensions": ["heic"]
  },
  "image/heic-sequence": {
    "source": "iana",
    "extensions": ["heics"]
  },
  "image/heif": {
    "source": "iana",
    "extensions": ["heif"]
  },
  "image/heif-sequence": {
    "source": "iana",
    "extensions": ["heifs"]
  },
  "image/hej2k": {
    "source": "iana",
    "extensions": ["hej2"]
  },
  "image/hsj2": {
    "source": "iana",
    "extensions": ["hsj2"]
  },
  "image/ief": {
    "source": "iana",
    "extensions": ["ief"]
  },
  "image/jls": {
    "source": "iana",
    "extensions": ["jls"]
  },
  "image/jp2": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jp2","jpg2"]
  },
  "image/jpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpeg","jpg","jpe"]
  },
  "image/jph": {
    "source": "iana",
    "extensions": ["jph"]
  },
  "image/jphc": {
    "source": "iana",
    "extensions": ["jhc"]
  },
  "image/jpm": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpm"]
  },
  "image/jpx": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpx","jpf"]
  },
  "image/jxr": {
    "source": "iana",
    "extensions": ["jxr"]
  },
  "image/jxra": {
    "source": "iana",
    "extensions": ["jxra"]
  },
  "image/jxrs": {
    "source": "iana",
    "extensions": ["jxrs"]
  },
  "image/jxs": {
    "source": "iana",
    "extensions": ["jxs"]
  },
  "image/jxsc": {
    "source": "iana",
    "extensions": ["jxsc"]
  },
  "image/jxsi": {
    "source": "iana",
    "extensions": ["jxsi"]
  },
  "image/jxss": {
    "source": "iana",
    "extensions": ["jxss"]
  },
  "image/ktx": {
    "source": "iana",
    "extensions": ["ktx"]
  },
  "image/ktx2": {
    "source": "iana",
    "extensions": ["ktx2"]
  },
  "image/naplps": {
    "source": "iana"
  },
  "image/pjpeg": {
    "compressible": false
  },
  "image/png": {
    "source": "iana",
    "compressible": false,
    "extensions": ["png"]
  },
  "image/prs.btif": {
    "source": "iana",
    "extensions": ["btif"]
  },
  "image/prs.pti": {
    "source": "iana",
    "extensions": ["pti"]
  },
  "image/pwg-raster": {
    "source": "iana"
  },
  "image/sgi": {
    "source": "apache",
    "extensions": ["sgi"]
  },
  "image/svg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["svg","svgz"]
  },
  "image/t38": {
    "source": "iana",
    "extensions": ["t38"]
  },
  "image/tiff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["tif","tiff"]
  },
  "image/tiff-fx": {
    "source": "iana",
    "extensions": ["tfx"]
  },
  "image/vnd.adobe.photoshop": {
    "source": "iana",
    "compressible": true,
    "extensions": ["psd"]
  },
  "image/vnd.airzip.accelerator.azv": {
    "source": "iana",
    "extensions": ["azv"]
  },
  "image/vnd.cns.inf2": {
    "source": "iana"
  },
  "image/vnd.dece.graphic": {
    "source": "iana",
    "extensions": ["uvi","uvvi","uvg","uvvg"]
  },
  "image/vnd.djvu": {
    "source": "iana",
    "extensions": ["djvu","djv"]
  },
  "image/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "image/vnd.dwg": {
    "source": "iana",
    "extensions": ["dwg"]
  },
  "image/vnd.dxf": {
    "source": "iana",
    "extensions": ["dxf"]
  },
  "image/vnd.fastbidsheet": {
    "source": "iana",
    "extensions": ["fbs"]
  },
  "image/vnd.fpx": {
    "source": "iana",
    "extensions": ["fpx"]
  },
  "image/vnd.fst": {
    "source": "iana",
    "extensions": ["fst"]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    "source": "iana",
    "extensions": ["mmr"]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    "source": "iana",
    "extensions": ["rlc"]
  },
  "image/vnd.globalgraphics.pgb": {
    "source": "iana"
  },
  "image/vnd.microsoft.icon": {
    "source": "iana",
    "extensions": ["ico"]
  },
  "image/vnd.mix": {
    "source": "iana"
  },
  "image/vnd.mozilla.apng": {
    "source": "iana"
  },
  "image/vnd.ms-dds": {
    "extensions": ["dds"]
  },
  "image/vnd.ms-modi": {
    "source": "iana",
    "extensions": ["mdi"]
  },
  "image/vnd.ms-photo": {
    "source": "apache",
    "extensions": ["wdp"]
  },
  "image/vnd.net-fpx": {
    "source": "iana",
    "extensions": ["npx"]
  },
  "image/vnd.pco.b16": {
    "source": "iana",
    "extensions": ["b16"]
  },
  "image/vnd.radiance": {
    "source": "iana"
  },
  "image/vnd.sealed.png": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    "source": "iana"
  },
  "image/vnd.svf": {
    "source": "iana"
  },
  "image/vnd.tencent.tap": {
    "source": "iana",
    "extensions": ["tap"]
  },
  "image/vnd.valve.source.texture": {
    "source": "iana",
    "extensions": ["vtf"]
  },
  "image/vnd.wap.wbmp": {
    "source": "iana",
    "extensions": ["wbmp"]
  },
  "image/vnd.xiff": {
    "source": "iana",
    "extensions": ["xif"]
  },
  "image/vnd.zbrush.pcx": {
    "source": "iana",
    "extensions": ["pcx"]
  },
  "image/webp": {
    "source": "apache",
    "extensions": ["webp"]
  },
  "image/wmf": {
    "source": "iana",
    "extensions": ["wmf"]
  },
  "image/x-3ds": {
    "source": "apache",
    "extensions": ["3ds"]
  },
  "image/x-cmu-raster": {
    "source": "apache",
    "extensions": ["ras"]
  },
  "image/x-cmx": {
    "source": "apache",
    "extensions": ["cmx"]
  },
  "image/x-freehand": {
    "source": "apache",
    "extensions": ["fh","fhc","fh4","fh5","fh7"]
  },
  "image/x-icon": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ico"]
  },
  "image/x-jng": {
    "source": "nginx",
    "extensions": ["jng"]
  },
  "image/x-mrsid-image": {
    "source": "apache",
    "extensions": ["sid"]
  },
  "image/x-ms-bmp": {
    "source": "nginx",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/x-pcx": {
    "source": "apache",
    "extensions": ["pcx"]
  },
  "image/x-pict": {
    "source": "apache",
    "extensions": ["pic","pct"]
  },
  "image/x-portable-anymap": {
    "source": "apache",
    "extensions": ["pnm"]
  },
  "image/x-portable-bitmap": {
    "source": "apache",
    "extensions": ["pbm"]
  },
  "image/x-portable-graymap": {
    "source": "apache",
    "extensions": ["pgm"]
  },
  "image/x-portable-pixmap": {
    "source": "apache",
    "extensions": ["ppm"]
  },
  "image/x-rgb": {
    "source": "apache",
    "extensions": ["rgb"]
  },
  "image/x-tga": {
    "source": "apache",
    "extensions": ["tga"]
  },
  "image/x-xbitmap": {
    "source": "apache",
    "extensions": ["xbm"]
  },
  "image/x-xcf": {
    "compressible": false
  },
  "image/x-xpixmap": {
    "source": "apache",
    "extensions": ["xpm"]
  },
  "image/x-xwindowdump": {
    "source": "apache",
    "extensions": ["xwd"]
  },
  "message/cpim": {
    "source": "iana"
  },
  "message/delivery-status": {
    "source": "iana"
  },
  "message/disposition-notification": {
    "source": "iana",
    "extensions": [
      "disposition-notification"
    ]
  },
  "message/external-body": {
    "source": "iana"
  },
  "message/feedback-report": {
    "source": "iana"
  },
  "message/global": {
    "source": "iana",
    "extensions": ["u8msg"]
  },
  "message/global-delivery-status": {
    "source": "iana",
    "extensions": ["u8dsn"]
  },
  "message/global-disposition-notification": {
    "source": "iana",
    "extensions": ["u8mdn"]
  },
  "message/global-headers": {
    "source": "iana",
    "extensions": ["u8hdr"]
  },
  "message/http": {
    "source": "iana",
    "compressible": false
  },
  "message/imdn+xml": {
    "source": "iana",
    "compressible": true
  },
  "message/news": {
    "source": "iana"
  },
  "message/partial": {
    "source": "iana",
    "compressible": false
  },
  "message/rfc822": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eml","mime"]
  },
  "message/s-http": {
    "source": "iana"
  },
  "message/sip": {
    "source": "iana"
  },
  "message/sipfrag": {
    "source": "iana"
  },
  "message/tracking-status": {
    "source": "iana"
  },
  "message/vnd.si.simp": {
    "source": "iana"
  },
  "message/vnd.wfa.wsc": {
    "source": "iana",
    "extensions": ["wsc"]
  },
  "model/3mf": {
    "source": "iana",
    "extensions": ["3mf"]
  },
  "model/e57": {
    "source": "iana"
  },
  "model/gltf+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gltf"]
  },
  "model/gltf-binary": {
    "source": "iana",
    "compressible": true,
    "extensions": ["glb"]
  },
  "model/iges": {
    "source": "iana",
    "compressible": false,
    "extensions": ["igs","iges"]
  },
  "model/mesh": {
    "source": "iana",
    "compressible": false,
    "extensions": ["msh","mesh","silo"]
  },
  "model/mtl": {
    "source": "iana",
    "extensions": ["mtl"]
  },
  "model/obj": {
    "source": "iana",
    "extensions": ["obj"]
  },
  "model/step+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["stpz"]
  },
  "model/step-xml+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["stpxz"]
  },
  "model/stl": {
    "source": "iana",
    "extensions": ["stl"]
  },
  "model/vnd.collada+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dae"]
  },
  "model/vnd.dwf": {
    "source": "iana",
    "extensions": ["dwf"]
  },
  "model/vnd.flatland.3dml": {
    "source": "iana"
  },
  "model/vnd.gdl": {
    "source": "iana",
    "extensions": ["gdl"]
  },
  "model/vnd.gs-gdl": {
    "source": "apache"
  },
  "model/vnd.gs.gdl": {
    "source": "iana"
  },
  "model/vnd.gtw": {
    "source": "iana",
    "extensions": ["gtw"]
  },
  "model/vnd.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "model/vnd.mts": {
    "source": "iana",
    "extensions": ["mts"]
  },
  "model/vnd.opengex": {
    "source": "iana",
    "extensions": ["ogex"]
  },
  "model/vnd.parasolid.transmit.binary": {
    "source": "iana",
    "extensions": ["x_b"]
  },
  "model/vnd.parasolid.transmit.text": {
    "source": "iana",
    "extensions": ["x_t"]
  },
  "model/vnd.pytha.pyox": {
    "source": "iana"
  },
  "model/vnd.rosette.annotated-data-model": {
    "source": "iana"
  },
  "model/vnd.sap.vds": {
    "source": "iana",
    "extensions": ["vds"]
  },
  "model/vnd.usdz+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["usdz"]
  },
  "model/vnd.valve.source.compiled-map": {
    "source": "iana",
    "extensions": ["bsp"]
  },
  "model/vnd.vtu": {
    "source": "iana",
    "extensions": ["vtu"]
  },
  "model/vrml": {
    "source": "iana",
    "compressible": false,
    "extensions": ["wrl","vrml"]
  },
  "model/x3d+binary": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3db","x3dbz"]
  },
  "model/x3d+fastinfoset": {
    "source": "iana",
    "extensions": ["x3db"]
  },
  "model/x3d+vrml": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3dv","x3dvz"]
  },
  "model/x3d+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["x3d","x3dz"]
  },
  "model/x3d-vrml": {
    "source": "iana",
    "extensions": ["x3dv"]
  },
  "multipart/alternative": {
    "source": "iana",
    "compressible": false
  },
  "multipart/appledouble": {
    "source": "iana"
  },
  "multipart/byteranges": {
    "source": "iana"
  },
  "multipart/digest": {
    "source": "iana"
  },
  "multipart/encrypted": {
    "source": "iana",
    "compressible": false
  },
  "multipart/form-data": {
    "source": "iana",
    "compressible": false
  },
  "multipart/header-set": {
    "source": "iana"
  },
  "multipart/mixed": {
    "source": "iana"
  },
  "multipart/multilingual": {
    "source": "iana"
  },
  "multipart/parallel": {
    "source": "iana"
  },
  "multipart/related": {
    "source": "iana",
    "compressible": false
  },
  "multipart/report": {
    "source": "iana"
  },
  "multipart/signed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/vnd.bint.med-plus": {
    "source": "iana"
  },
  "multipart/voice-message": {
    "source": "iana"
  },
  "multipart/x-mixed-replace": {
    "source": "iana"
  },
  "text/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "text/cache-manifest": {
    "source": "iana",
    "compressible": true,
    "extensions": ["appcache","manifest"]
  },
  "text/calendar": {
    "source": "iana",
    "extensions": ["ics","ifb"]
  },
  "text/calender": {
    "compressible": true
  },
  "text/cmd": {
    "compressible": true
  },
  "text/coffeescript": {
    "extensions": ["coffee","litcoffee"]
  },
  "text/cql": {
    "source": "iana"
  },
  "text/cql-expression": {
    "source": "iana"
  },
  "text/cql-identifier": {
    "source": "iana"
  },
  "text/css": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["css"]
  },
  "text/csv": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csv"]
  },
  "text/csv-schema": {
    "source": "iana"
  },
  "text/directory": {
    "source": "iana"
  },
  "text/dns": {
    "source": "iana"
  },
  "text/ecmascript": {
    "source": "iana"
  },
  "text/encaprtp": {
    "source": "iana"
  },
  "text/enriched": {
    "source": "iana"
  },
  "text/fhirpath": {
    "source": "iana"
  },
  "text/flexfec": {
    "source": "iana"
  },
  "text/fwdred": {
    "source": "iana"
  },
  "text/gff3": {
    "source": "iana"
  },
  "text/grammar-ref-list": {
    "source": "iana"
  },
  "text/html": {
    "source": "iana",
    "compressible": true,
    "extensions": ["html","htm","shtml"]
  },
  "text/jade": {
    "extensions": ["jade"]
  },
  "text/javascript": {
    "source": "iana",
    "compressible": true
  },
  "text/jcr-cnd": {
    "source": "iana"
  },
  "text/jsx": {
    "compressible": true,
    "extensions": ["jsx"]
  },
  "text/less": {
    "compressible": true,
    "extensions": ["less"]
  },
  "text/markdown": {
    "source": "iana",
    "compressible": true,
    "extensions": ["markdown","md"]
  },
  "text/mathml": {
    "source": "nginx",
    "extensions": ["mml"]
  },
  "text/mdx": {
    "compressible": true,
    "extensions": ["mdx"]
  },
  "text/mizar": {
    "source": "iana"
  },
  "text/n3": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["n3"]
  },
  "text/parameters": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/parityfec": {
    "source": "iana"
  },
  "text/plain": {
    "source": "iana",
    "compressible": true,
    "extensions": ["txt","text","conf","def","list","log","in","ini"]
  },
  "text/provenance-notation": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/prs.fallenstein.rst": {
    "source": "iana"
  },
  "text/prs.lines.tag": {
    "source": "iana",
    "extensions": ["dsc"]
  },
  "text/prs.prop.logic": {
    "source": "iana"
  },
  "text/raptorfec": {
    "source": "iana"
  },
  "text/red": {
    "source": "iana"
  },
  "text/rfc822-headers": {
    "source": "iana"
  },
  "text/richtext": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtx"]
  },
  "text/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "text/rtp-enc-aescm128": {
    "source": "iana"
  },
  "text/rtploopback": {
    "source": "iana"
  },
  "text/rtx": {
    "source": "iana"
  },
  "text/sgml": {
    "source": "iana",
    "extensions": ["sgml","sgm"]
  },
  "text/shaclc": {
    "source": "iana"
  },
  "text/shex": {
    "source": "iana",
    "extensions": ["shex"]
  },
  "text/slim": {
    "extensions": ["slim","slm"]
  },
  "text/spdx": {
    "source": "iana",
    "extensions": ["spdx"]
  },
  "text/strings": {
    "source": "iana"
  },
  "text/stylus": {
    "extensions": ["stylus","styl"]
  },
  "text/t140": {
    "source": "iana"
  },
  "text/tab-separated-values": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tsv"]
  },
  "text/troff": {
    "source": "iana",
    "extensions": ["t","tr","roff","man","me","ms"]
  },
  "text/turtle": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["ttl"]
  },
  "text/ulpfec": {
    "source": "iana"
  },
  "text/uri-list": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uri","uris","urls"]
  },
  "text/vcard": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vcard"]
  },
  "text/vnd.a": {
    "source": "iana"
  },
  "text/vnd.abc": {
    "source": "iana"
  },
  "text/vnd.ascii-art": {
    "source": "iana"
  },
  "text/vnd.curl": {
    "source": "iana",
    "extensions": ["curl"]
  },
  "text/vnd.curl.dcurl": {
    "source": "apache",
    "extensions": ["dcurl"]
  },
  "text/vnd.curl.mcurl": {
    "source": "apache",
    "extensions": ["mcurl"]
  },
  "text/vnd.curl.scurl": {
    "source": "apache",
    "extensions": ["scurl"]
  },
  "text/vnd.debian.copyright": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.dmclientscript": {
    "source": "iana"
  },
  "text/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "text/vnd.esmertec.theme-descriptor": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.ficlab.flt": {
    "source": "iana"
  },
  "text/vnd.fly": {
    "source": "iana",
    "extensions": ["fly"]
  },
  "text/vnd.fmi.flexstor": {
    "source": "iana",
    "extensions": ["flx"]
  },
  "text/vnd.gml": {
    "source": "iana"
  },
  "text/vnd.graphviz": {
    "source": "iana",
    "extensions": ["gv"]
  },
  "text/vnd.hans": {
    "source": "iana"
  },
  "text/vnd.hgl": {
    "source": "iana"
  },
  "text/vnd.in3d.3dml": {
    "source": "iana",
    "extensions": ["3dml"]
  },
  "text/vnd.in3d.spot": {
    "source": "iana",
    "extensions": ["spot"]
  },
  "text/vnd.iptc.newsml": {
    "source": "iana"
  },
  "text/vnd.iptc.nitf": {
    "source": "iana"
  },
  "text/vnd.latex-z": {
    "source": "iana"
  },
  "text/vnd.motorola.reflex": {
    "source": "iana"
  },
  "text/vnd.ms-mediapackage": {
    "source": "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    "source": "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    "source": "iana"
  },
  "text/vnd.senx.warpscript": {
    "source": "iana"
  },
  "text/vnd.si.uricatalogue": {
    "source": "iana"
  },
  "text/vnd.sosi": {
    "source": "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["jad"]
  },
  "text/vnd.trolltech.linguist": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.wap.si": {
    "source": "iana"
  },
  "text/vnd.wap.sl": {
    "source": "iana"
  },
  "text/vnd.wap.wml": {
    "source": "iana",
    "extensions": ["wml"]
  },
  "text/vnd.wap.wmlscript": {
    "source": "iana",
    "extensions": ["wmls"]
  },
  "text/vtt": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["vtt"]
  },
  "text/x-asm": {
    "source": "apache",
    "extensions": ["s","asm"]
  },
  "text/x-c": {
    "source": "apache",
    "extensions": ["c","cc","cxx","cpp","h","hh","dic"]
  },
  "text/x-component": {
    "source": "nginx",
    "extensions": ["htc"]
  },
  "text/x-fortran": {
    "source": "apache",
    "extensions": ["f","for","f77","f90"]
  },
  "text/x-gwt-rpc": {
    "compressible": true
  },
  "text/x-handlebars-template": {
    "extensions": ["hbs"]
  },
  "text/x-java-source": {
    "source": "apache",
    "extensions": ["java"]
  },
  "text/x-jquery-tmpl": {
    "compressible": true
  },
  "text/x-lua": {
    "extensions": ["lua"]
  },
  "text/x-markdown": {
    "compressible": true,
    "extensions": ["mkd"]
  },
  "text/x-nfo": {
    "source": "apache",
    "extensions": ["nfo"]
  },
  "text/x-opml": {
    "source": "apache",
    "extensions": ["opml"]
  },
  "text/x-org": {
    "compressible": true,
    "extensions": ["org"]
  },
  "text/x-pascal": {
    "source": "apache",
    "extensions": ["p","pas"]
  },
  "text/x-processing": {
    "compressible": true,
    "extensions": ["pde"]
  },
  "text/x-sass": {
    "extensions": ["sass"]
  },
  "text/x-scss": {
    "extensions": ["scss"]
  },
  "text/x-setext": {
    "source": "apache",
    "extensions": ["etx"]
  },
  "text/x-sfv": {
    "source": "apache",
    "extensions": ["sfv"]
  },
  "text/x-suse-ymp": {
    "compressible": true,
    "extensions": ["ymp"]
  },
  "text/x-uuencode": {
    "source": "apache",
    "extensions": ["uu"]
  },
  "text/x-vcalendar": {
    "source": "apache",
    "extensions": ["vcs"]
  },
  "text/x-vcard": {
    "source": "apache",
    "extensions": ["vcf"]
  },
  "text/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml"]
  },
  "text/xml-external-parsed-entity": {
    "source": "iana"
  },
  "text/yaml": {
    "compressible": true,
    "extensions": ["yaml","yml"]
  },
  "video/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "video/3gpp": {
    "source": "iana",
    "extensions": ["3gp","3gpp"]
  },
  "video/3gpp-tt": {
    "source": "iana"
  },
  "video/3gpp2": {
    "source": "iana",
    "extensions": ["3g2"]
  },
  "video/av1": {
    "source": "iana"
  },
  "video/bmpeg": {
    "source": "iana"
  },
  "video/bt656": {
    "source": "iana"
  },
  "video/celb": {
    "source": "iana"
  },
  "video/dv": {
    "source": "iana"
  },
  "video/encaprtp": {
    "source": "iana"
  },
  "video/ffv1": {
    "source": "iana"
  },
  "video/flexfec": {
    "source": "iana"
  },
  "video/h261": {
    "source": "iana",
    "extensions": ["h261"]
  },
  "video/h263": {
    "source": "iana",
    "extensions": ["h263"]
  },
  "video/h263-1998": {
    "source": "iana"
  },
  "video/h263-2000": {
    "source": "iana"
  },
  "video/h264": {
    "source": "iana",
    "extensions": ["h264"]
  },
  "video/h264-rcdo": {
    "source": "iana"
  },
  "video/h264-svc": {
    "source": "iana"
  },
  "video/h265": {
    "source": "iana"
  },
  "video/iso.segment": {
    "source": "iana",
    "extensions": ["m4s"]
  },
  "video/jpeg": {
    "source": "iana",
    "extensions": ["jpgv"]
  },
  "video/jpeg2000": {
    "source": "iana"
  },
  "video/jpm": {
    "source": "apache",
    "extensions": ["jpm","jpgm"]
  },
  "video/mj2": {
    "source": "iana",
    "extensions": ["mj2","mjp2"]
  },
  "video/mp1s": {
    "source": "iana"
  },
  "video/mp2p": {
    "source": "iana"
  },
  "video/mp2t": {
    "source": "iana",
    "extensions": ["ts"]
  },
  "video/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mp4","mp4v","mpg4"]
  },
  "video/mp4v-es": {
    "source": "iana"
  },
  "video/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpeg","mpg","mpe","m1v","m2v"]
  },
  "video/mpeg4-generic": {
    "source": "iana"
  },
  "video/mpv": {
    "source": "iana"
  },
  "video/nv": {
    "source": "iana"
  },
  "video/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogv"]
  },
  "video/parityfec": {
    "source": "iana"
  },
  "video/pointer": {
    "source": "iana"
  },
  "video/quicktime": {
    "source": "iana",
    "compressible": false,
    "extensions": ["qt","mov"]
  },
  "video/raptorfec": {
    "source": "iana"
  },
  "video/raw": {
    "source": "iana"
  },
  "video/rtp-enc-aescm128": {
    "source": "iana"
  },
  "video/rtploopback": {
    "source": "iana"
  },
  "video/rtx": {
    "source": "iana"
  },
  "video/scip": {
    "source": "iana"
  },
  "video/smpte291": {
    "source": "iana"
  },
  "video/smpte292m": {
    "source": "iana"
  },
  "video/ulpfec": {
    "source": "iana"
  },
  "video/vc1": {
    "source": "iana"
  },
  "video/vc2": {
    "source": "iana"
  },
  "video/vnd.cctv": {
    "source": "iana"
  },
  "video/vnd.dece.hd": {
    "source": "iana",
    "extensions": ["uvh","uvvh"]
  },
  "video/vnd.dece.mobile": {
    "source": "iana",
    "extensions": ["uvm","uvvm"]
  },
  "video/vnd.dece.mp4": {
    "source": "iana"
  },
  "video/vnd.dece.pd": {
    "source": "iana",
    "extensions": ["uvp","uvvp"]
  },
  "video/vnd.dece.sd": {
    "source": "iana",
    "extensions": ["uvs","uvvs"]
  },
  "video/vnd.dece.video": {
    "source": "iana",
    "extensions": ["uvv","uvvv"]
  },
  "video/vnd.directv.mpeg": {
    "source": "iana"
  },
  "video/vnd.directv.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dlna.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dvb.file": {
    "source": "iana",
    "extensions": ["dvb"]
  },
  "video/vnd.fvt": {
    "source": "iana",
    "extensions": ["fvt"]
  },
  "video/vnd.hns.video": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsavc": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    "source": "iana"
  },
  "video/vnd.motorola.video": {
    "source": "iana"
  },
  "video/vnd.motorola.videop": {
    "source": "iana"
  },
  "video/vnd.mpegurl": {
    "source": "iana",
    "extensions": ["mxu","m4u"]
  },
  "video/vnd.ms-playready.media.pyv": {
    "source": "iana",
    "extensions": ["pyv"]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    "source": "iana"
  },
  "video/vnd.nokia.mp4vr": {
    "source": "iana"
  },
  "video/vnd.nokia.videovoip": {
    "source": "iana"
  },
  "video/vnd.objectvideo": {
    "source": "iana"
  },
  "video/vnd.radgamettools.bink": {
    "source": "iana"
  },
  "video/vnd.radgamettools.smacker": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg1": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg4": {
    "source": "iana"
  },
  "video/vnd.sealed.swf": {
    "source": "iana"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    "source": "iana"
  },
  "video/vnd.uvvu.mp4": {
    "source": "iana",
    "extensions": ["uvu","uvvu"]
  },
  "video/vnd.vivo": {
    "source": "iana",
    "extensions": ["viv"]
  },
  "video/vnd.youtube.yt": {
    "source": "iana"
  },
  "video/vp8": {
    "source": "iana"
  },
  "video/vp9": {
    "source": "iana"
  },
  "video/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["webm"]
  },
  "video/x-f4v": {
    "source": "apache",
    "extensions": ["f4v"]
  },
  "video/x-fli": {
    "source": "apache",
    "extensions": ["fli"]
  },
  "video/x-flv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["flv"]
  },
  "video/x-m4v": {
    "source": "apache",
    "extensions": ["m4v"]
  },
  "video/x-matroska": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mkv","mk3d","mks"]
  },
  "video/x-mng": {
    "source": "apache",
    "extensions": ["mng"]
  },
  "video/x-ms-asf": {
    "source": "apache",
    "extensions": ["asf","asx"]
  },
  "video/x-ms-vob": {
    "source": "apache",
    "extensions": ["vob"]
  },
  "video/x-ms-wm": {
    "source": "apache",
    "extensions": ["wm"]
  },
  "video/x-ms-wmv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["wmv"]
  },
  "video/x-ms-wmx": {
    "source": "apache",
    "extensions": ["wmx"]
  },
  "video/x-ms-wvx": {
    "source": "apache",
    "extensions": ["wvx"]
  },
  "video/x-msvideo": {
    "source": "apache",
    "extensions": ["avi"]
  },
  "video/x-sgi-movie": {
    "source": "apache",
    "extensions": ["movie"]
  },
  "video/x-smv": {
    "source": "apache",
    "extensions": ["smv"]
  },
  "x-conference/x-cooltalk": {
    "source": "apache",
    "extensions": ["ice"]
  },
  "x-shader/x-fragment": {
    "compressible": true
  },
  "x-shader/x-vertex": {
    "compressible": true
  }
}`);
const osType1 = (()=>{
    const { Deno  } = globalThis;
    if (typeof Deno?.build?.os === "string") {
        return Deno.build.os;
    }
    const { navigator  } = globalThis;
    if (navigator?.appVersion?.includes?.("Win") ?? false) {
        return "windows";
    }
    return "linux";
})();
const isWindows1 = osType1 === "windows";
const CHAR_FORWARD_SLASH1 = 47;
function assertPath1(path41) {
    if (typeof path41 !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path41)}`);
    }
}
function isPosixPathSeparator1(code) {
    return code === 47;
}
function isPathSeparator1(code) {
    return isPosixPathSeparator1(code) || code === 92;
}
function isWindowsDeviceRoot1(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString1(path42, allowAboveRoot, separator, isPathSeparator11) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i72 = 0, len = path42.length; i72 <= len; ++i72){
        if (i72 < len) code = path42.charCodeAt(i72);
        else if (isPathSeparator11(code)) break;
        else code = CHAR_FORWARD_SLASH1;
        if (isPathSeparator11(code)) {
            if (lastSlash === i72 - 1 || dots === 1) {} else if (lastSlash !== i72 - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i72;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i72;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path42.slice(lastSlash + 1, i72);
                else res = path42.slice(lastSlash + 1, i72);
                lastSegmentLength = i72 - lastSlash - 1;
            }
            lastSlash = i72;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format1(sep10, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep10 + base;
}
const WHITESPACE_ENCODINGS1 = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace1(string) {
    return string.replaceAll(/[\s]/g, (c8)=>{
        return WHITESPACE_ENCODINGS1[c8] ?? c8;
    });
}
class DenoStdInternalError1 extends Error {
    constructor(message){
        super(message);
        this.name = "DenoStdInternalError";
    }
}
function assert1(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError1(msg);
    }
}
const sep3 = "\\";
const delimiter3 = ";";
function resolve3(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i73 = pathSegments.length - 1; i73 >= -1; i73--){
        let path43;
        const { Deno  } = globalThis;
        if (i73 >= 0) {
            path43 = pathSegments[i73];
        } else if (!resolvedDevice) {
            if (typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path43 = Deno.cwd();
        } else {
            if (typeof Deno?.env?.get !== "function" || typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path43 = Deno.env.get(`=${resolvedDevice}`) || Deno.cwd();
            if (path43 === undefined || path43.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path43 = `${resolvedDevice}\\`;
            }
        }
        assertPath1(path43);
        const len = path43.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute11 = false;
        const code = path43.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator1(code)) {
                isAbsolute11 = true;
                if (isPathSeparator1(path43.charCodeAt(1))) {
                    let j10 = 2;
                    let last = j10;
                    for(; j10 < len; ++j10){
                        if (isPathSeparator1(path43.charCodeAt(j10))) break;
                    }
                    if (j10 < len && j10 !== last) {
                        const firstPart = path43.slice(last, j10);
                        last = j10;
                        for(; j10 < len; ++j10){
                            if (!isPathSeparator1(path43.charCodeAt(j10))) break;
                        }
                        if (j10 < len && j10 !== last) {
                            last = j10;
                            for(; j10 < len; ++j10){
                                if (isPathSeparator1(path43.charCodeAt(j10))) break;
                            }
                            if (j10 === len) {
                                device = `\\\\${firstPart}\\${path43.slice(last)}`;
                                rootEnd = j10;
                            } else if (j10 !== last) {
                                device = `\\\\${firstPart}\\${path43.slice(last, j10)}`;
                                rootEnd = j10;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot1(code)) {
                if (path43.charCodeAt(1) === 58) {
                    device = path43.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator1(path43.charCodeAt(2))) {
                            isAbsolute11 = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator1(code)) {
            rootEnd = 1;
            isAbsolute11 = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path43.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute11;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString1(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator1);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize4(path44) {
    assertPath1(path44);
    const len = path44.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute21 = false;
    const code = path44.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            isAbsolute21 = true;
            if (isPathSeparator1(path44.charCodeAt(1))) {
                let j11 = 2;
                let last = j11;
                for(; j11 < len; ++j11){
                    if (isPathSeparator1(path44.charCodeAt(j11))) break;
                }
                if (j11 < len && j11 !== last) {
                    const firstPart = path44.slice(last, j11);
                    last = j11;
                    for(; j11 < len; ++j11){
                        if (!isPathSeparator1(path44.charCodeAt(j11))) break;
                    }
                    if (j11 < len && j11 !== last) {
                        last = j11;
                        for(; j11 < len; ++j11){
                            if (isPathSeparator1(path44.charCodeAt(j11))) break;
                        }
                        if (j11 === len) {
                            return `\\\\${firstPart}\\${path44.slice(last)}\\`;
                        } else if (j11 !== last) {
                            device = `\\\\${firstPart}\\${path44.slice(last, j11)}`;
                            rootEnd = j11;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path44.charCodeAt(1) === 58) {
                device = path44.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator1(path44.charCodeAt(2))) {
                        isAbsolute21 = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString1(path44.slice(rootEnd), !isAbsolute21, "\\", isPathSeparator1);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute21) tail = ".";
    if (tail.length > 0 && isPathSeparator1(path44.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute21) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute21) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute3(path45) {
    assertPath1(path45);
    const len = path45.length;
    if (len === 0) return false;
    const code = path45.charCodeAt(0);
    if (isPathSeparator1(code)) {
        return true;
    } else if (isWindowsDeviceRoot1(code)) {
        if (len > 2 && path45.charCodeAt(1) === 58) {
            if (isPathSeparator1(path45.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join4(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i74 = 0; i74 < pathsCount; ++i74){
        const path46 = paths[i74];
        assertPath1(path46);
        if (path46.length > 0) {
            if (joined === undefined) joined = firstPart = path46;
            else joined += `\\${path46}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert1(firstPart != null);
    if (isPathSeparator1(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator1(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator1(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator1(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize4(joined);
}
function relative3(from3, to) {
    assertPath1(from3);
    assertPath1(to);
    if (from3 === to) return "";
    const fromOrig = resolve3(from3);
    const toOrig = resolve3(to);
    if (fromOrig === toOrig) return "";
    from3 = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from3 === to) return "";
    let fromStart = 0;
    let fromEnd = from3.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from3.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from3.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i75 = 0;
    for(; i75 <= length; ++i75){
        if (i75 === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i75) === 92) {
                    return toOrig.slice(toStart + i75 + 1);
                } else if (i75 === 2) {
                    return toOrig.slice(toStart + i75);
                }
            }
            if (fromLen > length) {
                if (from3.charCodeAt(fromStart + i75) === 92) {
                    lastCommonSep = i75;
                } else if (i75 === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from3.charCodeAt(fromStart + i75);
        const toCode = to.charCodeAt(toStart + i75);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i75;
    }
    if (i75 !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i75 = fromStart + lastCommonSep + 1; i75 <= fromEnd; ++i75){
        if (i75 === fromEnd || from3.charCodeAt(i75) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath3(path47) {
    if (typeof path47 !== "string") return path47;
    if (path47.length === 0) return "";
    const resolvedPath = resolve3(path47);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot1(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path47;
}
function dirname3(path48) {
    assertPath1(path48);
    const len = path48.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path48.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator1(path48.charCodeAt(1))) {
                let j12 = 2;
                let last = j12;
                for(; j12 < len; ++j12){
                    if (isPathSeparator1(path48.charCodeAt(j12))) break;
                }
                if (j12 < len && j12 !== last) {
                    last = j12;
                    for(; j12 < len; ++j12){
                        if (!isPathSeparator1(path48.charCodeAt(j12))) break;
                    }
                    if (j12 < len && j12 !== last) {
                        last = j12;
                        for(; j12 < len; ++j12){
                            if (isPathSeparator1(path48.charCodeAt(j12))) break;
                        }
                        if (j12 === len) {
                            return path48;
                        }
                        if (j12 !== last) {
                            rootEnd = offset = j12 + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path48.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator1(path48.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        return path48;
    }
    for(let i76 = len - 1; i76 >= offset; --i76){
        if (isPathSeparator1(path48.charCodeAt(i76))) {
            if (!matchedSlash) {
                end = i76;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return path48.slice(0, end);
}
function basename3(path49, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath1(path49);
    let start19 = 0;
    let end = -1;
    let matchedSlash = true;
    let i77;
    if (path49.length >= 2) {
        const drive = path49.charCodeAt(0);
        if (isWindowsDeviceRoot1(drive)) {
            if (path49.charCodeAt(1) === 58) start19 = 2;
        }
    }
    if (ext !== undefined && ext.length > 0 && ext.length <= path49.length) {
        if (ext.length === path49.length && ext === path49) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i77 = path49.length - 1; i77 >= start19; --i77){
            const code = path49.charCodeAt(i77);
            if (isPathSeparator1(code)) {
                if (!matchedSlash) {
                    start19 = i77 + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i77 + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i77;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start19 === end) end = firstNonSlashEnd;
        else if (end === -1) end = path49.length;
        return path49.slice(start19, end);
    } else {
        for(i77 = path49.length - 1; i77 >= start19; --i77){
            if (isPathSeparator1(path49.charCodeAt(i77))) {
                if (!matchedSlash) {
                    start19 = i77 + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i77 + 1;
            }
        }
        if (end === -1) return "";
        return path49.slice(start19, end);
    }
}
function extname3(path50) {
    assertPath1(path50);
    let start20 = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path50.length >= 2 && path50.charCodeAt(1) === 58 && isWindowsDeviceRoot1(path50.charCodeAt(0))) {
        start20 = startPart = 2;
    }
    for(let i78 = path50.length - 1; i78 >= start20; --i78){
        const code = path50.charCodeAt(i78);
        if (isPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i78 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i78 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i78;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path50.slice(startDot, end);
}
function format3(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format1("\\", pathObject);
}
function parse3(path51) {
    assertPath1(path51);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path51.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path51.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            rootEnd = 1;
            if (isPathSeparator1(path51.charCodeAt(1))) {
                let j13 = 2;
                let last = j13;
                for(; j13 < len; ++j13){
                    if (isPathSeparator1(path51.charCodeAt(j13))) break;
                }
                if (j13 < len && j13 !== last) {
                    last = j13;
                    for(; j13 < len; ++j13){
                        if (!isPathSeparator1(path51.charCodeAt(j13))) break;
                    }
                    if (j13 < len && j13 !== last) {
                        last = j13;
                        for(; j13 < len; ++j13){
                            if (isPathSeparator1(path51.charCodeAt(j13))) break;
                        }
                        if (j13 === len) {
                            rootEnd = j13;
                        } else if (j13 !== last) {
                            rootEnd = j13 + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path51.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator1(path51.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path51;
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path51;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        ret.root = ret.dir = path51;
        return ret;
    }
    if (rootEnd > 0) ret.root = path51.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i79 = path51.length - 1;
    let preDotState = 0;
    for(; i79 >= rootEnd; --i79){
        code = path51.charCodeAt(i79);
        if (isPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i79 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i79 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i79;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path51.slice(startPart, end);
        }
    } else {
        ret.name = path51.slice(startPart, startDot);
        ret.base = path51.slice(startPart, end);
        ret.ext = path51.slice(startDot, end);
    }
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path51.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl3(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path52 = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path52 = `\\\\${url.hostname}${path52}`;
    }
    return path52;
}
function toFileUrl3(path53) {
    if (!isAbsolute3(path53)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path53.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace1(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod5 = {
    sep: sep3,
    delimiter: delimiter3,
    resolve: resolve3,
    normalize: normalize4,
    isAbsolute: isAbsolute3,
    join: join4,
    relative: relative3,
    toNamespacedPath: toNamespacedPath3,
    dirname: dirname3,
    basename: basename3,
    extname: extname3,
    format: format3,
    parse: parse3,
    fromFileUrl: fromFileUrl3,
    toFileUrl: toFileUrl3
};
const sep4 = "/";
const delimiter4 = ":";
function resolve4(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i80 = pathSegments.length - 1; i80 >= -1 && !resolvedAbsolute; i80--){
        let path54;
        if (i80 >= 0) path54 = pathSegments[i80];
        else {
            const { Deno  } = globalThis;
            if (typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path54 = Deno.cwd();
        }
        assertPath1(path54);
        if (path54.length === 0) {
            continue;
        }
        resolvedPath = `${path54}/${resolvedPath}`;
        resolvedAbsolute = path54.charCodeAt(0) === CHAR_FORWARD_SLASH1;
    }
    resolvedPath = normalizeString1(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator1);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize5(path55) {
    assertPath1(path55);
    if (path55.length === 0) return ".";
    const isAbsolute12 = path55.charCodeAt(0) === 47;
    const trailingSeparator = path55.charCodeAt(path55.length - 1) === 47;
    path55 = normalizeString1(path55, !isAbsolute12, "/", isPosixPathSeparator1);
    if (path55.length === 0 && !isAbsolute12) path55 = ".";
    if (path55.length > 0 && trailingSeparator) path55 += "/";
    if (isAbsolute12) return `/${path55}`;
    return path55;
}
function isAbsolute4(path56) {
    assertPath1(path56);
    return path56.length > 0 && path56.charCodeAt(0) === 47;
}
function join5(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i81 = 0, len = paths.length; i81 < len; ++i81){
        const path57 = paths[i81];
        assertPath1(path57);
        if (path57.length > 0) {
            if (!joined) joined = path57;
            else joined += `/${path57}`;
        }
    }
    if (!joined) return ".";
    return normalize5(joined);
}
function relative4(from4, to) {
    assertPath1(from4);
    assertPath1(to);
    if (from4 === to) return "";
    from4 = resolve4(from4);
    to = resolve4(to);
    if (from4 === to) return "";
    let fromStart = 1;
    const fromEnd = from4.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from4.charCodeAt(fromStart) !== 47) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 47) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i82 = 0;
    for(; i82 <= length; ++i82){
        if (i82 === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i82) === 47) {
                    return to.slice(toStart + i82 + 1);
                } else if (i82 === 0) {
                    return to.slice(toStart + i82);
                }
            } else if (fromLen > length) {
                if (from4.charCodeAt(fromStart + i82) === 47) {
                    lastCommonSep = i82;
                } else if (i82 === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from4.charCodeAt(fromStart + i82);
        const toCode = to.charCodeAt(toStart + i82);
        if (fromCode !== toCode) break;
        else if (fromCode === 47) lastCommonSep = i82;
    }
    let out = "";
    for(i82 = fromStart + lastCommonSep + 1; i82 <= fromEnd; ++i82){
        if (i82 === fromEnd || from4.charCodeAt(i82) === 47) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath4(path58) {
    return path58;
}
function dirname4(path59) {
    assertPath1(path59);
    if (path59.length === 0) return ".";
    const hasRoot = path59.charCodeAt(0) === 47;
    let end = -1;
    let matchedSlash = true;
    for(let i83 = path59.length - 1; i83 >= 1; --i83){
        if (path59.charCodeAt(i83) === 47) {
            if (!matchedSlash) {
                end = i83;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) return hasRoot ? "/" : ".";
    if (hasRoot && end === 1) return "//";
    return path59.slice(0, end);
}
function basename4(path60, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath1(path60);
    let start21 = 0;
    let end = -1;
    let matchedSlash = true;
    let i84;
    if (ext !== undefined && ext.length > 0 && ext.length <= path60.length) {
        if (ext.length === path60.length && ext === path60) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i84 = path60.length - 1; i84 >= 0; --i84){
            const code = path60.charCodeAt(i84);
            if (code === 47) {
                if (!matchedSlash) {
                    start21 = i84 + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i84 + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i84;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start21 === end) end = firstNonSlashEnd;
        else if (end === -1) end = path60.length;
        return path60.slice(start21, end);
    } else {
        for(i84 = path60.length - 1; i84 >= 0; --i84){
            if (path60.charCodeAt(i84) === 47) {
                if (!matchedSlash) {
                    start21 = i84 + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i84 + 1;
            }
        }
        if (end === -1) return "";
        return path60.slice(start21, end);
    }
}
function extname4(path61) {
    assertPath1(path61);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i85 = path61.length - 1; i85 >= 0; --i85){
        const code = path61.charCodeAt(i85);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i85 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i85 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i85;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path61.slice(startDot, end);
}
function format4(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format1("/", pathObject);
}
function parse4(path62) {
    assertPath1(path62);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path62.length === 0) return ret;
    const isAbsolute22 = path62.charCodeAt(0) === 47;
    let start22;
    if (isAbsolute22) {
        ret.root = "/";
        start22 = 1;
    } else {
        start22 = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i86 = path62.length - 1;
    let preDotState = 0;
    for(; i86 >= start22; --i86){
        const code = path62.charCodeAt(i86);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i86 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i86 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i86;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute22) {
                ret.base = ret.name = path62.slice(1, end);
            } else {
                ret.base = ret.name = path62.slice(startPart, end);
            }
        }
    } else {
        if (startPart === 0 && isAbsolute22) {
            ret.name = path62.slice(1, startDot);
            ret.base = path62.slice(1, end);
        } else {
            ret.name = path62.slice(startPart, startDot);
            ret.base = path62.slice(startPart, end);
        }
        ret.ext = path62.slice(startDot, end);
    }
    if (startPart > 0) ret.dir = path62.slice(0, startPart - 1);
    else if (isAbsolute22) ret.dir = "/";
    return ret;
}
function fromFileUrl4(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl4(path63) {
    if (!isAbsolute4(path63)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace1(path63.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod6 = {
    sep: sep4,
    delimiter: delimiter4,
    resolve: resolve4,
    normalize: normalize5,
    isAbsolute: isAbsolute4,
    join: join5,
    relative: relative4,
    toNamespacedPath: toNamespacedPath4,
    dirname: dirname4,
    basename: basename4,
    extname: extname4,
    format: format4,
    parse: parse4,
    fromFileUrl: fromFileUrl4,
    toFileUrl: toFileUrl4
};
const path2 = isWindows1 ? mod5 : mod6;
const { join: join6 , normalize: normalize6  } = path2;
const path3 = isWindows1 ? mod5 : mod6;
const { basename: basename5 , delimiter: delimiter5 , dirname: dirname5 , extname: extname5 , format: format5 , fromFileUrl: fromFileUrl5 , isAbsolute: isAbsolute5 , join: join7 , normalize: normalize7 , parse: parse5 , relative: relative5 , resolve: resolve5 , sep: sep5 , toFileUrl: toFileUrl5 , toNamespacedPath: toNamespacedPath5 ,  } = path3;
const extensions = new Map();
const types = new Map();
function populateMaps(extensions1, types1) {
    const preference = [
        "nginx",
        "apache",
        undefined,
        "iana"
    ];
    for (const type of Object.keys(db)){
        const mime = db[type];
        const exts = mime.extensions;
        if (!exts || !exts.length) {
            continue;
        }
        extensions1.set(type, exts);
        for (const ext of exts){
            const current = types1.get(ext);
            if (current) {
                const from5 = preference.indexOf(db[current].source);
                const to = preference.indexOf(mime.source);
                if (current !== "application/octet-stream" && (from5 > to || from5 === to && current.substr(0, 12) === "application/")) {
                    continue;
                }
            }
            types1.set(ext, type);
        }
    }
}
populateMaps(extensions, types);
function lookup1(path64) {
    const extension1 = extname5("x." + path64).toLowerCase().substr(1);
    return types.get(extension1);
}
const osType2 = (()=>{
    if (globalThis.Deno != null) {
        return Deno.build.os;
    }
    const navigator = globalThis.navigator;
    if (navigator?.appVersion?.includes?.("Win") ?? false) {
        return "windows";
    }
    return "linux";
})();
const isWindows2 = osType2 === "windows";
const CHAR_FORWARD_SLASH2 = 47;
function assertPath2(path65) {
    if (typeof path65 !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path65)}`);
    }
}
function isPosixPathSeparator2(code) {
    return code === 47;
}
function isPathSeparator2(code) {
    return isPosixPathSeparator2(code) || code === 92;
}
function isWindowsDeviceRoot2(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString2(path66, allowAboveRoot, separator, isPathSeparator12) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i87 = 0, len = path66.length; i87 <= len; ++i87){
        if (i87 < len) code = path66.charCodeAt(i87);
        else if (isPathSeparator12(code)) break;
        else code = CHAR_FORWARD_SLASH2;
        if (isPathSeparator12(code)) {
            if (lastSlash === i87 - 1 || dots === 1) {} else if (lastSlash !== i87 - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i87;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i87;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path66.slice(lastSlash + 1, i87);
                else res = path66.slice(lastSlash + 1, i87);
                lastSegmentLength = i87 - lastSlash - 1;
            }
            lastSlash = i87;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format2(sep11, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep11 + base;
}
const WHITESPACE_ENCODINGS2 = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace2(string) {
    return string.replaceAll(/[\s]/g, (c9)=>{
        return WHITESPACE_ENCODINGS2[c9] ?? c9;
    });
}
class DenoStdInternalError2 extends Error {
    constructor(message){
        super(message);
        this.name = "DenoStdInternalError";
    }
}
function assert2(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError2(msg);
    }
}
const sep6 = "\\";
const delimiter6 = ";";
function resolve6(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i88 = pathSegments.length - 1; i88 >= -1; i88--){
        let path67;
        if (i88 >= 0) {
            path67 = pathSegments[i88];
        } else if (!resolvedDevice) {
            if (globalThis.Deno == null) {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path67 = Deno.cwd();
        } else {
            if (globalThis.Deno == null) {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path67 = Deno.env.get(`=${resolvedDevice}`) || Deno.cwd();
            if (path67 === undefined || path67.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path67 = `${resolvedDevice}\\`;
            }
        }
        assertPath2(path67);
        const len = path67.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute13 = false;
        const code = path67.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator2(code)) {
                isAbsolute13 = true;
                if (isPathSeparator2(path67.charCodeAt(1))) {
                    let j14 = 2;
                    let last = j14;
                    for(; j14 < len; ++j14){
                        if (isPathSeparator2(path67.charCodeAt(j14))) break;
                    }
                    if (j14 < len && j14 !== last) {
                        const firstPart = path67.slice(last, j14);
                        last = j14;
                        for(; j14 < len; ++j14){
                            if (!isPathSeparator2(path67.charCodeAt(j14))) break;
                        }
                        if (j14 < len && j14 !== last) {
                            last = j14;
                            for(; j14 < len; ++j14){
                                if (isPathSeparator2(path67.charCodeAt(j14))) break;
                            }
                            if (j14 === len) {
                                device = `\\\\${firstPart}\\${path67.slice(last)}`;
                                rootEnd = j14;
                            } else if (j14 !== last) {
                                device = `\\\\${firstPart}\\${path67.slice(last, j14)}`;
                                rootEnd = j14;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot2(code)) {
                if (path67.charCodeAt(1) === 58) {
                    device = path67.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator2(path67.charCodeAt(2))) {
                            isAbsolute13 = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator2(code)) {
            rootEnd = 1;
            isAbsolute13 = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path67.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute13;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString2(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator2);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize8(path68) {
    assertPath2(path68);
    const len = path68.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute23 = false;
    const code = path68.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator2(code)) {
            isAbsolute23 = true;
            if (isPathSeparator2(path68.charCodeAt(1))) {
                let j15 = 2;
                let last = j15;
                for(; j15 < len; ++j15){
                    if (isPathSeparator2(path68.charCodeAt(j15))) break;
                }
                if (j15 < len && j15 !== last) {
                    const firstPart = path68.slice(last, j15);
                    last = j15;
                    for(; j15 < len; ++j15){
                        if (!isPathSeparator2(path68.charCodeAt(j15))) break;
                    }
                    if (j15 < len && j15 !== last) {
                        last = j15;
                        for(; j15 < len; ++j15){
                            if (isPathSeparator2(path68.charCodeAt(j15))) break;
                        }
                        if (j15 === len) {
                            return `\\\\${firstPart}\\${path68.slice(last)}\\`;
                        } else if (j15 !== last) {
                            device = `\\\\${firstPart}\\${path68.slice(last, j15)}`;
                            rootEnd = j15;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot2(code)) {
            if (path68.charCodeAt(1) === 58) {
                device = path68.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator2(path68.charCodeAt(2))) {
                        isAbsolute23 = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator2(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString2(path68.slice(rootEnd), !isAbsolute23, "\\", isPathSeparator2);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute23) tail = ".";
    if (tail.length > 0 && isPathSeparator2(path68.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute23) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute23) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute6(path69) {
    assertPath2(path69);
    const len = path69.length;
    if (len === 0) return false;
    const code = path69.charCodeAt(0);
    if (isPathSeparator2(code)) {
        return true;
    } else if (isWindowsDeviceRoot2(code)) {
        if (len > 2 && path69.charCodeAt(1) === 58) {
            if (isPathSeparator2(path69.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join8(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i89 = 0; i89 < pathsCount; ++i89){
        const path70 = paths[i89];
        assertPath2(path70);
        if (path70.length > 0) {
            if (joined === undefined) joined = firstPart = path70;
            else joined += `\\${path70}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert2(firstPart != null);
    if (isPathSeparator2(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator2(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator2(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator2(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize8(joined);
}
function relative6(from6, to) {
    assertPath2(from6);
    assertPath2(to);
    if (from6 === to) return "";
    const fromOrig = resolve6(from6);
    const toOrig = resolve6(to);
    if (fromOrig === toOrig) return "";
    from6 = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from6 === to) return "";
    let fromStart = 0;
    let fromEnd = from6.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from6.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from6.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i90 = 0;
    for(; i90 <= length; ++i90){
        if (i90 === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i90) === 92) {
                    return toOrig.slice(toStart + i90 + 1);
                } else if (i90 === 2) {
                    return toOrig.slice(toStart + i90);
                }
            }
            if (fromLen > length) {
                if (from6.charCodeAt(fromStart + i90) === 92) {
                    lastCommonSep = i90;
                } else if (i90 === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from6.charCodeAt(fromStart + i90);
        const toCode = to.charCodeAt(toStart + i90);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i90;
    }
    if (i90 !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i90 = fromStart + lastCommonSep + 1; i90 <= fromEnd; ++i90){
        if (i90 === fromEnd || from6.charCodeAt(i90) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath6(path71) {
    if (typeof path71 !== "string") return path71;
    if (path71.length === 0) return "";
    const resolvedPath = resolve6(path71);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot2(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path71;
}
function dirname6(path72) {
    assertPath2(path72);
    const len = path72.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path72.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator2(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator2(path72.charCodeAt(1))) {
                let j16 = 2;
                let last = j16;
                for(; j16 < len; ++j16){
                    if (isPathSeparator2(path72.charCodeAt(j16))) break;
                }
                if (j16 < len && j16 !== last) {
                    last = j16;
                    for(; j16 < len; ++j16){
                        if (!isPathSeparator2(path72.charCodeAt(j16))) break;
                    }
                    if (j16 < len && j16 !== last) {
                        last = j16;
                        for(; j16 < len; ++j16){
                            if (isPathSeparator2(path72.charCodeAt(j16))) break;
                        }
                        if (j16 === len) {
                            return path72;
                        }
                        if (j16 !== last) {
                            rootEnd = offset = j16 + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot2(code)) {
            if (path72.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator2(path72.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator2(code)) {
        return path72;
    }
    for(let i91 = len - 1; i91 >= offset; --i91){
        if (isPathSeparator2(path72.charCodeAt(i91))) {
            if (!matchedSlash) {
                end = i91;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return path72.slice(0, end);
}
function basename6(path73, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath2(path73);
    let start23 = 0;
    let end = -1;
    let matchedSlash = true;
    let i92;
    if (path73.length >= 2) {
        const drive = path73.charCodeAt(0);
        if (isWindowsDeviceRoot2(drive)) {
            if (path73.charCodeAt(1) === 58) start23 = 2;
        }
    }
    if (ext !== undefined && ext.length > 0 && ext.length <= path73.length) {
        if (ext.length === path73.length && ext === path73) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i92 = path73.length - 1; i92 >= start23; --i92){
            const code = path73.charCodeAt(i92);
            if (isPathSeparator2(code)) {
                if (!matchedSlash) {
                    start23 = i92 + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i92 + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i92;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start23 === end) end = firstNonSlashEnd;
        else if (end === -1) end = path73.length;
        return path73.slice(start23, end);
    } else {
        for(i92 = path73.length - 1; i92 >= start23; --i92){
            if (isPathSeparator2(path73.charCodeAt(i92))) {
                if (!matchedSlash) {
                    start23 = i92 + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i92 + 1;
            }
        }
        if (end === -1) return "";
        return path73.slice(start23, end);
    }
}
function extname6(path74) {
    assertPath2(path74);
    let start24 = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path74.length >= 2 && path74.charCodeAt(1) === 58 && isWindowsDeviceRoot2(path74.charCodeAt(0))) {
        start24 = startPart = 2;
    }
    for(let i93 = path74.length - 1; i93 >= start24; --i93){
        const code = path74.charCodeAt(i93);
        if (isPathSeparator2(code)) {
            if (!matchedSlash) {
                startPart = i93 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i93 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i93;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path74.slice(startDot, end);
}
function format6(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format2("\\", pathObject);
}
function parse6(path75) {
    assertPath2(path75);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path75.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path75.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator2(code)) {
            rootEnd = 1;
            if (isPathSeparator2(path75.charCodeAt(1))) {
                let j17 = 2;
                let last = j17;
                for(; j17 < len; ++j17){
                    if (isPathSeparator2(path75.charCodeAt(j17))) break;
                }
                if (j17 < len && j17 !== last) {
                    last = j17;
                    for(; j17 < len; ++j17){
                        if (!isPathSeparator2(path75.charCodeAt(j17))) break;
                    }
                    if (j17 < len && j17 !== last) {
                        last = j17;
                        for(; j17 < len; ++j17){
                            if (isPathSeparator2(path75.charCodeAt(j17))) break;
                        }
                        if (j17 === len) {
                            rootEnd = j17;
                        } else if (j17 !== last) {
                            rootEnd = j17 + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot2(code)) {
            if (path75.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator2(path75.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path75;
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path75;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator2(code)) {
        ret.root = ret.dir = path75;
        return ret;
    }
    if (rootEnd > 0) ret.root = path75.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i94 = path75.length - 1;
    let preDotState = 0;
    for(; i94 >= rootEnd; --i94){
        code = path75.charCodeAt(i94);
        if (isPathSeparator2(code)) {
            if (!matchedSlash) {
                startPart = i94 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i94 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i94;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path75.slice(startPart, end);
        }
    } else {
        ret.name = path75.slice(startPart, startDot);
        ret.base = path75.slice(startPart, end);
        ret.ext = path75.slice(startDot, end);
    }
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path75.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl6(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path76 = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path76 = `\\\\${url.hostname}${path76}`;
    }
    return path76;
}
function toFileUrl6(path77) {
    if (!isAbsolute6(path77)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path77.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace2(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod7 = {
    sep: sep6,
    delimiter: delimiter6,
    resolve: resolve6,
    normalize: normalize8,
    isAbsolute: isAbsolute6,
    join: join8,
    relative: relative6,
    toNamespacedPath: toNamespacedPath6,
    dirname: dirname6,
    basename: basename6,
    extname: extname6,
    format: format6,
    parse: parse6,
    fromFileUrl: fromFileUrl6,
    toFileUrl: toFileUrl6
};
const sep7 = "/";
const delimiter7 = ":";
function resolve7(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i95 = pathSegments.length - 1; i95 >= -1 && !resolvedAbsolute; i95--){
        let path78;
        if (i95 >= 0) path78 = pathSegments[i95];
        else {
            if (globalThis.Deno == null) {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path78 = Deno.cwd();
        }
        assertPath2(path78);
        if (path78.length === 0) {
            continue;
        }
        resolvedPath = `${path78}/${resolvedPath}`;
        resolvedAbsolute = path78.charCodeAt(0) === CHAR_FORWARD_SLASH2;
    }
    resolvedPath = normalizeString2(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator2);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize9(path79) {
    assertPath2(path79);
    if (path79.length === 0) return ".";
    const isAbsolute14 = path79.charCodeAt(0) === 47;
    const trailingSeparator = path79.charCodeAt(path79.length - 1) === 47;
    path79 = normalizeString2(path79, !isAbsolute14, "/", isPosixPathSeparator2);
    if (path79.length === 0 && !isAbsolute14) path79 = ".";
    if (path79.length > 0 && trailingSeparator) path79 += "/";
    if (isAbsolute14) return `/${path79}`;
    return path79;
}
function isAbsolute7(path80) {
    assertPath2(path80);
    return path80.length > 0 && path80.charCodeAt(0) === 47;
}
function join9(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i96 = 0, len = paths.length; i96 < len; ++i96){
        const path81 = paths[i96];
        assertPath2(path81);
        if (path81.length > 0) {
            if (!joined) joined = path81;
            else joined += `/${path81}`;
        }
    }
    if (!joined) return ".";
    return normalize9(joined);
}
function relative7(from7, to) {
    assertPath2(from7);
    assertPath2(to);
    if (from7 === to) return "";
    from7 = resolve7(from7);
    to = resolve7(to);
    if (from7 === to) return "";
    let fromStart = 1;
    const fromEnd = from7.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from7.charCodeAt(fromStart) !== 47) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 47) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i97 = 0;
    for(; i97 <= length; ++i97){
        if (i97 === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i97) === 47) {
                    return to.slice(toStart + i97 + 1);
                } else if (i97 === 0) {
                    return to.slice(toStart + i97);
                }
            } else if (fromLen > length) {
                if (from7.charCodeAt(fromStart + i97) === 47) {
                    lastCommonSep = i97;
                } else if (i97 === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from7.charCodeAt(fromStart + i97);
        const toCode = to.charCodeAt(toStart + i97);
        if (fromCode !== toCode) break;
        else if (fromCode === 47) lastCommonSep = i97;
    }
    let out = "";
    for(i97 = fromStart + lastCommonSep + 1; i97 <= fromEnd; ++i97){
        if (i97 === fromEnd || from7.charCodeAt(i97) === 47) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath7(path82) {
    return path82;
}
function dirname7(path83) {
    assertPath2(path83);
    if (path83.length === 0) return ".";
    const hasRoot = path83.charCodeAt(0) === 47;
    let end = -1;
    let matchedSlash = true;
    for(let i98 = path83.length - 1; i98 >= 1; --i98){
        if (path83.charCodeAt(i98) === 47) {
            if (!matchedSlash) {
                end = i98;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) return hasRoot ? "/" : ".";
    if (hasRoot && end === 1) return "//";
    return path83.slice(0, end);
}
function basename7(path84, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath2(path84);
    let start25 = 0;
    let end = -1;
    let matchedSlash = true;
    let i99;
    if (ext !== undefined && ext.length > 0 && ext.length <= path84.length) {
        if (ext.length === path84.length && ext === path84) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i99 = path84.length - 1; i99 >= 0; --i99){
            const code = path84.charCodeAt(i99);
            if (code === 47) {
                if (!matchedSlash) {
                    start25 = i99 + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i99 + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i99;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start25 === end) end = firstNonSlashEnd;
        else if (end === -1) end = path84.length;
        return path84.slice(start25, end);
    } else {
        for(i99 = path84.length - 1; i99 >= 0; --i99){
            if (path84.charCodeAt(i99) === 47) {
                if (!matchedSlash) {
                    start25 = i99 + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i99 + 1;
            }
        }
        if (end === -1) return "";
        return path84.slice(start25, end);
    }
}
function extname7(path85) {
    assertPath2(path85);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i100 = path85.length - 1; i100 >= 0; --i100){
        const code = path85.charCodeAt(i100);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i100 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i100 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i100;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path85.slice(startDot, end);
}
function format7(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format2("/", pathObject);
}
function parse7(path86) {
    assertPath2(path86);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path86.length === 0) return ret;
    const isAbsolute24 = path86.charCodeAt(0) === 47;
    let start26;
    if (isAbsolute24) {
        ret.root = "/";
        start26 = 1;
    } else {
        start26 = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i101 = path86.length - 1;
    let preDotState = 0;
    for(; i101 >= start26; --i101){
        const code = path86.charCodeAt(i101);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i101 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i101 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i101;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute24) {
                ret.base = ret.name = path86.slice(1, end);
            } else {
                ret.base = ret.name = path86.slice(startPart, end);
            }
        }
    } else {
        if (startPart === 0 && isAbsolute24) {
            ret.name = path86.slice(1, startDot);
            ret.base = path86.slice(1, end);
        } else {
            ret.name = path86.slice(startPart, startDot);
            ret.base = path86.slice(startPart, end);
        }
        ret.ext = path86.slice(startDot, end);
    }
    if (startPart > 0) ret.dir = path86.slice(0, startPart - 1);
    else if (isAbsolute24) ret.dir = "/";
    return ret;
}
function fromFileUrl7(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl7(path87) {
    if (!isAbsolute7(path87)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace2(path87.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod8 = {
    sep: sep7,
    delimiter: delimiter7,
    resolve: resolve7,
    normalize: normalize9,
    isAbsolute: isAbsolute7,
    join: join9,
    relative: relative7,
    toNamespacedPath: toNamespacedPath7,
    dirname: dirname7,
    basename: basename7,
    extname: extname7,
    format: format7,
    parse: parse7,
    fromFileUrl: fromFileUrl7,
    toFileUrl: toFileUrl7
};
const path4 = isWindows2 ? mod7 : mod8;
const { join: join10 , normalize: normalize10  } = path4;
const path5 = isWindows2 ? mod7 : mod8;
const { basename: basename8 , delimiter: delimiter8 , dirname: dirname8 , extname: extname8 , format: format8 , fromFileUrl: fromFileUrl8 , isAbsolute: isAbsolute8 , join: join11 , normalize: normalize11 , parse: parse8 , relative: relative8 , resolve: resolve8 , sep: sep8 , toFileUrl: toFileUrl8 , toNamespacedPath: toNamespacedPath8 ,  } = path5;
function isObject(object) {
    return typeof object == "object" && object !== null && object.constructor === Object;
}
function sortObject(normalized) {
    const sorted = {};
    const sortedKeys = Object.keys(normalized).sort((a8, b10)=>b10.length - a8.length
    );
    for (const key of sortedKeys){
        sorted[key] = normalized[key];
    }
    return sorted;
}
function isImportMap(importMap) {
    return isObject(importMap) && (importMap.imports !== undefined ? isImports(importMap.imports) : true) && (importMap.scopes !== undefined ? isScopes(importMap.scopes) : true);
}
function isImports(importsMap) {
    return isObject(importsMap);
}
function isScopes(scopes) {
    return isObject(scopes) && Object.values(scopes).every((value)=>isSpecifierMap(value)
    );
}
function isSpecifierMap(specifierMap) {
    return isObject(specifierMap);
}
function isURL(url) {
    try {
        new URL(url);
        return true;
    } catch  {
        return false;
    }
}
function sortAndNormalizeSpecifierMap(originalMap, baseURL) {
    const normalized = {};
    for (const [specifierKey, value] of Object.entries(originalMap)){
        const normalizedSpecifierKey = normalizeSpecifierKey(specifierKey, baseURL);
        if (normalizedSpecifierKey === null) continue;
        if (typeof value !== "string") {
            console.warn(`addresses need to be strings.`);
            normalized[normalizedSpecifierKey] = null;
            continue;
        }
        const addressURL = parseUrlLikeImportSpecifier(value, baseURL);
        if (addressURL === null) {
            console.warn(`the address was invalid.`);
            normalized[normalizedSpecifierKey] = null;
            continue;
        }
        if (specifierKey.endsWith("/") && !serializeURL(addressURL).endsWith("/")) {
            console.warn(`an invalid address was given for the specifier key specifierKey; since specifierKey ended in a slash, the address needs to as well.`);
            normalized[normalizedSpecifierKey] = null;
            continue;
        }
        normalized[normalizedSpecifierKey] = serializeURL(addressURL);
    }
    return sortObject(normalized);
}
function serializeURL(url) {
    return url.href;
}
function sortAndNormalizeScopes(originalMap, baseURL) {
    const normalized = {};
    for (const [scopePrefix, potentialSpecifierMap] of Object.entries(originalMap)){
        if (!isSpecifierMap(potentialSpecifierMap)) {
            throw new TypeError(`the value of the scope with prefix scopePrefix needs to be an object.`);
        }
        let scopePrefixURL;
        try {
            scopePrefixURL = new URL(scopePrefix, baseURL);
        } catch  {
            console.warn(`the scope prefix URL was not parseable.`);
            continue;
        }
        const normalizedScopePrefix = serializeURL(scopePrefixURL);
        normalized[normalizedScopePrefix] = sortAndNormalizeSpecifierMap(potentialSpecifierMap, baseURL);
    }
    const sorted = {};
    for (const key of Object.keys(normalized)){
        sorted[key] = sortObject(normalized[key]);
    }
    return sortObject(sorted);
}
function normalizeSpecifierKey(specifierKey, baseURL) {
    if (!specifierKey.length) {
        console.warn("specifier key cannot be an empty string.");
        return null;
    }
    const url = parseUrlLikeImportSpecifier(specifierKey, baseURL);
    if (url !== null) {
        return serializeURL(url);
    }
    return specifierKey;
}
function parseUrlLikeImportSpecifier(specifier, baseURL) {
    if (baseURL && (specifier.startsWith("/") || specifier.startsWith("./") || specifier.startsWith("../"))) {
        try {
            const url = new URL(specifier, baseURL);
            return url;
        } catch  {
            return null;
        }
    }
    try {
        const url = new URL(specifier);
        return url;
    } catch  {
        return null;
    }
}
const specialSchemes = [
    "ftp",
    "file",
    "http",
    "https",
    "ws",
    "wss", 
];
function isSpecial(asURL) {
    return specialSchemes.some((scheme)=>serializeURL(asURL).startsWith(scheme)
    );
}
function resolveImportsMatch(normalizedSpecifier, asURL, specifierMap) {
    for (const [specifierKey, resolutionResult] of Object.entries(specifierMap)){
        if (specifierKey === normalizedSpecifier) {
            if (resolutionResult === null) {
                throw new TypeError(`resolution of specifierKey was blocked by a null entry.`);
            }
            if (!isURL(resolutionResult)) {
                throw new TypeError(`resolutionResult must be an URL.`);
            }
            return resolutionResult;
        } else if (specifierKey.endsWith("/") && normalizedSpecifier.startsWith(specifierKey) && (asURL === null || isSpecial(asURL))) {
            if (resolutionResult === null) {
                throw new TypeError(`resolution of specifierKey was blocked by a null entry.`);
            }
            if (!isURL(resolutionResult)) {
                throw new TypeError(`resolutionResult must be an URL.`);
            }
            const afterPrefix = normalizedSpecifier.slice(specifierKey.length);
            if (!resolutionResult.endsWith("/")) {
                throw new TypeError(`resolutionResult does not end with "/"`);
            }
            try {
                const url = new URL(afterPrefix, resolutionResult);
                if (!isURL(url)) {
                    throw new TypeError(`url must be an URL.`);
                }
                if (!serializeURL(url).startsWith(resolutionResult)) {
                    throw new TypeError(`resolution of normalizedSpecifier was blocked due to it backtracking above its prefix specifierKey.`);
                }
                return serializeURL(url);
            } catch  {
                throw new TypeError(`resolution of normalizedSpecifier was blocked since the afterPrefix portion could not be URL-parsed relative to the resolutionResult mapped to by the specifierKey prefix.`);
            }
        }
    }
    return null;
}
function resolveImportMap(importMap, baseURL) {
    let sortedAndNormalizedImports = {};
    if (!isImportMap(importMap)) {
        throw new TypeError(`the top-level value needs to be a JSON object.`);
    }
    const { imports , scopes  } = importMap;
    if (imports !== undefined) {
        if (!isImports(imports)) {
            throw new TypeError(`"imports" top-level key needs to be an object.`);
        }
        sortedAndNormalizedImports = sortAndNormalizeSpecifierMap(imports, baseURL);
    }
    let sortedAndNormalizedScopes = {};
    if (scopes !== undefined) {
        if (!isScopes(scopes)) {
            throw new TypeError(`"scopes" top-level key needs to be an object.`);
        }
        sortedAndNormalizedScopes = sortAndNormalizeScopes(scopes, baseURL);
    }
    if (Object.keys(importMap).find((key)=>key !== "imports" && key !== "scopes"
    )) {
        console.warn(`an invalid top-level key was present in the import map.`);
    }
    return {
        imports: sortedAndNormalizedImports,
        scopes: sortedAndNormalizedScopes
    };
}
function resolveModuleSpecifier(specifier, { imports ={} , scopes ={}  }, baseURL) {
    const baseURLString = serializeURL(baseURL);
    const asURL = parseUrlLikeImportSpecifier(specifier, baseURL);
    const normalizedSpecifier = asURL !== null ? serializeURL(asURL) : specifier;
    for (const [scopePrefix, scopeImports] of Object.entries(scopes)){
        if (scopePrefix === baseURLString || scopePrefix.endsWith("/") && baseURLString.startsWith(scopePrefix)) {
            const scopeImportsMatch = resolveImportsMatch(normalizedSpecifier, asURL, scopeImports);
            if (scopeImportsMatch !== null) {
                return scopeImportsMatch;
            }
        }
    }
    const topLevelImportsMatch = resolveImportsMatch(normalizedSpecifier, asURL, imports);
    if (topLevelImportsMatch !== null) {
        return topLevelImportsMatch;
    }
    if (asURL !== null) {
        return serializeURL(asURL);
    }
    throw new TypeError(`specifier was a bare specifier, but was not remapped to anything by importMap.`);
}
async function info(specifier, options) {
    const cmd = [
        Deno.execPath(),
        "info",
        "--json",
        "--unstable", 
    ];
    if (options.importMap !== undefined) {
        cmd.push("--import-map", options.importMap);
    }
    cmd.push(specifier.href);
    let proc;
    try {
        proc = Deno.run({
            cmd,
            stdout: "piped"
        });
        const raw = await proc.output();
        const status = await proc.status();
        if (!status.success) {
            throw new Error(`Failed to call 'deno info' on '${specifier.href}'`);
        }
        const txt = new TextDecoder().decode(raw);
        return JSON.parse(txt);
    } finally{
        try {
            proc?.stdout.close();
        } catch (err) {
            if (err instanceof Deno.errors.BadResource) {} else {
                throw err;
            }
        }
        proc?.close();
    }
}
async function load1(infoCache, url, options) {
    switch(url.protocol){
        case "http:":
        case "https:":
        case "data:":
            return await loadFromCLI(infoCache, url, options);
        case "file:":
            {
                const res = await loadFromCLI(infoCache, url, options);
                res.watchFiles = [
                    fromFileUrl8(url.href)
                ];
                return res;
            }
    }
    return null;
}
async function loadFromCLI(infoCache, specifier, options) {
    const specifierRaw = specifier.href;
    if (!infoCache.has(specifierRaw)) {
        const { modules  } = await info(specifier, {
            importMap: options.importMapFile
        });
        for (const module of modules){
            infoCache.set(module.specifier, module);
        }
    }
    const module = infoCache.get(specifierRaw);
    if (!module) {
        throw new TypeError("Unreachable.");
    }
    if (module.error) throw new Error(module.error);
    if (!module.local) throw new Error("Module not downloaded yet.");
    let loader;
    switch(module.mediaType){
        case "JavaScript":
            loader = "js";
            break;
        case "JSX":
            loader = "jsx";
            break;
        case "TypeScript":
            loader = "ts";
            break;
        case "TSX":
            loader = "tsx";
            break;
        default:
            throw new Error(`Unhandled media type ${module.mediaType}.`);
    }
    const contents = await Deno.readFile(module.local);
    return {
        contents,
        loader
    };
}
async function load2(url, _options) {
    switch(url.protocol){
        case "http:":
        case "https:":
        case "data:":
            return await loadWithFetch(url);
        case "file:":
            {
                const res = await loadWithReadFile(url);
                res.watchFiles = [
                    fromFileUrl8(url.href)
                ];
                return res;
            }
    }
    return null;
}
async function loadWithFetch(specifier) {
    const specifierRaw = specifier.href;
    const resp = await fetch(specifierRaw);
    if (!resp.ok) {
        throw new Error(`Encountered status code ${resp.status} while fetching ${specifierRaw}.`);
    }
    const contentType = resp.headers.get("content-type");
    const loader = mapContentTypeToLoader(new URL(resp.url || specifierRaw), contentType);
    const contents = new Uint8Array(await resp.arrayBuffer());
    return {
        contents,
        loader
    };
}
async function loadWithReadFile(specifier) {
    const path88 = fromFileUrl8(specifier);
    const loader = mapContentTypeToLoader(specifier, null);
    const contents = await Deno.readFile(path88);
    return {
        contents,
        loader
    };
}
function mapContentTypeToLoader(specifier, contentType) {
    const mediaType = mapContentType(specifier, contentType);
    switch(mediaType){
        case "JavaScript":
            return "js";
        case "JSX":
            return "jsx";
        case "TypeScript":
            return "ts";
        case "TSX":
            return "tsx";
        default:
            throw new Error(`Unhandled media type ${mediaType}. Content type is ${contentType}.`);
    }
}
function mapContentType(specifier, contentType) {
    if (contentType !== null) {
        const contentTypes = contentType.split(";");
        const mediaType = contentTypes[0].toLowerCase();
        switch(mediaType){
            case "application/typescript":
            case "text/typescript":
            case "video/vnd.dlna.mpeg-tts":
            case "video/mp2t":
            case "application/x-typescript":
                return mapJsLikeExtension(specifier, "TypeScript");
            case "application/javascript":
            case "text/javascript":
            case "application/ecmascript":
            case "text/ecmascript":
            case "application/x-javascript":
            case "application/node":
                return mapJsLikeExtension(specifier, "JavaScript");
            case "text/jsx":
                return "JSX";
            case "text/tsx":
                return "TSX";
            case "application/json":
            case "text/json":
                return "Json";
            case "application/wasm":
                return "Wasm";
            case "text/plain":
            case "application/octet-stream":
                return mediaTypeFromSpecifier(specifier);
            default:
                return "Unknown";
        }
    } else {
        return mediaTypeFromSpecifier(specifier);
    }
}
function mapJsLikeExtension(specifier, defaultType) {
    const path89 = specifier.pathname;
    switch(extname7(path89)){
        case ".jsx":
            return "JSX";
        case ".tsx":
            return "TSX";
        case ".ts":
            if (path89.endsWith(".d.ts")) {
                return "Dts";
            } else {
                return defaultType;
            }
        default:
            return defaultType;
    }
}
function mediaTypeFromSpecifier(specifier) {
    const path90 = specifier.pathname;
    switch(extname7(path90)){
        case "":
            if (path90.endsWith("/.tsbuildinfo")) {
                return "TsBuildInfo";
            } else {
                return "Unknown";
            }
        case ".ts":
            if (path90.endsWith(".d.ts")) {
                return "Dts";
            } else {
                return "TypeScript";
            }
        case ".tsx":
            return "TSX";
        case ".js":
        case ".mjs":
        case ".cjs":
            return "JavaScript";
        case ".jsx":
            return "JSX";
        case ".json":
            return "Json";
        case ".wasm":
            return "Wasm";
        case ".tsbuildinfo":
            return "TsBuildInfo";
        case ".map":
            return "SourceMap";
        default:
            return "Unknown";
    }
}
const DEFAULT_LOADER = typeof Deno.run === "function" ? "native" : "portable";
function denoPlugin(options = {}) {
    const loader = options.loader ?? DEFAULT_LOADER;
    return {
        name: "deno",
        setup (build2) {
            const infoCache = new Map();
            let importMap = null;
            build2.onStart(async function onStart() {
                if (options.importMapFile !== undefined) {
                    const url = toFileUrl8(resolve8(options.importMapFile));
                    const txt = await Deno.readTextFile(url);
                    importMap = resolveImportMap(JSON.parse(txt), url);
                } else {
                    importMap = null;
                }
            });
            build2.onResolve({
                filter: /.*/
            }, function onResolve(args) {
                const resolveDir = args.resolveDir ? `${toFileUrl8(args.resolveDir).href}/` : "";
                const referrer = args.importer || resolveDir;
                let resolved;
                if (importMap !== null) {
                    const res = resolveModuleSpecifier(args.path, importMap, new URL(referrer) || undefined);
                    resolved = new URL(res);
                } else {
                    resolved = new URL(args.path, referrer);
                }
                return {
                    path: resolved.href,
                    namespace: "deno"
                };
            });
            build2.onLoad({
                filter: /.*/
            }, function onLoad(args) {
                const url = new URL(args.path);
                switch(loader){
                    case "native":
                        return load1(infoCache, url, options);
                    case "portable":
                        return load2(url, options);
                }
            });
        }
    };
}
const esbuild = Deno.run === undefined ? mod : mod1;
const importMeta1 = {
    url: "https://raw.githubusercontent.com/lucacasonato/fresh/main/src/server/bundle.ts",
    main: false
};
let esbuildInitalized = false;
async function ensureEsbuildInialized() {
    if (esbuildInitalized === false) {
        if (Deno.run === undefined) {
            esbuildInitalized = esbuild.initialize({
                wasmURL: "https://unpkg.com/esbuild-wasm@0.11.19/esbuild.wasm",
                worker: false
            });
        } else {
            esbuild.initialize({});
        }
        await esbuildInitalized;
        esbuildInitalized = true;
    } else if (esbuildInitalized instanceof Promise) {
        await esbuildInitalized;
    }
}
class Bundler {
    #pages;
    #cache = undefined;
    #preloads = new Map();
    constructor(pages){
        this.#pages = pages;
    }
    async bundle() {
        const entryPoints = {};
        for (const page of this.#pages){
            if (page.component !== undefined && page.runtimeJS) {
                entryPoints[page.name] = `fresh:///${page.name}`;
            }
        }
        const absWorkingDir = Deno.cwd();
        await ensureEsbuildInialized();
        const bundle = await esbuild.build({
            bundle: true,
            entryPoints,
            format: "esm",
            metafile: true,
            minify: true,
            outdir: ".",
            absWorkingDir,
            outfile: "",
            platform: "neutral",
            plugins: [
                freshPlugin(this.#pages),
                denoPlugin()
            ],
            splitting: true,
            target: [
                "chrome90",
                "firefox88",
                "safari13"
            ],
            treeShaking: true,
            write: false
        });
        const metafileOutputs = bundle.metafile.outputs;
        for(const path110 in metafileOutputs){
            const meta = metafileOutputs[path110];
            const imports = meta.imports.filter(({ kind  })=>kind === "import-statement"
            ).map(({ path: path91  })=>`/${path91}`
            );
            this.#preloads.set(`/${path110}`, imports);
        }
        const cache = new Map();
        const absDirUrlLength = toFileUrl2(absWorkingDir).href.length;
        for (const file of bundle.outputFiles){
            cache.set(toFileUrl2(file.path).href.substring(absDirUrlLength), file.contents);
        }
        this.#cache = cache;
        return;
    }
    async cache() {
        if (this.#cache === undefined) {
            this.#cache = this.bundle();
        }
        if (this.#cache instanceof Promise) {
            await this.#cache;
        }
        return this.#cache;
    }
    async get(path92) {
        const cache = await this.cache();
        return cache.get(path92) ?? null;
    }
    getPreloads(path93) {
        return this.#preloads.get(path93) ?? [];
    }
}
function freshPlugin(pageList) {
    const runtime = new URL("../../runtime.ts", importMeta1.url);
    const pageMap = new Map();
    for (const page1 of pageList){
        pageMap.set(`/${page1.name}`, page1);
    }
    return {
        name: "fresh",
        setup (build3) {
            build3.onResolve({
                filter: /fresh:\/\/.*/
            }, function onResolve(args) {
                return {
                    path: args.path,
                    namespace: "fresh"
                };
            });
            build3.onLoad({
                filter: /.*/,
                namespace: "fresh"
            }, function onLoad(args) {
                const url = new URL(args.path);
                const path94 = url.pathname;
                const page = pageMap.get(path94);
                if (!page) return null;
                const contents = `
import Page from "${page.url}";
import { h, render, DATA_CONTEXT } from "${runtime.href}";

addEventListener("DOMContentLoaded", () => {
  const { params, data } = JSON.parse(document.getElementById("__FRSH_PROPS")?.textContent ?? "{}");
  try {
    render(h(DATA_CONTEXT.Provider, { value: new Map(data ?? []) }, h(Page, { params: params ?? {} })), document.getElementById("__FRSH"));  
  } catch(err) {
    if (err instanceof Promise) {
      console.error("Render tried to suspend without a suspense boundary.");
    } else {
      console.error("Render threw an error:", err);
    }
  }
});
`;
                return {
                    contents,
                    loader: "js"
                };
            });
        }
    };
}
const INTERNAL_PREFIX = "/_frsh";
const REFRESH_JS_URL = `${INTERNAL_PREFIX}/refresh.js`;
const ALIVE_URL = `${INTERNAL_PREFIX}/alive`;
const BUILD_ID = Deno.env.get("DENO_DEPLOYMENT_ID") || crypto.randomUUID();
const JS_PREFIX = `/js`;
var c, r, l, i = 0, h1 = [], H1 = d.__b, p = d.__r, d1 = d.diffed, y = d.__c, E = d.unmount;
function a(_, n) {
    d.__h && d.__h(r, _, i || n), i = 0;
    var t = r.__H || (r.__H = {
        __: [],
        __h: []
    });
    return _ >= t.__.length && t.__.push({}), t.__[_];
}
function F1(_) {
    return i = 1, q2(A2, _);
}
function q2(_, n, t) {
    var u = a(c++, 2);
    return u.t = _, u.__c || (u.__ = [
        t ? t(n) : A2(void 0, n),
        function(o) {
            var f = u.t(u.__[0], o);
            u.__[0] !== f && (u.__ = [
                f,
                u.__[1]
            ], u.__c.setState({}));
        }
    ], u.__c = r), u.__;
}
function x1() {
    h1.forEach(function(_) {
        if (_.__P) try {
            _.__H.__h.forEach(s), _.__H.__h.forEach(m1), _.__H.__h = [];
        } catch (n) {
            _.__H.__h = [], d.__e(n, _.__v);
        }
    }), h1 = [];
}
d.__b = function(_) {
    r = null, H1 && H1(_);
}, d.__r = function(_) {
    p && p(_), c = 0;
    var n = (r = _.__c).__H;
    n && (n.__h.forEach(s), n.__h.forEach(m1), n.__h = []);
}, d.diffed = function(_) {
    d1 && d1(_);
    var n = _.__c;
    n && n.__H && n.__H.__h.length && (h1.push(n) !== 1 && l === d.requestAnimationFrame || ((l = d.requestAnimationFrame) || function(t) {
        var u, o = function() {
            clearTimeout(f), b && cancelAnimationFrame(u), setTimeout(t);
        }, f = setTimeout(o, 100);
        b && (u = requestAnimationFrame(o));
    })(x1)), r = void 0;
}, d.__c = function(_, n) {
    n.some(function(t) {
        try {
            t.__h.forEach(s), t.__h = t.__h.filter(function(u) {
                return !u.__ || m1(u);
            });
        } catch (u) {
            n.some(function(o) {
                o.__h && (o.__h = []);
            }), n = [], d.__e(u, t.__v);
        }
    }), y && y(_, n);
}, d.unmount = function(_) {
    E && E(_);
    var n = _.__c;
    if (n && n.__H) try {
        n.__H.__.forEach(s);
    } catch (t) {
        d.__e(t, n.__v);
    }
};
var b = typeof requestAnimationFrame == "function";
function s(_) {
    var n = r;
    typeof _.__c == "function" && _.__c(), r = n;
}
function m1(_) {
    var n = r;
    _.__c = _.__(), r = n;
}
function A2(_, n) {
    return typeof n == "function" ? n(_) : n;
}
const DATA_CONTEXT = se(new Map());
const SUSPENSE_CONTEXT = se([]);
const HEAD_CONTEXT = se([]);
const SELF = "'self'";
const UNSAFE_INLINE = "'unsafe-inline'";
const NONE = "'none'";
function nonce(val) {
    return `'nonce-${val}'`;
}
const CSP_CONTEXT = se(undefined);
class RenderContext {
    #id;
    #state = new Map();
    #styles = [];
    #url;
    #route;
    #lang = "en";
    constructor(id, url, route){
        this.#id = id;
        this.#url = url;
        this.#route = route;
    }
    get id() {
        return this.#id;
    }
    get state() {
        return this.#state;
    }
    get styles() {
        return this.#styles;
    }
    get url() {
        return this.#url;
    }
    get route() {
        return this.#route;
    }
    get lang() {
        return this.#lang;
    }
    set lang(lang) {
        this.#lang = lang;
    }
}
function defaultCsp() {
    return {
        directives: {
            defaultSrc: [
                NONE
            ],
            styleSrc: [
                UNSAFE_INLINE
            ]
        },
        reportOnly: false
    };
}
async function* render(opts) {
    const props = {
        params: opts.params,
        url: opts.url,
        route: opts.page.route,
        renderData: opts.renderData
    };
    if (opts.error) {
        props.error = opts.error;
    }
    const csp = opts.page.csp ? defaultCsp() : undefined;
    const dataCache = new Map();
    const suspenseQueue = [];
    const headComponents = [];
    const vnode = Z(CSP_CONTEXT.Provider, {
        value: csp,
        children: Z(HEAD_CONTEXT.Provider, {
            value: headComponents,
            children: Z(DATA_CONTEXT.Provider, {
                value: dataCache,
                children: Z(SUSPENSE_CONTEXT.Provider, {
                    value: suspenseQueue,
                    children: Z(opts.app.default, {
                        Component () {
                            return Z(opts.page.component, props);
                        }
                    })
                })
            })
        })
    });
    const ctx = new RenderContext(crypto.randomUUID(), opts.url, opts.page.route);
    let suspended = 0;
    const renderWithRenderer = ()=>{
        if (csp) {
            const newCsp = defaultCsp();
            csp.directives = newCsp.directives;
            csp.reportOnly = newCsp.reportOnly;
        }
        suspenseQueue.splice(0, suspenseQueue.length);
        headComponents.splice(0, headComponents.length);
        if (++suspended > 10) {
            throw new Error(`Reached maximum suspense depth of ${10}.`);
        }
        let body = null;
        let promise = null;
        function render1() {
            try {
                body = m(vnode);
                return body;
            } catch (e) {
                if (e && e.then) {
                    promise = e;
                    return "";
                }
                throw e;
            }
        }
        opts.renderer.render(ctx, render1);
        if (body !== null) {
            return body;
        } else if (promise !== null) {
            return promise.then(renderWithRenderer);
        } else {
            throw new Error("`render` function not called by renderer.");
        }
    };
    const bodyHtml = await renderWithRenderer();
    let templateProps = {
        props,
        data: [
            ...dataCache.entries()
        ]
    };
    if (templateProps.data.length === 0) {
        delete templateProps.data;
    }
    if (opts.imports.length === 0 || opts.imports.length === 1 && opts.imports[0] === REFRESH_JS_URL) {
        templateProps = undefined;
    }
    const imports = opts.imports.map((url)=>{
        const randomNonce = crypto.randomUUID().replace(/-/g, "");
        if (csp) {
            csp.directives.scriptSrc = [
                ...csp.directives.scriptSrc ?? [],
                nonce(randomNonce), 
            ];
        }
        return [
            url,
            randomNonce
        ];
    });
    const html = template({
        bodyHtml,
        headComponents,
        imports,
        preloads: opts.preloads,
        styles: ctx.styles,
        props: templateProps,
        lang: ctx.lang
    });
    const suspenseNonces = suspenseQueue.map(()=>{
        const randomNonce = crypto.randomUUID().replace(/-/g, "");
        if (csp) {
            csp.directives.scriptSrc = [
                ...csp.directives.scriptSrc ?? [],
                nonce(randomNonce), 
            ];
        }
        return randomNonce;
    });
    let suspenseScript = "";
    if (suspenseQueue.length > 0) {
        const randomNonce = crypto.randomUUID().replace(/-/g, "");
        if (csp) {
            csp.directives.scriptSrc = [
                ...csp.directives.scriptSrc ?? [],
                nonce(randomNonce), 
            ];
        }
        suspenseScript = '<script nonce="' + randomNonce + '">(()=>{window.$SR=t=>{const e=document.getElementById("S:"+t),o=document.getElementById("E:"+t),d=document.getElementById("R:"+t);for(d.parentNode.removeChild(d);e.nextSibling!==o;)e.parentNode.removeChild(e.nextSibling);for(;d.firstChild;)e.parentNode.insertBefore(d.firstChild,o);e.parentNode.removeChild(e),o.parentNode.removeChild(o)};const n=document.getElementById("__FRSH_STYLE"),r=n.childNodes[0]?.textContent.split(`\n`);if(r!==void 0){n.removeChild(n.firstChild);for(const t of r)n.append(document.createTextNode(t))}window.$ST=t=>{for(const[e,o]of t)n.insertBefore(document.createTextNode(e),n.childNodes[o])}})();\n</script>';
    }
    let clientStyles = [
        ...ctx.styles
    ];
    yield [
        html + suspenseScript,
        csp
    ];
    for (const [id, children] of suspenseQueue.entries()){
        let [fragment, script] = await suspenseRender(opts.renderer, ctx, id + 1, children);
        const cssInserts = [];
        for (const [i102, style] of ctx.styles.entries()){
            if (!clientStyles.includes(style)) {
                cssInserts.push([
                    style,
                    i102
                ]);
            }
        }
        clientStyles = [
            ...ctx.styles
        ];
        if (cssInserts.length > 0) {
            script = `$ST(${JSON.stringify(cssInserts)});\n${script};`;
        }
        yield `${fragment}<script nonce="${suspenseNonces[id]}">${script}</script>`;
    }
}
async function suspenseRender(renderer, ctx, id, children) {
    const dataCache = new Map();
    const vnode = Z(DATA_CONTEXT.Provider, {
        value: dataCache,
        children
    });
    let suspended = 0;
    const renderWithRenderer = ()=>{
        if (++suspended > 10) {
            throw new Error(`Reached maximum suspense depth of ${10}.`);
        }
        let body = null;
        let promise = null;
        function render2() {
            try {
                body = m(vnode);
                return body;
            } catch (e) {
                if (e && e.then) {
                    promise = e;
                    return "";
                }
                throw e;
            }
        }
        renderer.render(ctx, render2);
        if (body !== null) {
            return body;
        } else if (promise !== null) {
            return promise.then(renderWithRenderer);
        } else {
            throw new Error("`render` function not called by renderer.");
        }
    };
    const html = await renderWithRenderer();
    return [
        `<div hidden id="R:${id}">${html}</div>`,
        `$SR(${id});`
    ];
}
function template(opts) {
    const page = Z("html", {
        lang: opts.lang
    }, Z("head", null, Z("meta", {
        charSet: "UTF-8"
    }), Z("meta", {
        "http-equiv": "X-UA-Compatible",
        content: "IE=edge"
    }), Z("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1.0"
    }), opts.preloads.map((src)=>Z("link", {
            rel: "modulepreload",
            href: src
        })
    ), opts.imports.map(([src, nonce1])=>Z("script", {
            src: src,
            nonce: nonce1,
            type: "module"
        })
    ), Z("style", {
        id: "__FRSH_STYLE",
        dangerouslySetInnerHTML: {
            __html: opts.styles.join("\n")
        }
    }), opts.headComponents), Z("body", null, Z("div", {
        dangerouslySetInnerHTML: {
            __html: opts.bodyHtml
        },
        id: "__FRSH"
    }), opts.props !== undefined ? Z("script", {
        id: "__FRSH_PROPS",
        type: "application/json",
        dangerouslySetInnerHTML: {
            __html: JSON.stringify(opts.props)
        }
    }) : null));
    return "<!DOCTYPE html>" + m(page);
}
class ServerContext {
    #dev;
    #pages;
    #staticFiles;
    #bundler;
    #renderer;
    #middleware;
    #app;
    #notFound;
    #error;
    constructor(pages, staticFiles, renderer, middleware, app, notFound, error){
        this.#pages = pages;
        this.#staticFiles = staticFiles;
        this.#renderer = renderer;
        this.#middleware = middleware;
        this.#app = app;
        this.#notFound = notFound;
        this.#error = error;
        this.#bundler = new Bundler(pages);
        this.#dev = typeof Deno.env.get("DENO_DEPLOYMENT_ID") !== "string";
    }
    static async fromRoutes(routes2) {
        console.log("here")
        const baseUrl = new URL("./", routes2.baseUrl).href;
        const pages = [];
        let renderer = DEFAULT_RENDERER;
        let middleware = DEFAULT_MIDDLEWARE;
        let app = DEFAULT_APP;
        let notFound = DEFAULT_NOT_FOUND;
        let error = DEFAULT_ERROR;
        for (const [self, module] of Object.entries(routes2.pages)){
            const url = new URL(self, baseUrl).href;
            if (!url.startsWith(baseUrl)) {
                throw new TypeError("Page is not a child of the basepath.");
            }
            const path95 = url.substring(baseUrl.length).substring("pages".length);
            const baseRoute = path95.substring(1, path95.length - extname2(path95).length);
            const name = baseRoute.replace("/", "-");
            if (!path95.startsWith("/_")) {
                const { default: component , config: config1  } = module;
                let route = pathToRoute(baseRoute);
                if (config1?.routeOverride) {
                    route = String(config1.routeOverride);
                }
                let { handler: handler4  } = module;
                handler4 ??= {};
                if (component && typeof handler4 === "object" && handler4.GET === undefined) {
                    handler4.GET = ({ render: render1  })=>render1()
                    ;
                }
                const page = {
                    route,
                    url,
                    name,
                    component,
                    handler: handler4,
                    runtimeJS: Boolean(config1?.runtimeJS ?? false),
                    csp: Boolean(config1?.csp ?? false)
                };
                pages.push(page);
            } else if (path95 === "/_render.tsx" || path95 === "/_render.ts" || path95 === "/_render.jsx" || path95 === "/_render.js") {
                renderer = module;
            } else if (path95 === "/_middleware.tsx" || path95 === "/_middleware.ts" || path95 === "/_middleware.jsx" || path95 === "/_middleware.js") {
                middleware = module;
            } else if (path95 === "/_app.tsx" || path95 === "/_app.ts" || path95 === "/_app.jsx" || path95 === "/_app.js") {
                app = module;
            } else if (path95 === "/_404.tsx" || path95 === "/_404.ts" || path95 === "/_404.jsx" || path95 === "/_404.js") {
                const { default: component , config: config2  } = module;
                let { handler: handler5  } = module;
                if (component && handler5 === undefined) {
                    handler5 = ({ render: render2  })=>render2()
                    ;
                }
                notFound = {
                    route: pathToRoute(baseRoute),
                    url,
                    name,
                    component,
                    handler: handler5 ?? ((ctx)=>mod4.defaultOtherHandler(ctx.req)
                    ),
                    runtimeJS: Boolean(config2?.runtimeJS ?? false),
                    csp: Boolean(config2?.csp ?? false)
                };
            } else if (path95 === "/_500.tsx" || path95 === "/_500.ts" || path95 === "/_500.jsx" || path95 === "/_500.js") {
                const { default: component , config: config3  } = module;
                let { handler: handler6  } = module;
                if (component && handler6 === undefined) {
                    handler6 = ({ render: render3  })=>render3()
                    ;
                }
                error = {
                    route: pathToRoute(baseRoute),
                    url,
                    name,
                    component,
                    handler: handler6 ?? ((ctx)=>mod4.defaultErrorHandler(ctx.req, ctx.error)
                    ),
                    runtimeJS: Boolean(config3?.runtimeJS ?? false),
                    csp: Boolean(config3?.csp ?? false)
                };
            }
        }
        sortRoutes(pages);
        const staticFiles = [];
        try {
            const staticFolder = new URL("./static", routes2.baseUrl);
            for await (const _ of Deno.readDir(fromFileUrl2(staticFolder))){}
            const entires = walk(fromFileUrl2(staticFolder), {
                includeFiles: true,
                includeDirs: false,
                followSymlinks: false
            });
            for await (const entry of entires){
                const localUrl = toFileUrl2(entry.path);
                const path96 = localUrl.href.substring(staticFolder.href.length);
                const stat = await Deno.stat(localUrl);
                const contentType = lookup1(extname2(path96)) ?? "application/octet-stream";
                const staticFile = {
                    localUrl,
                    path: path96,
                    size: stat.size,
                    contentType
                };
                staticFiles.push(staticFile);
            }
        } catch (err) {
            if (err instanceof Deno.errors.NotFound) {} else {
                throw err;
            }
        }
        return new ServerContext(pages, staticFiles, renderer, middleware, app, notFound, error);
    }
    handler() {
        const inner = mod4.router(...this.#routes());
        const middleware = this.#middleware;
        return function handler(req) {
            const url = new URL(req.url);
            if (url.pathname.length > 1 && url.pathname.endsWith("/")) {
                url.pathname = url.pathname.slice(0, -1);
                return Response.redirect(url.href, 307);
            }
            const handle = ()=>Promise.resolve(inner(req))
            ;
            return middleware.handler(req, handle);
        };
    }
     #routes() {
        const routes = {};
        for (const { localUrl , path , size , contentType  } of this.#staticFiles){
            const route = sanitizePathToRegex(path);
            routes[`GET@${route}`] = this.#staticFileHandler(localUrl, size, contentType);
        }
        const genRender = (page2, status)=>{
            const bundlePath = `/${page2.name}.js`;
            const imports = page2.runtimeJS ? [
                bundleAssetUrl(bundlePath)
            ] : [];
            if (this.#dev) {
                imports.push(REFRESH_JS_URL);
            }
            return (req, params, error)=>{
                if (page2.component === undefined) return undefined;
                return async (renderData)=>{
                    const preloads = page2.runtimeJS ? this.#bundler.getPreloads(bundlePath).map(bundleAssetUrl) : [];
                    const body = render({
                        page: page2,
                        app: this.#app,
                        imports,
                        preloads,
                        renderer: this.#renderer,
                        url: new URL(req.url),
                        params,
                        renderData,
                        error
                    });
                    const headers = {
                        "content-type": "text/html; charset=utf-8"
                    };
                    let firstChunk;
                    const iterator = body[Symbol.asyncIterator]();
                    try {
                        const { value , done  } = await iterator.next();
                        if (done) throw new Error("Body is empty.");
                        firstChunk = value[0];
                        const csp = value[1];
                        if (csp) {
                            if (this.#dev) {
                                csp.directives.connectSrc = [
                                    ...csp.directives.connectSrc ?? [],
                                    SELF, 
                                ];
                            }
                            const directive = serializeCSPDirectives(csp.directives);
                            if (csp.reportOnly) {
                                headers["content-security-policy-report-only"] = directive;
                            } else {
                                headers["content-security-policy"] = directive;
                            }
                        }
                    } catch (err1) {
                        console.error("Error rendering page", err1);
                        throw new Response("500 Internal Server Error", {
                            status: 500,
                            headers: {
                                "content-type": "text/plain"
                            }
                        });
                    }
                    const bodyStream = new ReadableStream({
                        async start (controller) {
                            controller.enqueue(new TextEncoder().encode(firstChunk));
                            try {
                                for await (const chunk of body){
                                    controller.enqueue(new TextEncoder().encode(chunk));
                                }
                            } catch (err) {
                                console.log("Rendering failed:\n", err);
                                controller.enqueue(new TextEncoder().encode("500 Internal Server Error"));
                            }
                            controller.close();
                        }
                    });
                    return new Response(bodyStream, {
                        status,
                        headers
                    });
                };
            };
        };
        for (const page1 of this.#pages){
            const createRender = genRender(page1, 200);
            if (typeof page1.handler === "function") {
                routes[page1.route] = (req, match)=>page1.handler({
                        req,
                        match,
                        render: createRender(req, match)
                    })
                ;
            } else {
                for (const [method, handler] of Object.entries(page1.handler)){
                    routes[`${method}@${page1.route}`] = (req, match)=>handler({
                            req,
                            match,
                            render: createRender(req, match)
                        })
                    ;
                }
            }
        }
        const unknownHandlerRender = genRender(this.#notFound, 404);
        const unknownHandler = (req)=>this.#notFound.handler({
                req,
                match: {},
                render: unknownHandlerRender(req, {})
            })
        ;
        const errorHandlerRender = genRender(this.#error, 500);
        const errorHandler = (req, error)=>this.#notFound.handler({
                req,
                match: {},
                render: errorHandlerRender(req, {}, error)
            })
        ;
        routes[`${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}/:path*`] = this.#bundleAssetRoute();
        if (this.#dev) {
            routes[REFRESH_JS_URL] = ()=>{
                const js = `const buildId = "${BUILD_ID}"; new EventSource("${ALIVE_URL}").addEventListener("message", (e) => { if (e.data !== buildId) { location.reload(); } });`;
                return new Response(new TextEncoder().encode(js), {
                    headers: {
                        "content-type": "application/javascript; charset=utf-8"
                    }
                });
            };
            routes[ALIVE_URL] = ()=>{
                let timerId = undefined;
                const body = new ReadableStream({
                    start (controller) {
                        controller.enqueue(`data: ${BUILD_ID}\nretry: 100\n\n`);
                        timerId = setInterval(()=>{
                            controller.enqueue(`data: ${BUILD_ID}\n\n`);
                        }, 1000);
                    },
                    cancel () {
                        if (timerId !== undefined) {
                            clearInterval(timerId);
                        }
                    }
                });
                return new Response(body.pipeThrough(new TextEncoderStream()), {
                    headers: {
                        "content-type": "text/event-stream"
                    }
                });
            };
        }
        return [
            routes,
            unknownHandler,
            errorHandler
        ];
    }
     #staticFileHandler(localUrl, size, contentType) {
        return async (_req)=>{
            const resp = await fetch(localUrl);
            return new Response(resp.body, {
                headers: {
                    "content-type": contentType,
                    "content-length": String(size)
                }
            });
        };
    }
    #bundleAssetRoute = ()=>{
        return async (_req, match)=>{
            const path97 = `/${match.path}`;
            const file = await this.#bundler.get(path97);
            let res;
            if (file) {
                const headers = new Headers({
                    "Cache-Control": "public, max-age=604800, immutable"
                });
                const contentType1 = lookup1(path97);
                if (contentType1) {
                    headers.set("Content-Type", contentType1);
                }
                res = new Response(file, {
                    status: 200,
                    headers
                });
            }
            return res ?? new Response(null, {
                status: 404
            });
        };
    };
}
function bundleAssetUrl(path98) {
    return `${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}${path98}`;
}
const DEFAULT_RENDERER = {
    render (_ctx, render4) {
        render4();
    }
};
const DEFAULT_MIDDLEWARE = {
    handler: (_, handle)=>handle()
};
const DEFAULT_APP = {
    default: ({ Component  })=>Z(Component, {})
};
const DEFAULT_NOT_FOUND = {
    route: "",
    url: "",
    name: "_404",
    handler: (ctx)=>mod4.defaultOtherHandler(ctx.req)
    ,
    runtimeJS: false,
    csp: false
};
const DEFAULT_ERROR = {
    route: "",
    url: "",
    name: "_500",
    handler: (ctx)=>mod4.defaultErrorHandler(ctx.req, ctx.error)
    ,
    runtimeJS: false,
    csp: false
};
function sortRoutes(routes3) {
    routes3.sort((a9, b11)=>{
        const partsA = a9.route.split("/");
        const partsB = b11.route.split("/");
        for(let i103 = 0; i103 < Math.max(partsA.length, partsB.length); i103++){
            const partA = partsA[i103];
            const partB = partsB[i103];
            if (partA === undefined) return -1;
            if (partB === undefined) return 1;
            if (partA === partB) continue;
            const priorityA = partA.startsWith(":") ? partA.endsWith("*") ? 0 : 1 : 2;
            const priorityB = partB.startsWith(":") ? partB.endsWith("*") ? 0 : 1 : 2;
            return Math.max(Math.min(priorityB - priorityA, 1), -1);
        }
        return 0;
    });
}
function pathToRoute(path99) {
    const parts = path99.split("/");
    if (parts[parts.length - 1] === "index") {
        parts.pop();
    }
    const route = "/" + parts.map((part)=>{
        if (part.startsWith("[...") && part.endsWith("]")) {
            return `:${part.slice(4, part.length - 1)}*`;
        }
        if (part.startsWith("[") && part.endsWith("]")) {
            return `:${part.slice(1, part.length - 1)}`;
        }
        return part;
    }).join("/");
    return route;
}
function sanitizePathToRegex(path100) {
    return path100.replaceAll("\*", "\\*").replaceAll("\+", "\\+").replaceAll("\?", "\\?").replaceAll("\{", "\\{").replaceAll("\}", "\\}").replaceAll("\(", "\\(").replaceAll("\)", "\\)").replaceAll("\:", "\\:");
}
function serializeCSPDirectives(csp) {
    return Object.entries(csp).filter(([_key, value])=>value !== undefined
    ).map(([k3, v])=>{
        const key = k3.replace(/[A-Z]/g, (m9)=>`-${m9.toLowerCase()}`
        );
        const value = Array.isArray(v) ? v.join(" ") : v;
        return `${key} ${value}`;
    }).join("; ");
}
async function start(routes4) {
    console.log(routes4)
    const ctx = await ServerContext.fromRoutes(routes4);
    console.log("Server listening on http://localhost:8000");
    await listenAndServe(":8000", ctx.handler());
}
function Greet(props) {
    return Z("div", null, "Hello ", props.params.name);
}
const mod9 = {
    default: Greet
};
const JOKES = [
    "Why do Java developers often wear glasses? They can’t C#.",
    "A SQL query walks into a bar, goes up to two tables and says “can I join you?",
    "Wasn’t hard to crack Forrest Gump’s password. 1forrest1.",
    "I love pressing the F5 key. It’s refreshing.",
    "Called IT support and a chap from Australia came to fix my network connection.  I asked “Do you come from a LAN down under?”",
    "There are 10 types of people in the world. Those who understand binary and those who don’t.",
    "Why are assembly programmers often wet? They work below C level.",
    "My favourite computer based band is the Black IPs.",
    "What programme do you use to predict the music tastes of former US presidential candidates? An Al Gore Rhythm.",
    "An SEO expert walked into a bar, pub, inn, tavern, hostelry, public house.", 
];
const handler = (_ctx)=>{
    const randomIndex = Math.floor(Math.random() * 10);
    const body = JOKES[randomIndex];
    return new Response(body);
};
const mod10 = {
    handler: handler
};
const config = {
    runtimeJS: true
};
function Home() {
    const [table, setTable] = F1([]);
    return Z("div", null, Z("input", {
        onChange: (ev)=>{
            setTable(parse9(ev.target.value));
        }
    }), table[0] ? Z(Table, {
        table: table
    }) : "");
}
function Table(props) {
    const table = props.table;
    const Header = ()=>{
        const style = {
            color: "blue"
        };
        return Z("tr", {
            style: style
        }, Object.keys(table[0].param).map((col)=>{
            return Z("td", null, col);
        }), Z("td", {
            style: {
                color: "#221"
            }
        }, "Result"));
    };
    return Z("div", null, Z("table", null, Z(Header, null), table.map((row)=>{
        const style = (val)=>{
            return {
                color: val.toString() === "0" ? "red" : "green"
            };
        };
        return Z("tr", null, Object.keys(row.param).map((col)=>{
            const val = row.param[col];
            return Z("td", {
                style: style(val)
            }, val);
        }), Z("td", {
            style: style(row.result)
        }, row.result));
    })));
}
function parse9(value1) {
    const results = [];
    function rec(value, idx, param) {
        const __char = String.fromCharCode(idx);
        if (idx < 123) {
            if (value.includes(__char)) {
                const a10 = value.replace(__char, "0");
                const b12 = value.replace(__char, "1");
                const paramA = {
                    ...param
                };
                const paramB = {
                    ...param
                };
                paramA[__char] = 0;
                paramB[__char] = 1;
                rec(a10, idx + 1, paramA);
                rec(b12, idx + 1, paramB);
            } else {
                rec(value, idx + 1, param);
            }
        } else {
            results.push({
                result: eval(value),
                param
            });
        }
    }
    rec(value1, 97, {});
    return results;
}
const mod11 = {
    config: config,
    default: Home
};
const importMeta2 = {
    url: "file:///home/mrcool/dev/deno/fresh/truthTable/routes.gen.ts",
    main: false
};
const routes = {
    pages: {
        "./pages/[name].tsx": mod9,
        "./pages/api/joke.ts": mod10,
        "./pages/index.tsx": mod11
    },
    baseUrl: importMeta2.url
};
await start(routes);
